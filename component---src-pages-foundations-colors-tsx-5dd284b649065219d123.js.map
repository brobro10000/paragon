{"version":3,"file":"component---src-pages-foundations-colors-tsx-5dd284b649065219d123.js","mappings":"8LAiBA,MAAMA,EAAsB,CAAC,EAE7B,SAASC,EAAYC,GAKF,IALG,WACpBC,EAAU,aACVC,EAAY,YACZC,EAAW,SACXC,GACcJ,EACd,MAAM,SAAEK,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,kBAC1B,MAAEC,GAAUH,GACZ,EAACI,EAAa,EAACC,IAAmBC,EAAAA,EAAAA,UAASb,GAC3Cc,GAAUC,EAAAA,EAAAA,UAuBhB,OArBAC,EAAAA,EAAAA,YACE,KAaEJ,EAAgBZ,GAChB,MAAMiB,EAAUC,YAbAC,KACd,IAAKL,EAAQM,QACX,OAEF,MAAMC,EAAgBC,iBAAiBR,EAAQM,SACzCG,EAAoBpB,EAAWqB,QAAO,CAACC,EAA+BC,KAC1ED,EAAIC,GAAYL,EAAcM,iBAAiBD,GACxCD,IACN,CAAC,GACJb,EAAgBW,EAAkB,GAIA,KACpC,MAAO,IAAMK,aAAaX,EAAQ,GAEpC,CAACP,EAAOP,IAIR0B,EAAAA,cAAAA,EAAAA,SAAA,KACGzB,EAAeA,EAAaO,GAAgB,KAC5CkB,EAAAA,aAAmBvB,EAAgC,CAAEwB,IAAKhB,IAC1DT,EAAcA,EAAYM,GAAgB,KAGjD,CASAV,EAAa8B,aAAe,CAC1B5B,WAAY,GACZC,kBAAc4B,EACd3B,iBAAa2B,GAGf,K,2MCvEA,MAAMC,EAAuC,CAC3C,IAAK,QACL,IAAK,QACL,IAAK,UACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,SAyBP,MAtB0B,CACxB9B,WAAY,CAAC,YAAa,cAAe,cAAe,eACxDE,YAAcM,IACZ,MAAMuB,EAAavB,EAAa,eAC5BA,EAAa,eAAewB,MAAM,KAAK,GACvC,KACEC,EAASH,EAAatB,EAAa,gBAEnC0B,EAAWC,KAAKC,MAAqD,GAA/CC,OAAOC,WAAW9B,EAAa,eAAsB,GAC3E+B,EAAaJ,KAAKC,MAAuD,GAAjDC,OAAOC,WAAW9B,EAAa,iBAAwB,GAErF,OACEkB,EAAAA,cAAA,KAAGc,UAAU,kBACXd,EAAAA,cAAA,QAAMc,UAAU,QACbT,EAAW,IAAEE,GAEfC,EAAS,QAAMK,EAAW,KACzB,GCVH,SAASE,EAAa1C,GAA2B,IAA1B,MAAE2C,GAAqB3C,EACnD,OAAK2C,EAKHhB,EAAAA,cAAA,QAAMc,UAAU,SAAQ,IACpBE,GALG,IAQX,CAEO,SAASC,EAAQC,GAA2B,IAA1B,MAAEF,GAAqBE,EAC9C,OACElB,EAAAA,cAAA,KAAGc,UAAU,aACVE,EAGP,CAEO,SAASG,EAAQC,GAA2B,IAA1B,MAAEJ,GAAqBI,EAC9C,OACEpB,EAAAA,cAAA,QAAMc,UAAU,SACbE,EAGP,CAEO,SAASK,EAAmBC,GAA8B,IAA7B,IAAEC,GAAwBD,EAC5D,OACEtB,EAAAA,cAAC5B,EAAAA,EAAiBoD,EAChBxB,EAAAA,cAAA,KAAGc,UAAY,OAAMS,EAAIE,SAASX,aAC/BS,EAAIE,SAASC,MAItB,CAEO,SAASC,EAAkBC,GAA8B,IAA7B,IAAEL,GAAwBK,EAC3D,OACE5B,EAAAA,cAAA,OAAKc,UAAU,eACbd,EAAAA,cAAC5B,EAAAA,EAAiBoD,EAChBxB,EAAAA,cAAA,KAAGc,UAAY,OAAMS,EAAIE,SAASX,aAC/BS,EAAIE,SAASC,OAKxB,CAEO,SAASG,EAASC,GAA8B,IAA7B,IAAEP,GAAwBO,EAClD,OACE9B,EAAAA,cAAA,KAAGc,UAAY,SAAQS,EAAIE,SAASX,aACjCS,EAAIE,SAASC,KAGpB,C,0KCjEA,MAAMK,EAAiB,CACrBC,GAAIA,CAACC,EAAeC,IAAmBA,EAAS,MAAKD,KAASC,IAAW,MAAKD,IAC9EE,OAAQA,CAACF,EAAeC,IAAmBA,EAAS,UAASD,KAASC,IAAW,UAASD,IAC1FP,KAAMA,CAACO,EAAeC,IAAmBA,EAAS,QAAOD,KAASC,IAAW,QAAOD,KAShFG,EAAoB,CACxB,CAAEC,UAAW,OAAQJ,MAAO,OAAQK,aAAc,IAClD,CAAED,UAAW,UAAWJ,MAAO,OAAQK,aAAc,IACrD,CAAED,UAAW,QAASJ,MAAO,OAAQK,aAAc,IACnD,CAAED,UAAW,QAASJ,MAAO,QAASK,aAAc,IACpD,CAAED,UAAW,OAAQJ,MAAO,OAAQK,aAAc,IAClD,CAAED,UAAW,UAAWJ,MAAO,QAASK,aAAc,IACtD,CAAED,UAAW,OAAQJ,MAAO,OAAQK,aAAc,IAClD,CAAED,UAAW,SAAUJ,MAAO,MAAOK,aAAc,IACnD,CAAED,UAAW,UAAWJ,MAAO,SAAUK,aAAc,KAGnDC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAElDC,EAAgD,CAAC,EAwBvD,SAASC,EAAMvB,GAEH,IAFI,KACdwB,EAAI,eAAEC,EAAc,SAAEC,EAAQ,OAAEC,GACxB3B,EACR,MAAM4B,EAAgBD,aAAM,EAANA,EAAQ/C,iBAAiB4C,GAE/C,OACE1C,EAAAA,cAAA,OAAKc,UAAU,kCACbd,EAAAA,cAAA,OACEc,UAAWiC,IAAW,mBAAoBJ,EAAgB,CACxD,eAAgBC,MAGpB5C,EAAAA,cAAA,OAAKgD,MAAO,CAAEnC,WAAY,GAAKC,UAAU,SACvCd,EAAAA,cAAA,QAAMc,UAAU,6CACZ,OAAM4B,MAGV1C,EAAAA,cAAA,QAAMgD,MAAO,CAAExC,SAAU,OAASM,UAAU,cACzCgC,IAKX,CAQAL,EAAOvC,aAAe,CACpB0C,UAAU,GAGZ,MAAMK,EAAkBA,CAACZ,EAAmBC,EAAwBO,IAClE7C,EAAAA,cAAA,OACEkD,IAAM,GAAEb,KAERrC,EAAAA,cAAA,KAAGc,UAAU,MAAMuB,GAClBE,EAAOY,KAAIjB,GACVlC,EAAAA,cAACyC,EAAM,CACLS,IAAM,GAAEb,KAAaH,IACrBQ,KAAO,eAAcL,KAAaH,IAClCS,eAAgBZ,EAAeC,GAAGK,EAAWH,GAC7CU,SAAUN,EAAac,SAASlB,GAChCW,OAAQA,OAeD,SAASQ,EAAUjC,GAAwB,IAAvB,KAAEkC,GAAmBlC,EACtD,MAAM,SAAE1C,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,iBAC1BiE,EAA2B,oBAAXU,OAAyB9D,iBAAiB+D,SAASC,MAAQ,KArFnF,IAAqBC,EAyFnB,OAzFmBA,EAuFPJ,EAAKK,qBAAqBC,MAtFyB,IAAvCC,OAAOC,KAAKtB,GAAgBuB,QAGpDL,EAAaM,SAAQ3F,IAAgC,IAA/B,SAAE4F,EAAQ,aAAEC,GAAc7F,EAE9C,MAAM8F,EAAuBD,EAAa,GAAG5D,MAAM,KACnDkC,EAAeyB,GAAYE,EAAqBJ,OAC5CI,EAAqB,GACrB,IAAI,IAiFRnE,EAAAA,cAACoE,EAAAA,EAAM,CAACC,WAAS,GAEfrE,EAAAA,cAACsE,EAAAA,EAAG,CAACC,MAAM,WACXvE,EAAAA,cAACwE,EAAAA,EAAS,CAACC,KAAM/F,EAASgG,eAAgB5D,UAAU,QAClDd,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,OAAKc,UAAU,sBACZsB,EACEuC,MAAM,EAAG,GACTxB,KAAI7B,IAAA,IAAC,UAAEe,EAAS,aAAEC,GAAchB,EAAA,OAAK2B,EAAgBZ,EAAWC,EAAcO,EAAO,IACvFT,EACEuC,MAAM,GACNxB,KAAIvB,IAAA,IAAC,UAAES,EAAS,aAAEC,GAAcV,EAAA,OAAKqB,EAAgBZ,EAAWC,EAAcO,EAAO,IACxF7C,EAAAA,cAAA,WACEA,EAAAA,cAAA,KAAGc,UAAU,MAAK,WAElBd,EAAAA,cAACyC,EAAM,CAACC,KAAK,uBAAuBC,eAAe,cAAcE,OAAQA,IACzE7C,EAAAA,cAACyC,EAAM,CAACC,KAAK,uBAAuBC,eAAe,cAAcE,OAAQA,MAI7E7C,EAAAA,cAAA,UAAI,mBAEJA,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAAA,QAAMc,UAAU,qCACb,kCACDd,EAAAA,cAAA,WAAM,+BAENA,EAAAA,cAAA,WAAM,+BAENA,EAAAA,cAAA,WAAM,6BAENA,EAAAA,cAAA,WAAM,8BAIRA,EAAAA,cAAA,UAAI,sBACJA,EAAAA,cAAA,SAAG,iLAIHA,EAAAA,cAAA,QAAMc,UAAU,qCACb,oDACDd,EAAAA,cAAA,WAAM,4DAIRA,EAAAA,cAAA,UAAI,uBACJA,EAAAA,cAAA,SAAG,sFAIHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,YAAO,2BAETA,EAAAA,cAAA,OAAKc,UAAU,gBACbd,EAAAA,cAAC4E,EAAAA,EAAS,CACRC,UAAW,EACXvB,KAAMlB,EAAOe,KAAI,CAAArB,EAAgBgD,KAAK,IAApB,UAAEzC,GAAWP,EAAA,MAAa,CAC1CiD,IAAKlB,OAAOC,KAAK/B,GAAgB+C,GACjC7C,MAAOI,EACPH,MAAOK,EAAOuC,GACf,IACDE,QAAS,CACP,CAAEC,OAAQ,MAAOC,SAAU,MAAOC,KAAMhE,EAAAA,IACxC,CAAE8D,OAAQ,QAASC,SAAU,QAASC,KAAMhE,EAAAA,IAC5C,CAAE8D,OAAQ,QAASC,SAAU,QAASC,KAAMhE,EAAAA,MAG9CnB,EAAAA,cAAC4E,EAAAA,EAAAA,MAAe,QAIpB5E,EAAAA,cAAA,UAAI,oBACJA,EAAAA,cAAA,OAAKc,UAAU,oBACZsB,EAAOe,KAAIiC,IAAA,IAAC,UAAE/C,GAAW+C,EAAA,OACxBpF,EAAAA,cAAA,OAAKkD,IAAKb,EAAWW,MAAO,CAAEqC,UAAW,QACvCrF,EAAAA,cAAA,OAAKc,UAAU,aACbd,EAAAA,cAAA,OACEc,UAAWiC,IACT,cACAhB,EAAeC,GAAGK,EAAW,OAG/BrC,EAAAA,cAAA,QAAMgD,MAAO,CAAEf,MAAO,YAAa,IAC/BF,EAAeC,GAAGK,EAAW,QAIjC,KAIVrC,EAAAA,cAAA,UAAI,mBACJA,EAAAA,cAAA,OAAKc,UAAU,oBACZsB,EAAOe,KAAImC,IAAA,IAAC,UAAEjD,GAAWiD,EAAA,OACxBtF,EAAAA,cAAA,OAAKkD,IAAKb,EAAWW,MAAO,CAAEqC,UAAW,QACvCrF,EAAAA,cAAA,OAAKc,UAAU,aACbd,EAAAA,cAAA,OACEc,UAAWiC,IACT,qBACAhB,EAAeI,OAAOE,EAAW,OAGnCrC,EAAAA,cAAA,QAAMgD,MAAO,CAAEf,MAAO,YAAa,IAC/BF,EAAeI,OAAOE,EAAW,QAIrC,KAIVrC,EAAAA,cAAA,UAAI,0BACJA,EAAAA,cAAA,OAAKc,UAAU,oBACZsB,EAAOe,KAAIoC,IAAA,IAAC,UAAElD,GAAWkD,EAAA,OACxBvF,EAAAA,cAAA,OAAKkD,IAAKb,EAAWW,MAAO,CAAEqC,UAAW,QACvCrF,EAAAA,cAAA,OAAKc,UAAU,aACbd,EAAAA,cAAA,OACEc,UAAWiC,IACT,qBACAhB,EAAeI,OAAOE,EAAW,OAGnCrC,EAAAA,cAAA,QAAMgD,MAAO,CAAEf,MAAO,YAAa,IAC/BF,EAAeI,OAAOE,EAAW,QAIrC,KAIVrC,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,SAAG,iFAIHA,EAAAA,cAAA,OAAKc,UAAU,uCACbd,EAAAA,cAAA,KAAGc,UAAU,iBAAgB,gBAC7Bd,EAAAA,cAAA,KAAGc,UAAU,iBAAgB,gBAC7Bd,EAAAA,cAAA,KAAGc,UAAU,iBAAgB,gBAE/Bd,EAAAA,cAAA,OAAKc,UAAU,UACZ,CAAC,IAAK,IAAK,KAAKqC,KAAIjB,GACnBlC,EAAAA,cAAA,OAAKkD,IAAKhB,EAAOc,MAAO,CAAEqC,UAAW,QAClCjD,EAAOe,KAAIqC,IAAiC,IAAhC,UAAEnD,EAAS,aAAEC,GAAckD,EACtC,OAAIlD,EAAac,SAASlB,GAAiB,KAEzClC,EAAAA,cAAA,QACEkD,IAAM,GAAEb,KAAaH,IACrBpB,UAAWiC,IACT,UACAhB,EAAeL,KAAKW,EAAWH,KAElC,IACGH,EAAeL,KAAKW,EAAWH,GAC5B,QAOjBlC,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAAA,SAAG,0CACHA,EAAAA,cAAA,WACEA,EAAAA,cAAA,OAAKc,UAAU,uCACbd,EAAAA,cAAA,OAAKc,UAAU,SACbd,EAAAA,cAAA,KAAGc,UAAU,WAAU,kBAEzBd,EAAAA,cAAA,OAAKc,UAAU,SACbd,EAAAA,cAAA,KAAGc,UAAU,WAAU,gBAEzBd,EAAAA,cAAA,OAAKc,UAAU,SACbd,EAAAA,cAAA,KAAGc,UAAU,WAAU,kBAG1BsB,EAAOe,KAAIsC,IAAmB,IAAlB,UAAEpD,GAAWoD,EACxB,MAAkB,YAAdpD,EAAkC,KAEpCrC,EAAAA,cAAA,OAAKkD,IAAKb,EAAWvB,UAAU,uCAC7Bd,EAAAA,cAAA,OACEc,UAAWiC,IACT,YACAhB,EAAeC,GAAGK,EAAW,KAC7B,CACE,aAA4B,UAAdA,KAIlBrC,EAAAA,cAAA,QAAMgD,MAAO,CAAEf,MAAO,YAAa,IAC/BF,EAAeC,GAAGK,EAAW,OAGnCrC,EAAAA,cAAA,OACEc,UAAWiC,IACT,YACAhB,EAAeC,GAAGK,EAAW,KAC7B,CACE,aAA4B,UAAdA,KAIlBrC,EAAAA,cAAA,QAAMgD,MAAO,CAAEf,MAAO,YAAa,IAC/BF,EAAeC,GAAGK,EAAW,OAGnCrC,EAAAA,cAAA,OACEc,UAAWiC,IACT,YACAhB,EAAeC,GAAGK,EAAW,KAC7B,CACE,aAA4B,UAAdA,KAIlBrC,EAAAA,cAAA,QAAMgD,MAAO,CAAEf,MAAO,YAAa,IAC/BF,EAAeC,GAAGK,EAAW,OAG/B,MAOpB,C","sources":["webpack://paragon-pattern-library-documentation/./src/components/MeasuredItem.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/measuredTypeProps.tsx","webpack://paragon-pattern-library-documentation/./src/components/TableCells.tsx","webpack://paragon-pattern-library-documentation/./src/pages/foundations/colors.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SettingsContext } from '../context/SettingsContext';\n\nexport interface IMeasuredItem {\n  properties: string[],\n  renderBefore?: Function,\n  renderAfter?: Function,\n  children: React.ReactNode,\n}\n\nconst initialMeasurements = {};\n\nfunction MeasuredItem({\n  properties,\n  renderBefore,\n  renderAfter,\n  children,\n}: IMeasuredItem) {\n  const { settings } = useContext(SettingsContext);\n  const { theme } = settings;\n  const [measurements, setMeasurements] = useState(initialMeasurements);\n  const itemRef = useRef();\n\n  useEffect(\n    () => {\n      const measure = () => {\n        if (!itemRef.current) {\n          return;\n        }\n        const computedStyle = getComputedStyle(itemRef.current);\n        const measurementsItems = properties.reduce((acc: { [x: string]: string; }, property: string) => {\n          acc[property] = computedStyle.getPropertyValue(property);\n          return acc;\n        }, {});\n        setMeasurements(measurementsItems);\n      };\n      // Needs a moment to finish switching theme and re-render children to DOM first.\n      setMeasurements(initialMeasurements);\n      const timeout = setTimeout(measure, 1000);\n      return () => clearTimeout(timeout);\n    },\n    [theme, properties],\n  );\n\n  return (\n    <>\n      {renderBefore ? renderBefore(measurements) : null}\n      {React.cloneElement(children as React.ReactElement, { ref: itemRef })}\n      {renderAfter ? renderAfter(measurements) : null}\n    </>\n  );\n}\n\nMeasuredItem.propTypes = {\n  properties: PropTypes.arrayOf(PropTypes.string),\n  renderBefore: PropTypes.func,\n  renderAfter: PropTypes.func,\n  children: PropTypes.node.isRequired,\n};\n\nMeasuredItem.defaultProps = {\n  properties: [],\n  renderBefore: undefined,\n  renderAfter: undefined,\n};\n\nexport default MeasuredItem;\n","import React from 'react';\n\nconst weightLabels: Record<string, string> = {\n  200: 'Light',\n  300: 'Light',\n  400: 'Regular',\n  500: 'Medium',\n  600: 'Medium',\n  700: 'Bold',\n  800: 'Black',\n};\n\nconst measuredTypeProps = {\n  properties: ['font-size', 'line-height', 'font-family', 'font-weight'],\n  renderAfter: (measurements: { [x: string]: string; }) => {\n    const fontFamily = measurements['font-family']\n      ? measurements['font-family'].split(',')[0]\n      : null;\n    const weight = weightLabels[measurements['font-weight']];\n    // only one significant digit if needed\n    const fontSize = Math.round(Number.parseFloat(measurements['font-size']) * 10) / 10;\n    const lineHeight = Math.round(Number.parseFloat(measurements['line-height']) * 10) / 10;\n\n    return (\n      <p className=\"m-0 text-muted\">\n        <span className=\"mr-2\">\n          {fontFamily} {weight}\n        </span>\n        {fontSize}px / {lineHeight}px\n      </p>\n    );\n  },\n};\n\nexport default measuredTypeProps;\n","import React from 'react';\nimport MeasuredItem from './MeasuredItem';\nimport measuredTypeProps from './typography-page/measuredTypeProps';\n\nexport type CodeCellType = {\n  value: string | number | undefined,\n};\n\nexport type DataTableRowType = {\n  row: {\n    original: {\n      name?: string,\n      size?: string,\n      className?: string,\n      text?: string,\n    }\n  },\n};\n\nexport function ClassNameCell({ value }: CodeCellType) {\n  if (!value) {\n    return null;\n  }\n\n  return (\n    <code className=\"fs-16\">\n      .{value}\n    </code>\n  );\n}\n\nexport function TextCell({ value }: CodeCellType) {\n  return (\n    <p className=\"m-0 fs-16\">\n      {value}\n    </p>\n  );\n}\n\nexport function CodeCell({ value }: CodeCellType) {\n  return (\n    <code className=\"fs-16\">\n      {value}\n    </code>\n  );\n}\n\nexport function DesktopMeasuredCell({ row } : DataTableRowType) {\n  return (\n    <MeasuredItem {...measuredTypeProps}>\n      <p className={`m-0 ${row.original.className}`}>\n        {row.original.text}\n      </p>\n    </MeasuredItem>\n  );\n}\n\nexport function MobileMeasuredCell({ row } : DataTableRowType) {\n  return (\n    <div className=\"mobile-type\">\n      <MeasuredItem {...measuredTypeProps}>\n        <p className={`m-0 ${row.original.className}`}>\n          {row.original.text}\n        </p>\n      </MeasuredItem>\n    </div>\n  );\n}\n\nexport function StyleCell({ row } : DataTableRowType) {\n  return (\n    <p className={`fs-16 ${row.original.className}`}>\n      {row.original.text}\n    </p>\n  );\n}\n","import React, { useContext } from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Container, DataTable } from '~paragon-react';\nimport SEO from '../../components/SEO';\nimport Layout from '../../components/PageLayout';\nimport { SettingsContext } from '../../context/SettingsContext';\nimport { CodeCell } from '../../components/TableCells';\n\nconst utilityClasses = {\n  bg: (color: string, level: number) => (level ? `bg-${color}-${level}` : `bg-${color}`),\n  border: (color: string, level: number) => (level ? `border-${color}-${level}` : `border-${color}`),\n  text: (color: string, level: number) => (level ? `text-${color}-${level}` : `text-${color}`),\n};\n\nexport interface IColors {\n  themeName: string,\n  color: string,\n  unusedLevels: number[],\n}\n\nconst colors: IColors[] = [\n  { themeName: 'gray', color: 'gray', unusedLevels: [] },\n  { themeName: 'primary', color: 'blue', unusedLevels: [] },\n  { themeName: 'brand', color: 'blue', unusedLevels: [] },\n  { themeName: 'light', color: 'light', unusedLevels: [] },\n  { themeName: 'dark', color: 'dark', unusedLevels: [] },\n  { themeName: 'success', color: 'green', unusedLevels: [] },\n  { themeName: 'info', color: 'teal', unusedLevels: [] },\n  { themeName: 'danger', color: 'red', unusedLevels: [] },\n  { themeName: 'warning', color: 'yellow', unusedLevels: [] },\n];\n\nconst levels = [100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nconst selectorColors: Record<string, string | null> = {};\n\nfunction parseColors(cssSelectors: { selector: string; declarations: string; }[]) {\n  const colorsAreParsed = Object.keys(selectorColors).length !== 0;\n  if (colorsAreParsed) { return; }\n\n  cssSelectors.forEach(({ selector, declarations }) => {\n    // All declarations fit this shape: \"background-color: #fff !important;\"\n    const declarationFragments = declarations[0].split(' ');\n    selectorColors[selector] = declarationFragments.length\n      ? declarationFragments[1]\n      : null;\n  });\n}\n\nexport type CSSStyleDeclarationType = CSSStyleDeclaration | null;\n\nexport interface ISwatch {\n  name: string,\n  colorClassName: string,\n  isUnused?: boolean,\n  styles: CSSStyleDeclarationType,\n}\n\nfunction Swatch({\n  name, colorClassName, isUnused, styles,\n}: ISwatch) {\n  const computedValue = styles?.getPropertyValue(name);\n\n  return (\n    <div className=\"d-flex align-items-center mb-2\">\n      <div\n        className={classNames('p-3 mr-2 rounded', colorClassName, {\n          'unused-level': isUnused,\n        })}\n      />\n      <div style={{ lineHeight: 1 }} className=\"small\">\n        <code className=\"mb-0 d-block text-lowercase text-dark-700\">\n          {`var(${name})`}\n        </code>\n\n        <code style={{ fontSize: '65%' }} className=\"text-muted\">\n          {computedValue}\n        </code>\n      </div>\n    </div>\n  );\n}\n\nSwatch.propTypes = {\n  name: PropTypes.string.isRequired,\n  colorClassName: PropTypes.string.isRequired,\n  isUnused: PropTypes.bool,\n};\n\nSwatch.defaultProps = {\n  isUnused: false,\n};\n\nconst renderColorRamp = (themeName: string, unusedLevels: number[], styles: CSSStyleDeclarationType) => (\n  <div\n    key={`${themeName}`}\n  >\n    <p className=\"h5\">{themeName}</p>\n    {levels.map(level => (\n      <Swatch\n        key={`${themeName}-${level}`}\n        name={`--pgn-color-${themeName}-${level}`}\n        colorClassName={utilityClasses.bg(themeName, level)}\n        isUnused={unusedLevels.includes(level)}\n        styles={styles}\n      />\n    ))}\n  </div>\n);\n\nexport interface IColorsPage {\n  data: {\n    allCssUtilityClasses: {\n      nodes: [],\n    },\n  },\n}\n\n// eslint-disable-next-line react/prop-types\nexport default function ColorsPage({ data }: IColorsPage) {\n  const { settings } = useContext(SettingsContext);\n  const styles = typeof window !== 'undefined' ? getComputedStyle(document.body) : null;\n\n  parseColors(data.allCssUtilityClasses.nodes); // eslint-disable-line react/prop-types\n\n  return (\n    <Layout isAutoToc>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title=\"Colors\" />\n      <Container size={settings.containerWidth} className=\"py-5\">\n        <h1>Colors</h1>\n        <div className=\"color-palette mb-3\">\n          {colors\n            .slice(0, 3)\n            .map(({ themeName, unusedLevels }) => renderColorRamp(themeName, unusedLevels, styles))}\n          {colors\n            .slice(3)\n            .map(({ themeName, unusedLevels }) => renderColorRamp(themeName, unusedLevels, styles))}\n          <div>\n            <p className=\"h5\">accents</p>\n\n            <Swatch name=\"--pgn-color-accent-a\" colorClassName=\"bg-accent-a\" styles={styles} />\n            <Swatch name=\"--pgn-color-accent-b\" colorClassName=\"bg-accent-b\" styles={styles} />\n          </div>\n        </div>\n\n        <h3>CSS Color Usage</h3>\n\n        <h4>Variable name</h4>\n        <code className=\"d-block mb-4 lead bg-gray-100 p-3\">\n          {'// var(--pgn-color-name-level) '}\n          <br />\n          var(--pgn-color-primary-100)\n          <br />\n          var(--pgn-color-primary-200)\n          <br />\n          var(--pgn-color-brand-100)\n          <br />\n          var(--pgn-color-brand-200)\n        </code>\n\n        <h4>With default value</h4>\n        <p>\n          Using a default value in CSS variables allows to set a default value for a variable,\n          which will be used if the primary value of the variable is not defined or not available.\n        </p>\n        <code className=\"d-block mb-4 lead bg-gray-100 p-3\">\n          {'// var(--pgn-color-name-level), default variable '}\n          <br />\n          var(--pgn-color-brand-100, var(--pgn-color-primary-200))\n        </code>\n\n        <h3>CSS Class Utilities</h3>\n        <p>\n          Utility classes for backgrounds, borders, and text colors follow the\n          format below:\n        </p>\n        <p>\n          <code>{'.{use}-{color}-{level}'}</code>\n        </p>\n        <div className=\"w-sm-50 mb-4\">\n          <DataTable\n            itemCount={3}\n            data={colors.map(({ themeName }, index) => ({\n              use: Object.keys(utilityClasses)[index],\n              color: themeName,\n              level: levels[index],\n            }))}\n            columns={[\n              { Header: 'Use', accessor: 'use', Cell: CodeCell },\n              { Header: 'Color', accessor: 'color', Cell: CodeCell },\n              { Header: 'Level', accessor: 'level', Cell: CodeCell },\n            ]}\n          >\n            <DataTable.Table />\n          </DataTable>\n        </div>\n\n        <h3>Background Fills</h3>\n        <div className=\"d-flex flex-wrap\">\n          {colors.map(({ themeName }) => (\n            <div key={themeName} style={{ flexBasis: '33%' }}>\n              <div className=\"mr-3 mb-3\">\n                <div\n                  className={classNames(\n                    'p-3 rounded',\n                    utilityClasses.bg(themeName, 100),\n                  )}\n                >\n                  <code style={{ color: 'inherit' }}>\n                    .{utilityClasses.bg(themeName, 100)}\n                  </code>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <h3>Borders & Lines</h3>\n        <div className=\"d-flex flex-wrap\">\n          {colors.map(({ themeName }) => (\n            <div key={themeName} style={{ flexBasis: '33%' }}>\n              <div className=\"mr-3 mb-3\">\n                <div\n                  className={classNames(\n                    'p-3 rounded border',\n                    utilityClasses.border(themeName, 200),\n                  )}\n                >\n                  <code style={{ color: 'inherit' }}>\n                    .{utilityClasses.border(themeName, 200)}\n                  </code>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <h3>Icons & Semantic Lines</h3>\n        <div className=\"d-flex flex-wrap\">\n          {colors.map(({ themeName }) => (\n            <div key={themeName} style={{ flexBasis: '33%' }}>\n              <div className=\"mr-3 mb-3\">\n                <div\n                  className={classNames(\n                    'p-3 rounded border',\n                    utilityClasses.border(themeName, 300),\n                  )}\n                >\n                  <code style={{ color: 'inherit' }}>\n                    .{utilityClasses.border(themeName, 300)}\n                  </code>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <h3>Text</h3>\n        <p>\n          Color levels 500 and above are accessible on white and 100 level\n          backgrounds.\n        </p>\n        <div className=\"d-flex rounded overflow-hidden mb-3\">\n          <p className=\"mb-0 w-100 h4\">Lighter Text</p>\n          <p className=\"mb-0 w-100 h4\">Regular Text</p>\n          <p className=\"mb-0 w-100 h4\">Darker Text</p>\n        </div>\n        <div className=\"d-flex\">\n          {[500, 700, 900].map(level => (\n            <div key={level} style={{ flexBasis: '33%' }}>\n              {colors.map(({ themeName, unusedLevels }) => {\n                if (unusedLevels.includes(level)) { return null; }\n                return (\n                  <code\n                    key={`${themeName}-${level}`}\n                    className={classNames(\n                      'd-block',\n                      utilityClasses.text(themeName, level),\n                    )}\n                  >\n                    .{utilityClasses.text(themeName, level)}\n                  </code>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n\n        <h3>Element Fills</h3>\n        <p>Buttons or other interactive elements.</p>\n        <div>\n          <div className=\"d-flex rounded overflow-hidden mb-3\">\n            <div className=\"w-100\">\n              <p className=\"mb-0 h4\">Default State</p>\n            </div>\n            <div className=\"w-100\">\n              <p className=\"mb-0 h4\">Hover State</p>\n            </div>\n            <div className=\"w-100\">\n              <p className=\"mb-0 h4\">Active State</p>\n            </div>\n          </div>\n          {colors.map(({ themeName }) => {\n            if (themeName === 'warning') { return null; }\n            return (\n              <div key={themeName} className=\"d-flex rounded overflow-hidden mb-3\">\n                <div\n                  className={classNames(\n                    'p-3 w-100',\n                    utilityClasses.bg(themeName, 500),\n                    {\n                      'text-white': themeName !== 'light',\n                    },\n                  )}\n                >\n                  <code style={{ color: 'inherit' }}>\n                    .{utilityClasses.bg(themeName, 500)}\n                  </code>\n                </div>\n                <div\n                  className={classNames(\n                    'p-3 w-100',\n                    utilityClasses.bg(themeName, 700),\n                    {\n                      'text-white': themeName !== 'light',\n                    },\n                  )}\n                >\n                  <code style={{ color: 'inherit' }}>\n                    .{utilityClasses.bg(themeName, 700)}\n                  </code>\n                </div>\n                <div\n                  className={classNames(\n                    'p-3 w-100',\n                    utilityClasses.bg(themeName, 900),\n                    {\n                      'text-white': themeName !== 'light',\n                    },\n                  )}\n                >\n                  <code style={{ color: 'inherit' }}>\n                    .{utilityClasses.bg(themeName, 900)}\n                  </code>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Container>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  {\n    allCssUtilityClasses(\n      filter: { declarations: { regex: \"/color/\" }, isUtility: { eq: true } }\n      sort: { fields: selector, order: ASC }\n    ) {\n      nodes {\n        selector\n        declarations\n      }\n      distinct(field: selector)\n    }\n  }\n`;\n"],"names":["initialMeasurements","MeasuredItem","_ref","properties","renderBefore","renderAfter","children","settings","useContext","SettingsContext","theme","measurements","setMeasurements","useState","itemRef","useRef","useEffect","timeout","setTimeout","measure","current","computedStyle","getComputedStyle","measurementsItems","reduce","acc","property","getPropertyValue","clearTimeout","React","ref","defaultProps","undefined","weightLabels","fontFamily","split","weight","fontSize","Math","round","Number","parseFloat","lineHeight","className","ClassNameCell","value","TextCell","_ref2","CodeCell","_ref3","DesktopMeasuredCell","_ref4","row","measuredTypeProps","original","text","MobileMeasuredCell","_ref5","StyleCell","_ref6","utilityClasses","bg","color","level","border","colors","themeName","unusedLevels","levels","selectorColors","Swatch","name","colorClassName","isUnused","styles","computedValue","classNames","style","renderColorRamp","key","map","includes","ColorsPage","data","window","document","body","cssSelectors","allCssUtilityClasses","nodes","Object","keys","length","forEach","selector","declarations","declarationFragments","Layout","isAutoToc","SEO","title","Container","size","containerWidth","slice","DataTable","itemCount","index","use","columns","Header","accessor","Cell","_ref7","flexBasis","_ref8","_ref9","_ref10","_ref11"],"sourceRoot":""}