{"version":3,"file":"component---src-pages-foundations-responsive-jsx-332ba53f4239fab8cd9e.js","mappings":"qSAUA,MAAMA,EAA0B,CAC9BC,WAAY,CAAEC,KAAM,cAAeC,WAAY,MAC/CC,MAAO,CAAEF,KAAM,QAASC,WAAY,MACpCE,OAAQ,CAAEH,KAAM,SAAUC,WAAY,MACtCG,MAAO,CAAEJ,KAAM,QAASC,WAAY,MACpCI,WAAY,CAAEL,KAAM,cAAeC,WAAY,MAC/CK,gBAAiB,CAAEN,KAAM,oBAAqBC,WAAY,QAGtDM,EAA4BC,GAAeV,EAAwBU,IAAe,CAAC,EAEzF,SAASC,EAAcC,GAAU,IAAT,IAAEC,GAAKD,EAC7B,OAAOE,EAAAA,cAAA,YAAOD,EAAIE,OAAOZ,WAC3B,CACA,SAASa,EAAYC,GAAU,IAAT,IAAEJ,GAAKI,EAC3B,MAA8B,OAA1BJ,EAAIE,OAAOZ,WAEXW,EAAAA,cAAA,OAAKI,UAAU,6BACbJ,EAAAA,cAAA,YAAM,KACNA,EAAAA,cAACK,EAAAA,EAAc,CACbC,UAAU,MACVC,QACEP,EAAAA,cAACQ,EAAAA,EAAO,CAACC,GAAK,WAAUV,EAAIE,OAAOZ,cAAc,4CACIW,EAAAA,cAAA,cAAQ,SAAc,uIAM7EA,EAAAA,cAACU,EAAAA,EAAI,CAACC,IAAKC,EAAAA,aAAcC,KAAK,SAK/Bb,EAAAA,cAAA,YAAOD,EAAIE,OAAOa,SAAY,GAAEf,EAAIE,OAAOa,aAAe,IACnE,CACA,SAASC,EAAYC,GAAU,IAAT,IAAEjB,GAAKiB,EAC3B,OAAOhB,EAAAA,cAAA,YAAOD,EAAIE,OAAOgB,SAAY,GAAElB,EAAIE,OAAOgB,aAAe,IACnE,CAiEA,MAAMC,EAAmB,CACvBnB,IAAK,CAAC,GAORF,EAAesB,aAAeD,EAC9BhB,EAAaiB,aAAeD,EAC5BH,EAAaI,aAAeD,EAE5B,UA3EA,WACE,MAAME,EAAkBC,OAAOC,KAAKC,EAAAA,GAAaC,KAAI5B,IACnD,MAAM,SAAEkB,EAAQ,SAAEG,GAAaM,EAAAA,EAAY3B,GACrC6B,EAAiB9B,EAAyBC,GAGhD,OAFA6B,EAAeX,SAAWA,EAC1BW,EAAeR,SAAWA,EACnBQ,CAAc,IAGvB,OACEzB,EAAAA,cAAC0B,EAAAA,EAAM,KACL1B,EAAAA,cAAC2B,EAAAA,EAAS,CAACd,KAAK,KAAKT,UAAU,QAE7BJ,EAAAA,cAAC4B,EAAAA,EAAG,CAACC,MAAM,eACX7B,EAAAA,cAAA,UAAI,cACJA,EAAAA,cAAA,UAAI,yBACJA,EAAAA,cAAA,SAAG,6IAIHA,EAAAA,cAAC8B,EAAAA,EAAS,CACR1B,UAAU,yBACV2B,KAAMX,EACNY,QAAS,CACP,CAAEC,OAAQ,aAAcC,SAAU,QAClC,CAAED,OAAQ,cAAeC,SAAU,aAAcC,KAAMtC,GACvD,CAAEoC,OAAQ,YAAaC,SAAU,WAAYC,KAAMjC,GACnD,CAAE+B,OAAQ,YAAaC,SAAU,WAAYC,KAAMpB,KAGrDf,EAAAA,cAAC8B,EAAAA,EAAAA,MAAe,OAElB9B,EAAAA,cAAA,MAAII,UAAU,QAAO,eACrBJ,EAAAA,cAAA,SAAG,uDACmDA,EAAAA,cAAA,YAAM,qBAAwB,cAEpFA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,MAAS,gBAE1DA,EAAAA,cAACoC,EAAAA,EAAS,CAAChC,UAAU,iBAClB,uFAEHJ,EAAAA,cAAA,SAAG,yCACqCA,EAAAA,cAAA,YAAM,MAAS,gBAEvDA,EAAAA,cAACoC,EAAAA,EAAS,CAAChC,UAAU,iBAClB,sFAKX,C","sources":["webpack://paragon-pattern-library-documentation/./src/pages/foundations/responsive.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DataTable, Container, breakpoints, OverlayTrigger, Tooltip, Icon,\n} from '~paragon-react';\nimport { QuestionMark } from '~paragon-icons';\nimport SEO from '../../components/SEO';\nimport Layout from '../../components/PageLayout';\nimport CodeBlock from '../../components/CodeBlock';\n\nconst BREAKPOINT_DESCRIPTIONS = {\n  extraSmall: { name: 'Extra small', identifier: 'xs' },\n  small: { name: 'Small', identifier: 'sm' },\n  medium: { name: 'Medium', identifier: 'md' },\n  large: { name: 'Large', identifier: 'lg' },\n  extraLarge: { name: 'Extra large', identifier: 'xl' },\n  extraExtraLarge: { name: 'Extra extra large', identifier: 'xxl' },\n};\n\nconst getBreakpointDescription = (breakpoint) => BREAKPOINT_DESCRIPTIONS[breakpoint] || {};\n\nfunction IdentifierCell({ row }) {\n  return <code>{row.values.identifier}</code>;\n}\nfunction MinWidthCell({ row }) {\n  if (row.values.identifier === 'xs') {\n    return (\n      <div className=\"d-flex align-items-center\">\n        <code>-</code>\n        <OverlayTrigger\n          placement=\"top\"\n          overlay={(\n            <Tooltip id={`tooltip-${row.values.identifier}`}>\n              The min-width for the &quot;XS&quot; breakpoint is <strong>320px</strong>.\n              That pixel width is the smallest that designers support for mobile devices,\n              and also covers 16x magnification for accessibility.\n            </Tooltip>\n          )}\n        >\n          <Icon src={QuestionMark} size=\"xs\" />\n        </OverlayTrigger>\n      </div>\n    );\n  }\n  return <code>{row.values.minWidth ? `${row.values.minWidth}px` : '-'}</code>;\n}\nfunction MaxWidthCell({ row }) {\n  return <code>{row.values.maxWidth ? `${row.values.maxWidth}px` : '-'}</code>;\n}\n\nfunction Responsive() {\n  const breakpointsData = Object.keys(breakpoints).map(breakpoint => {\n    const { minWidth, maxWidth } = breakpoints[breakpoint];\n    const breakpointData = getBreakpointDescription(breakpoint);\n    breakpointData.minWidth = minWidth;\n    breakpointData.maxWidth = maxWidth;\n    return breakpointData;\n  });\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Responsive\" />\n        <h1>Responsive</h1>\n        <h2>Available breakpoints</h2>\n        <p>\n          Define the minimum and maximum dimensions at which your layout will change,\n          adapting to different screen sizes, for use in media queries.\n        </p>\n        <DataTable\n          className=\"pgn-doc__spacing-table\"\n          data={breakpointsData}\n          columns={[\n            { Header: 'Breakpoint', accessor: 'name' },\n            { Header: 'Class infix', accessor: 'identifier', Cell: IdentifierCell },\n            { Header: 'Min width', accessor: 'minWidth', Cell: MinWidthCell },\n            { Header: 'Max Width', accessor: 'maxWidth', Cell: MaxWidthCell },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n        <h2 className=\"mt-3\">Basic usage</h2>\n        <p>\n          To access or change the breakpoints in the scss use <code>$grid-breakpoints</code> variable.\n        </p>\n        <p>\n          Example when the screen is narrower than <code>md</code> breakpoint.\n        </p>\n        <CodeBlock className=\"language-scss\">\n          {'@include media-breakpoint-down(map-get($grid-breakpoints, \\'md\\')) { // styles here }'}\n        </CodeBlock>\n        <p>\n          Example when the screen is wider than <code>lg</code> breakpoint.\n        </p>\n        <CodeBlock className=\"language-scss\">\n          {'@include media-breakpoint-up(map-get($grid-breakpoints, \\'lg\\')) { // styles here }'}\n        </CodeBlock>\n      </Container>\n    </Layout>\n  );\n}\n\nconst cellPropTypes = {\n  row: PropTypes.shape({\n    values: PropTypes.shape({\n      identifier: PropTypes.string,\n      minWidth: PropTypes.number,\n      maxWidth: PropTypes.number,\n    }),\n  }),\n};\n\nconst cellDefaultProps = {\n  row: {},\n};\n\nIdentifierCell.propTypes = cellPropTypes;\nMinWidthCell.propTypes = cellPropTypes;\nMaxWidthCell.propTypes = cellPropTypes;\n\nIdentifierCell.defaultProps = cellDefaultProps;\nMinWidthCell.defaultProps = cellDefaultProps;\nMaxWidthCell.defaultProps = cellDefaultProps;\n\nexport default Responsive;\n"],"names":["BREAKPOINT_DESCRIPTIONS","extraSmall","name","identifier","small","medium","large","extraLarge","extraExtraLarge","getBreakpointDescription","breakpoint","IdentifierCell","_ref","row","React","values","MinWidthCell","_ref2","className","OverlayTrigger","placement","overlay","Tooltip","id","Icon","src","QuestionMark","size","minWidth","MaxWidthCell","_ref3","maxWidth","cellDefaultProps","defaultProps","breakpointsData","Object","keys","breakpoints","map","breakpointData","Layout","Container","SEO","title","DataTable","data","columns","Header","accessor","Cell","CodeBlock"],"sourceRoot":""}