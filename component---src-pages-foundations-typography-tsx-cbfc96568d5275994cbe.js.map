{"version":3,"file":"component---src-pages-foundations-typography-tsx-cbfc96568d5275994cbe.js","mappings":"6LAiBA,MAAMA,EAAsB,CAAC,EAE7B,SAASC,EAAa,GAKH,IALG,WACpBC,EAAU,aACVC,EAAY,YACZC,EAAW,SACXC,GACc,EACd,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,kBAC1B,MAAEC,GAAUH,GACZ,EAACI,EAAa,EAACC,IAAmBC,EAAAA,EAAAA,UAASZ,GAC3Ca,GAAUC,EAAAA,EAAAA,UAuBhB,OArBAC,EAAAA,EAAAA,YACE,KAaEJ,EAAgBX,GAChB,MAAMgB,EAAUC,YAbA,KACd,IAAKJ,EAAQK,QACX,OAEF,MAAMC,EAAgBC,iBAAiBP,EAAQK,SACzCG,EAAoBnB,EAAWoB,QAAO,CAACC,EAA+BC,KAC1ED,EAAIC,GAAYL,EAAcM,iBAAiBD,GACxCD,IACN,CAAC,GACJZ,EAAgBU,EAAkB,GAIA,KACpC,MAAO,IAAMK,aAAaV,EAAQ,GAEpC,CAACP,EAAOP,IAIR,gCACGC,EAAeA,EAAaO,GAAgB,KAC5CiB,EAAAA,aAAmBtB,EAAgC,CAAEuB,IAAKf,IAC1DT,EAAcA,EAAYM,GAAgB,KAGjD,CASAT,EAAa4B,aAAe,CAC1B3B,WAAY,GACZC,kBAAc2B,EACd1B,iBAAa0B,GAGf,K,2MCvEA,MAAMC,EAAuC,CAC3C,IAAK,QACL,IAAK,QACL,IAAK,UACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,SAyBP,MAtB0B,CACxB7B,WAAY,CAAC,YAAa,cAAe,cAAe,eACxDE,YAAcM,IACZ,MAAMsB,EAAatB,EAAa,eAC5BA,EAAa,eAAeuB,MAAM,KAAK,GACvC,KACEC,EAASH,EAAarB,EAAa,gBAEnCyB,EAAWC,KAAKC,MAAqD,GAA/CC,OAAOC,WAAW7B,EAAa,eAAsB,GAC3E8B,EAAaJ,KAAKC,MAAuD,GAAjDC,OAAOC,WAAW7B,EAAa,iBAAwB,GAErF,OACE,qBAAG+B,UAAU,kBACX,wBAAMA,UAAU,QACbT,EAAW,IAAEE,GAEfC,EAAS,QAAMK,EAAW,KACzB,GCVH,SAASE,EAAc,GAA0B,IAA1B,MAAEC,GAAqB,EACnD,OAAKA,EAKH,wBAAMF,UAAU,SAAQ,IACpBE,GALG,IAQX,CAEO,SAASC,EAAS,GAA0B,IAA1B,MAAED,GAAqB,EAC9C,OACE,qBAAGF,UAAU,aACVE,EAGP,CAEO,SAASE,EAAS,GAA0B,IAA1B,MAAEF,GAAqB,EAC9C,OACE,wBAAMF,UAAU,SACbE,EAGP,CAEO,SAASG,EAAoB,GAA6B,IAA7B,IAAEC,GAAwB,EAC5D,OACE,gBAAC9C,EAAA,EAAiB+C,EAChB,qBAAGP,UAAY,OAAMM,EAAIE,SAASR,aAC/BM,EAAIE,SAASC,MAItB,CAEO,SAASC,EAAmB,GAA6B,IAA7B,IAAEJ,GAAwB,EAC3D,OACE,uBAAKN,UAAU,eACb,gBAACxC,EAAA,EAAiB+C,EAChB,qBAAGP,UAAY,OAAMM,EAAIE,SAASR,aAC/BM,EAAIE,SAASC,OAKxB,CAEO,SAASE,EAAU,GAA6B,IAA7B,IAAEL,GAAwB,EAClD,OACE,qBAAGN,UAAY,SAAQM,EAAIE,SAASR,aACjCM,EAAIE,SAASC,KAGpB,C,2ICtEA,MAAMG,EAAkC,CACtC,CAAEZ,UAAW,YAAaS,KAAM,cAChC,CAAET,UAAW,aAAcS,KAAM,eACjC,CAAET,UAAW,cAAeS,KAAM,gBAClC,CACET,UAAW,eACXS,KAAM,0JAGR,CACET,UAAW,YACXS,KAAM,0GAER,CACET,UAAW,cACXS,KAAM,gLAKK,SAASI,IACtB,OACE,gCACE,sBAAIb,UAAU,QAAO,aACrB,uBAAKA,UAAU,QACb,gBAACc,EAAA,EAAS,CACRC,UAAW,EACXC,KAAMJ,EACNK,QAAS,CACP,CACEC,OAAQ,QACRC,KAAMR,EAAAA,IAER,CACEO,OAAQ,YACRE,SAAU,YACVD,KAAMlB,EAAAA,MAIV,gBAACa,EAAA,QAAe,QAK1B,CC7CA,MAAMO,EAA6B,CACjC,CAAErB,UAAW,OAAQS,KAAM,cAC3B,CAAET,UAAW,GAAIS,KAAM,QACvB,CAAET,UAAW,QAASS,KAAM,cAC5B,CAAET,UAAW,UAAWS,KAAM,oBAC9B,CAAET,UAAW,QAASS,KAAM,eAGf,SAASa,IACtB,OACE,gCACE,sBAAItB,UAAU,QAAO,QACrB,uBAAKA,UAAU,QACb,gBAACc,EAAA,EAAS,CACRC,UAAW,EACXC,KAAMK,EACNJ,QAAS,CACP,CACEC,OAAQ,mBACRC,KAAMd,EAAAA,IAER,CACEa,OAAQ,YACRE,SAAU,YACVD,KAAMlB,EAAAA,MAIV,gBAACa,EAAA,QAAe,QAK1B,CCjCA,MAAMS,EAA8C,CAClD,CAAEvB,UAAW,iBAAkBS,KAAM,mBACrC,CAAET,UAAW,iBAAkBS,KAAM,mBACrC,CAAET,UAAW,kBAAmBS,KAAM,oBACtC,CAAET,UAAW,uBAAwBS,KAAM,mBAC3C,CAAET,UAAW,cAAeS,KAAM,gBAClC,CAAET,UAAW,mBAAoBS,KAAM,cACvC,CAAET,UAAW,qBAAsBS,KAAM,kBAG5B,SAASe,IACtB,OACE,gCACE,sBAAIxB,UAAU,QAAO,2BACrB,uBAAKA,UAAU,QACb,gBAACc,EAAA,EAAS,CACRC,UAAW,EACXC,KAAMO,EACNN,QAAS,CACP,CACEC,OAAQ,QACRC,KAAMR,EAAAA,IAER,CACEO,OAAQ,YACRE,SAAU,YACVD,KAAMlB,EAAAA,MAIV,gBAACa,EAAA,QAAe,QAK1B,CClCA,MAAMW,EAAe,CAAC,EAAG,EAAG,EAAG,GAEhB,SAASC,IACtB,OACE,gCACE,sBAAI1B,UAAU,QAAO,WACrB,uBAAKA,UAAU,QACb,gBAACc,EAAA,EAAS,CACRC,UAAW,EACXC,KAAMS,EAAaE,KAAKC,IAAI,CAAQnB,KAAO,WAAUmB,IAAQ5B,UAAY,WAAU4B,QACnFX,QAAS,CACP,CACEC,OAAQ,UACRC,KAAMd,EAAAA,IAER,CACEa,OAAQ,SACRC,KAAMT,EAAAA,IAER,CACEmB,GAAI,YACJX,OAAQ,YACRE,SAAU,YACVD,KAAMlB,EAAAA,MAIV,gBAACa,EAAA,QAAe,QAK1B,CChCA,MAAMgB,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAEtB,SAASC,IACtB,OACE,gCACE,sBAAI/B,UAAU,QAAO,YACrB,uBAAKA,UAAU,QACb,gBAACc,EAAA,EAAS,CACRC,UAAW,EACXC,KAAMc,EAAaH,KAAKC,IAAI,CAAQnB,KAAO,WAAUmB,IAAQ5B,UAAY,IAAG4B,QAC5EX,QAAS,CACP,CACEC,OAAQ,UACRC,KAAMd,EAAAA,IAER,CACEa,OAAQ,SACRC,KAAMT,EAAAA,IAER,CACEQ,OAAQ,YACRE,SAAU,YACVD,KAAMlB,EAAAA,MAIV,gBAACa,EAAA,QAAe,QAK1B,CChCA,MAAMkB,EAA8B,CAClC,CACEC,QAAS,qBAAGC,KAAK,MAAK,mBACtBC,YAAa,4BAAM,yBAAsB,4BAAM,KAAQ,gCAA6B,4BAAM,KAAQ,UAEpG,CACEF,QAAS,4BAAM,MAAG,qBAAGjC,UAAU,cAAckC,KAAK,4BAA2B,eAAe,mBAC5FC,YAAa,4BAAM,sBAAmB,4BAAM,KAAQ,gBAAa,4BAAM,gBAAmB,iBAE5F,CACEF,QAAS,qBAAGjC,UAAU,aAAakC,KAAK,MAAK,0BAC7CC,YAAa,4BAAM,4BAAM,eAAkB,aAAU,4BAAM,KAAQ,UAErE,CACEF,QACE,4BAAM,MACD,qBAAGjC,UAAU,yBAAyBkC,KAAK,4BAA2B,sBAAsB,mBAGnGC,YACE,4BAAM,OACA,4BAAM,eAAkB,mBAAgB,4BAAM,KAAQ,gBAAa,4BAAM,gBAAmB,kBAMzF,SAASC,IACtB,OACE,gCACE,sBAAIpC,UAAU,QAAO,SACrB,uBAAKA,UAAU,QACb,gBAACc,EAAA,EAAS,CACRC,UAAW,EACXC,KAAMgB,EACNf,QAAS,CACP,CAAEC,OAAQ,UAAWE,SAAU,UAAWD,KAAMhB,EAAAA,IAChD,CAAEe,OAAQ,cAAeE,SAAU,cAAeD,KAAMhB,EAAAA,MAG1D,gBAACW,EAAA,QAAe,QAK1B,CCrCe,SAASuB,IACtB,OACE,gBAAC,IAAM,KACL,gBAACC,EAAA,EAAS,CAACV,KAAK,KAAK5B,UAAU,QAE7B,gBAACuC,EAAA,EAAG,CAACC,MAAM,eACX,0BAAI,cACJ,2BACA,gBAACT,EAAa,MACd,gBAACT,EAAS,MACV,gBAACI,EAAY,MACb,gBAACU,EAAU,MACX,gBAACZ,EAA0B,MAC3B,gBAACX,EAAc,OAIvB,C","sources":["webpack://paragon-pattern-library-documentation/./src/components/MeasuredItem.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/measuredTypeProps.tsx","webpack://paragon-pattern-library-documentation/./src/components/TableCells.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Alignment.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Body.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/DecorationAndEmphasis.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Display.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Headings.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Links.tsx","webpack://paragon-pattern-library-documentation/./src/pages/foundations/typography.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SettingsContext } from '../context/SettingsContext';\n\nexport interface IMeasuredItem {\n  properties: string[],\n  renderBefore?: Function,\n  renderAfter?: Function,\n  children: React.ReactNode,\n}\n\nconst initialMeasurements = {};\n\nfunction MeasuredItem({\n  properties,\n  renderBefore,\n  renderAfter,\n  children,\n}: IMeasuredItem) {\n  const { settings } = useContext(SettingsContext);\n  const { theme } = settings;\n  const [measurements, setMeasurements] = useState(initialMeasurements);\n  const itemRef = useRef();\n\n  useEffect(\n    () => {\n      const measure = () => {\n        if (!itemRef.current) {\n          return;\n        }\n        const computedStyle = getComputedStyle(itemRef.current);\n        const measurementsItems = properties.reduce((acc: { [x: string]: string; }, property: string) => {\n          acc[property] = computedStyle.getPropertyValue(property);\n          return acc;\n        }, {});\n        setMeasurements(measurementsItems);\n      };\n      // Needs a moment to finish switching theme and re-render children to DOM first.\n      setMeasurements(initialMeasurements);\n      const timeout = setTimeout(measure, 1000);\n      return () => clearTimeout(timeout);\n    },\n    [theme, properties],\n  );\n\n  return (\n    <>\n      {renderBefore ? renderBefore(measurements) : null}\n      {React.cloneElement(children as React.ReactElement, { ref: itemRef })}\n      {renderAfter ? renderAfter(measurements) : null}\n    </>\n  );\n}\n\nMeasuredItem.propTypes = {\n  properties: PropTypes.arrayOf(PropTypes.string),\n  renderBefore: PropTypes.func,\n  renderAfter: PropTypes.func,\n  children: PropTypes.node.isRequired,\n};\n\nMeasuredItem.defaultProps = {\n  properties: [],\n  renderBefore: undefined,\n  renderAfter: undefined,\n};\n\nexport default MeasuredItem;\n","import React from 'react';\n\nconst weightLabels: Record<string, string> = {\n  200: 'Light',\n  300: 'Light',\n  400: 'Regular',\n  500: 'Medium',\n  600: 'Medium',\n  700: 'Bold',\n  800: 'Black',\n};\n\nconst measuredTypeProps = {\n  properties: ['font-size', 'line-height', 'font-family', 'font-weight'],\n  renderAfter: (measurements: { [x: string]: string; }) => {\n    const fontFamily = measurements['font-family']\n      ? measurements['font-family'].split(',')[0]\n      : null;\n    const weight = weightLabels[measurements['font-weight']];\n    // only one significant digit if needed\n    const fontSize = Math.round(Number.parseFloat(measurements['font-size']) * 10) / 10;\n    const lineHeight = Math.round(Number.parseFloat(measurements['line-height']) * 10) / 10;\n\n    return (\n      <p className=\"m-0 text-muted\">\n        <span className=\"mr-2\">\n          {fontFamily} {weight}\n        </span>\n        {fontSize}px / {lineHeight}px\n      </p>\n    );\n  },\n};\n\nexport default measuredTypeProps;\n","import React from 'react';\nimport MeasuredItem from './MeasuredItem';\nimport measuredTypeProps from './typography-page/measuredTypeProps';\n\nexport type CodeCellType = {\n  value: string | number | undefined,\n};\n\nexport type DataTableRowType = {\n  row: {\n    original: {\n      name?: string,\n      size?: string,\n      className?: string,\n      text?: string,\n    }\n  },\n};\n\nexport function ClassNameCell({ value }: CodeCellType) {\n  if (!value) {\n    return null;\n  }\n\n  return (\n    <code className=\"fs-16\">\n      .{value}\n    </code>\n  );\n}\n\nexport function TextCell({ value }: CodeCellType) {\n  return (\n    <p className=\"m-0 fs-16\">\n      {value}\n    </p>\n  );\n}\n\nexport function CodeCell({ value }: CodeCellType) {\n  return (\n    <code className=\"fs-16\">\n      {value}\n    </code>\n  );\n}\n\nexport function DesktopMeasuredCell({ row } : DataTableRowType) {\n  return (\n    <MeasuredItem {...measuredTypeProps}>\n      <p className={`m-0 ${row.original.className}`}>\n        {row.original.text}\n      </p>\n    </MeasuredItem>\n  );\n}\n\nexport function MobileMeasuredCell({ row } : DataTableRowType) {\n  return (\n    <div className=\"mobile-type\">\n      <MeasuredItem {...measuredTypeProps}>\n        <p className={`m-0 ${row.original.className}`}>\n          {row.original.text}\n        </p>\n      </MeasuredItem>\n    </div>\n  );\n}\n\nexport function StyleCell({ row } : DataTableRowType) {\n  return (\n    <p className={`fs-16 ${row.original.className}`}>\n      {row.original.text}\n    </p>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\nimport { ClassNameCell, StyleCell } from '../TableCells';\n\nconst alignmentClassesAndDescriptions = [\n  { className: 'text-left', text: 'left text.' },\n  { className: 'text-right', text: 'right text.' },\n  { className: 'text-center', text: 'center text.' },\n  {\n    className: 'text-justify',\n    text: 'The text-justify class specifies the justification method of text. '\n        + 'This text-justify class spreads the words into the complete line with equal spaces.',\n  },\n  {\n    className: 'text-wrap',\n    text: 'Use text-wrap to cause text to wrap normally within an element. Newlines and spaces will be collapsed.',\n  },\n  {\n    className: 'text-nowrap',\n    text: 'Use text-nowrap to prevent text from wrapping within an element. Newlines and spaces will be collapsed. '\n        + 'You can prevent line breaks and text wrapping for specific elements',\n  },\n];\n\nexport default function Alignment() {\n  return (\n    <>\n      <h2 className=\"mb-4\">Alignment</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={6}\n          data={alignmentClassesAndDescriptions}\n          columns={[\n            {\n              Header: 'Style',\n              Cell: StyleCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { DataTable } from '~paragon-react';\n\nimport { DesktopMeasuredCell, ClassNameCell } from '../TableCells';\n\nconst bodyClassesAndDescriptions = [\n  { className: 'lead', text: 'Large Body' },\n  { className: '', text: 'Body' },\n  { className: 'small', text: 'Small Body' },\n  { className: 'x-small', text: 'Extra Small Body' },\n  { className: 'micro', text: 'Micro Body' },\n];\n\nexport default function Body() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Body</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={5}\n          data={bodyClassesAndDescriptions}\n          columns={[\n            {\n              Header: 'Desktop & Mobile',\n              Cell: DesktopMeasuredCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\nimport { ClassNameCell, StyleCell } from '../TableCells';\n\nconst decorationAndEmphasisClassesAndDescriptions = [\n  { className: 'text-lowercase', text: 'Lowercase text.' },\n  { className: 'text-uppercase', text: 'uppercase text.' },\n  { className: 'text-capitalize', text: 'capitalize text.' },\n  { className: 'text-decoration-none', text: 'No decorations.' },\n  { className: 'font-italic', text: 'Italic text.' },\n  { className: 'font-weight-bold', text: 'Bold text.' },\n  { className: 'font-weight-normal', text: 'Regular text.' },\n];\n\nexport default function DecorationAndEmphasis() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Decoration and Emphasis</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={7}\n          data={decorationAndEmphasisClassesAndDescriptions}\n          columns={[\n            {\n              Header: 'Style',\n              Cell: StyleCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\n\nimport { ClassNameCell, DesktopMeasuredCell, MobileMeasuredCell } from '../TableCells';\n\nconst displaySizes = [1, 2, 3, 4];\n\nexport default function Display() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Display</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={4}\n          data={displaySizes.map((size) => ({ text: `Display ${size}`, className: `display-${size}` }))}\n          columns={[\n            {\n              Header: 'Desktop',\n              Cell: DesktopMeasuredCell,\n            },\n            {\n              Header: 'Mobile',\n              Cell: MobileMeasuredCell,\n            },\n            {\n              id: 'css-class',\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\n\nimport { MobileMeasuredCell, ClassNameCell, DesktopMeasuredCell } from '../TableCells';\n\nconst headingSizes = [1, 2, 3, 4, 5, 6];\n\nexport default function Headings() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Headings</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={6}\n          data={headingSizes.map((size) => ({ text: `Heading ${size}`, className: `h${size}` }))}\n          columns={[\n            {\n              Header: 'Desktop',\n              Cell: DesktopMeasuredCell,\n            },\n            {\n              Header: 'Mobile',\n              Cell: MobileMeasuredCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\nimport { TextCell } from '../TableCells';\n\nconst linksClassesAndDescriptions = [\n  {\n    example: <a href=\"/#\">Standalone Link</a>,\n    description: <span>The default style for <code>a</code> tags that don`t appear in a <code>p</code> tag.</span>,\n  },\n  {\n    example: <span>An <a className=\"inline-link\" href=\"/foundations/typography/\">inline link</a> in a sentence.</span>,\n    description: <span>For links inside a <code>p</code> or with the <code>.inline-link</code> class name.</span>,\n  },\n  {\n    example: <a className=\"muted-link\" href=\"/#\">Muted, Standalone Link</a>,\n    description: <span><code>.muted-link</code> not in a <code>p</code> tag.</span>,\n  },\n  {\n    example: (\n      <span>\n        An <a className=\"muted-link inline-link\" href=\"/foundations/typography/\">muted, inline link</a> in a sentence.\n      </span>\n    ),\n    description: (\n      <span>\n        For <code>.muted-link</code> links inside a <code>p</code> or with the <code>.inline-link</code> class name.\n      </span>\n    ),\n  },\n];\n\nexport default function Links() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Links</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={4}\n          data={linksClassesAndDescriptions}\n          columns={[\n            { Header: 'Example', accessor: 'example', Cell: TextCell },\n            { Header: 'Description', accessor: 'description', Cell: TextCell },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { Container } from '~paragon-react';\nimport Layout from '../../components/PageLayout';\nimport SEO from '../../components/SEO';\nimport {\n  HeadingsTable,\n  BodyTable,\n  DisplayTable,\n  DecorationAndEmphasisTable,\n  LinksTable,\n  AlignmentTable,\n} from '../../components/typography-page';\n\nexport default function TypographyPage() {\n  return (\n    <Layout>\n      <Container size=\"xl\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Typography\" />\n        <h1>Typography</h1>\n        <hr />\n        <HeadingsTable />\n        <BodyTable />\n        <DisplayTable />\n        <LinksTable />\n        <DecorationAndEmphasisTable />\n        <AlignmentTable />\n      </Container>\n    </Layout>\n  );\n}\n"],"names":["initialMeasurements","MeasuredItem","properties","renderBefore","renderAfter","children","settings","useContext","SettingsContext","theme","measurements","setMeasurements","useState","itemRef","useRef","useEffect","timeout","setTimeout","current","computedStyle","getComputedStyle","measurementsItems","reduce","acc","property","getPropertyValue","clearTimeout","React","ref","defaultProps","undefined","weightLabels","fontFamily","split","weight","fontSize","Math","round","Number","parseFloat","lineHeight","className","ClassNameCell","value","TextCell","CodeCell","DesktopMeasuredCell","row","measuredTypeProps","original","text","MobileMeasuredCell","StyleCell","alignmentClassesAndDescriptions","Alignment","DataTable","itemCount","data","columns","Header","Cell","accessor","bodyClassesAndDescriptions","Body","decorationAndEmphasisClassesAndDescriptions","DecorationAndEmphasis","displaySizes","Display","map","size","id","headingSizes","Headings","linksClassesAndDescriptions","example","href","description","Links","TypographyPage","Container","SEO","title"],"sourceRoot":""}