{"version":3,"file":"component---src-pages-foundations-typography-tsx-e2774d54afbc70249a65.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/MeasuredItem.tsx","webpack://paragon-pattern-library-documentation/./src/pages/foundations/typography.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SettingsContext } from '../context/SettingsContext';\n\nexport interface IMeasuredItem {\n  properties: string[],\n  renderBefore?: Function,\n  renderAfter?: Function,\n  children: React.ReactNode,\n}\n\nconst initialMeasurements = {};\n\nfunction MeasuredItem({\n  properties,\n  renderBefore,\n  renderAfter,\n  children,\n}: IMeasuredItem) {\n  const { settings } = useContext(SettingsContext);\n  const { theme } = settings;\n  const [measurements, setMeasurements] = useState(initialMeasurements);\n  const itemRef = useRef();\n\n  useEffect(\n    () => {\n      const measure = () => {\n        if (!itemRef.current) {\n          return;\n        }\n        const computedStyle = getComputedStyle(itemRef.current);\n        const measurementsItems = properties.reduce((acc: { [x: string]: string; }, property: string) => {\n          acc[property] = computedStyle.getPropertyValue(property);\n          return acc;\n        }, {});\n        setMeasurements(measurementsItems);\n      };\n      // Needs a moment to finish switching theme and re-render children to DOM first.\n      setMeasurements(initialMeasurements);\n      const timeout = setTimeout(measure, 1000);\n      return () => clearTimeout(timeout);\n    },\n    [theme, properties],\n  );\n\n  return (\n    <>\n      {renderBefore ? renderBefore(measurements) : null}\n      {React.cloneElement(children as React.ReactElement, { ref: itemRef })}\n      {renderAfter ? renderAfter(measurements) : null}\n    </>\n  );\n}\n\nMeasuredItem.propTypes = {\n  properties: PropTypes.arrayOf(PropTypes.string),\n  renderBefore: PropTypes.func,\n  renderAfter: PropTypes.func,\n  children: PropTypes.node.isRequired,\n};\n\nMeasuredItem.defaultProps = {\n  properties: [],\n  renderBefore: undefined,\n  renderAfter: undefined,\n};\n\nexport default MeasuredItem;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { Container } from '~paragon-react';\nimport SEO from '../../components/SEO';\nimport MeasuredItem from '../../components/MeasuredItem';\nimport Layout from '../../components/PageLayout';\n\nexport type WeightLabelsTypes = {\n  [key: string]: string,\n};\n\nconst weightLabels: WeightLabelsTypes = {\n  200: 'Light',\n  300: 'Light',\n  400: 'Regular',\n  500: 'Medium',\n  600: 'Medium',\n  700: 'Bold',\n  800: 'Black',\n};\n\nconst measuredTypeProps = {\n  properties: ['font-size', 'line-height', 'font-family', 'font-weight'],\n  renderAfter: (measurements: { [x: string]: string; }) => {\n    const fontFamily = measurements['font-family']\n      ? measurements['font-family'].split(',')[0]\n      : null;\n    const weight = weightLabels[measurements['font-weight']];\n    // only one significant digit if needed\n    const fontSize = Math.round(Number.parseFloat(measurements['font-size']) * 10) / 10;\n    const lineHeight = Math.round(Number.parseFloat(measurements['line-height']) * 10) / 10;\n\n    return (\n      <p className=\"m-0 text-muted\">\n        <span className=\"mr-2\">\n          {fontFamily} {weight}\n        </span>\n        {fontSize}px / {lineHeight}px\n      </p>\n    );\n  },\n};\n\nexport default function TypographyPage() {\n  return (\n    <Layout>\n      <Container size=\"xl\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Typography\" />\n        <h1>Typography</h1>\n        <table className=\"w-100 table pgn-doc__status-table\">\n          <tbody>\n            <tr>\n              <th colSpan={3}>\n                <h2 className=\"mt-3\">Headings</h2>\n              </th>\n            </tr>\n            <tr>\n              <th>Desktop</th>\n              <th>Mobile</th>\n              <th>CSS Class</th>\n            </tr>\n            {[1, 2, 3, 4, 5, 6].map(headingSize => (\n              <tr>\n                <td>\n                  <MeasuredItem {...measuredTypeProps}>\n                    <p className={`m-0 h${headingSize}`}>\n                      Heading {headingSize}\n                    </p>\n                  </MeasuredItem>\n                </td>\n                <td className=\"mobile-type\">\n                  <MeasuredItem {...measuredTypeProps}>\n                    <p className={`m-0 h${headingSize}`}>\n                      Heading {headingSize}\n                    </p>\n                  </MeasuredItem>\n                </td>\n                <td>\n                  <code>.h{headingSize}</code>\n                </td>\n              </tr>\n            ))}\n            <tr>\n              <td colSpan={2}>\n                <MeasuredItem {...measuredTypeProps}>\n                  <p className=\"heading-label\">Heading Label</p>\n                </MeasuredItem>\n                A heading label is usually paired with and proceeds a Heading.\n              </td>\n              <td>\n                <code>.heading-label</code>\n              </td>\n            </tr>\n          </tbody>\n          <tbody>\n            <tr>\n              <th colSpan={3}>\n                <h2 className=\"mt-3\">Body</h2>\n              </th>\n            </tr>\n            <tr>\n              <th colSpan={2}>Desktop & Mobile</th>\n              <th>CSS Class</th>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <MeasuredItem {...measuredTypeProps}>\n                  <p className=\"lead m-0\">Large Body</p>\n                </MeasuredItem>\n              </td>\n              <td>\n                <code>.lead</code>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={3}>\n                <MeasuredItem {...measuredTypeProps}>\n                  <p className=\"m-0\">Body</p>\n                </MeasuredItem>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <MeasuredItem {...measuredTypeProps}>\n                  <p className=\"small m-0\">Small Body</p>\n                </MeasuredItem>\n              </td>\n              <td>\n                <code>.small</code>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <MeasuredItem {...measuredTypeProps}>\n                  <p className=\"x-small m-0\">Extra Small Body</p>\n                </MeasuredItem>\n              </td>\n              <td>\n                <code>.x-small</code>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <MeasuredItem {...measuredTypeProps}>\n                  <p className=\"micro m-0\">Micro Body</p>\n                </MeasuredItem>\n              </td>\n              <td>\n                <code>.micro</code>\n              </td>\n            </tr>\n          </tbody>\n          <tbody>\n            <tr>\n              <th colSpan={3}>\n                <h2 className=\"mt-3\">Display</h2>\n              </th>\n            </tr>\n            <tr>\n              <th>Desktop</th>\n              <th>Mobile</th>\n              <th>CSS Class</th>\n            </tr>\n            {[1, 2, 3, 4].map(displaySize => (\n              <tr>\n                <td>\n                  <MeasuredItem {...measuredTypeProps}>\n                    <p className={`m-0 display-${displaySize}`}>\n                      Display {displaySize}\n                    </p>\n                  </MeasuredItem>\n                </td>\n                <td className=\"mobile-type\">\n                  <MeasuredItem {...measuredTypeProps}>\n                    <p className={`m-0 display-${displaySize}`}>\n                      Display {displaySize}\n                    </p>\n                  </MeasuredItem>\n                </td>\n                <td>\n                  <code>.display-{displaySize}</code>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n          <tbody>\n            <tr>\n              <th colSpan={3}>\n                <h2 className=\"mt-3\">Links</h2>\n              </th>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <a href=\"#\">Standalone Link</a>\n              </td>\n              <td>\n                <small>\n                  The default style for <code>a</code> tags that don&apos;t appear in\n                  a <code>p</code> tag.\n                </small>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <p>\n                  An{' '}\n                  <a className=\"inline-link\" href=\"#\">\n                    inline link\n                  </a>{' '}\n                  in a sentence.\n                </p>\n              </td>\n              <td>\n                <small>\n                  For links inside a <code>p</code> or with the{' '}\n                  <code>.inline-link</code> class name.\n                </small>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <a className=\"muted-link\" href=\"#\">\n                  Muted, Standalone Link\n                </a>\n              </td>\n              <td>\n                <small>\n                  <code>.muted-link</code> not in a <code>p</code> tag.\n                </small>\n              </td>\n            </tr>\n            <tr>\n              <td colSpan={2}>\n                <p>\n                  An{' '}\n                  <a className=\"muted-link inline-link\" href=\"#\">\n                    muted, inline link\n                  </a>{' '}\n                  in a sentence.\n                </p>\n              </td>\n              <td>\n                <small>\n                  For <code>.muted-link</code> links inside a <code>p</code> or\n                  with the <code>.inline-link</code> class name.\n                </small>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <table className=\"w-100 table pgn-doc__status-table\">\n          <tbody>\n            <tr>\n              <th colSpan={2}>\n                <h2>Decoration and Emphasis</h2>\n              </th>\n            </tr>\n            <tr>\n              <th>Style</th>\n              <th>CSS Class</th>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-lowercase\">Lowercase text.</p>\n              </td>\n              <td>\n                <code>.text-lowercase</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-uppercase\">uppercase text.</p>\n              </td>\n              <td>\n                <code>.text-uppercase</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-capitalize\">capitalize text.</p>\n              </td>\n              <td>\n                <code>.text-capitalize</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-decoration-none\">No decorations.</p>\n              </td>\n              <td>\n                <code>.text-decoration-none</code>\n              </td>\n            </tr>\n\n            <tr>\n              <td>\n                <p className=\"text-italic\">Italic text.</p>\n              </td>\n              <td>\n                <code>.text-italic</code>\n              </td>\n            </tr>\n\n            <tr>\n              <td>\n                <p className=\"font-weight-bold\">Bold text.</p>\n              </td>\n              <td>\n                <code>.font-weight-bold</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"font-weight-normal\">Regular text.</p>\n              </td>\n              <td>\n                <code>.font-weight-normal</code>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <table className=\"w-100 table pgn-doc__status-table\">\n          <tbody>\n            <tr>\n              <th colSpan={2}>\n                <h2>Alignment</h2>\n              </th>\n            </tr>\n            <tr>\n              <th>Style</th>\n              <th>CSS Class</th>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-left\">left text.</p>\n              </td>\n              <td>\n                <code>.text-left</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-right\">right text.</p>\n              </td>\n              <td>\n                <code>.text-right</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-center\">center text.</p>\n              </td>\n              <td>\n                <code>.text-center</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-justify\">justify text.</p>\n                <p\n                  className=\"text-justify text-muted small\"\n                  style={{ maxWidth: '20rem' }}\n                >\n                  At the edge of forever tendrils of gossamer clouds corpus\n                  callosum culture Vangelis dispassionate extraterrestrial\n                  observer.\n                </p>\n              </td>\n              <td>\n                <code>.text-justify</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-wrap\">wrap text.</p>\n              </td>\n              <td>\n                <code>.text-wrap</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p className=\"text-nowrap\">nowrap text.</p>\n              </td>\n              <td>\n                <code>.text-nowrap</code>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Container>\n    </Layout>\n  );\n}\n"],"names":["initialMeasurements","MeasuredItem","properties","renderBefore","renderAfter","children","settings","useContext","SettingsContext","theme","measurements","setMeasurements","useState","itemRef","useRef","useEffect","timeout","setTimeout","current","computedStyle","getComputedStyle","measurementsItems","reduce","acc","property","getPropertyValue","clearTimeout","React","ref","defaultProps","undefined","weightLabels","measuredTypeProps","fontFamily","split","weight","fontSize","Math","round","Number","parseFloat","lineHeight","className","TypographyPage","size","title","colSpan","map","headingSize","displaySize","href","style","maxWidth"],"sourceRoot":""}