{"version":3,"file":"component---src-pages-insights-tsx-6e8c377c4e5bc623a3a5.js","mappings":"8WAwEA,MA5DA,SAA6BA,GAAkC,IAAjC,IAAEC,GAA4BD,EAW1D,MACME,EADkBD,EAAIE,SAASC,OACUC,KAAIC,IAAA,IACjDC,KAAMC,EACNJ,OAAQK,EAAa,cACrBC,GACiBJ,EAAA,OACjBK,EAAAA,cAAA,OAAKC,UAAU,wCAAwCC,IAAKL,GAC1DG,EAAAA,cAAA,MAAIC,UAAU,oBAAoBJ,GAClCG,EAAAA,cAAA,MAAIC,UAAU,iBACXH,EAAcJ,KAAIS,IAAA,IAAC,SAClBC,EAAQ,KACRC,GACeF,EAAA,OACfH,EAAAA,cAAA,MAAIE,IAAM,GAAEE,MAAaC,KACtBN,EACCC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACM,EAAAA,GAAS,CACRC,YAAc,GAAER,KAAiBK,MAAaC,IAC9CG,OAAO,UAENJ,EAASK,MAAM,KAAKC,OAAO,IAE7B,IAAI,SAAOL,EAAK,KAGnBL,EAAAA,cAAAA,EAAAA,SAAA,KAAGI,EAASK,MAAM,KAAKC,OAAO,GAAG,UAAQL,EAAK,KAE7C,KAGL,IAGR,OAAOL,EAAAA,cAAA,WAAMT,EACf,ECkBA,MAxDA,SAA6BF,GAAkC,IAAjC,IAAEC,GAA4BD,EAC1D,MAAM,cAAEU,EAAa,OAAEN,GAAWH,EAAIE,SAEhCmB,EAAmEC,OAAOC,KAAKpB,GAClFqB,OAAOC,QAAO,CAACC,EAA+Bd,KAE7Cc,EAAId,GAAOT,EAAOS,GACXc,IACN,CAAC,GAEN,OACEhB,EAAAA,cAAAA,EAAAA,SAAA,KACkC,IAA/BY,OAAOC,KAAKpB,GAAQwB,QACnBjB,EAAAA,cAAA,SAAG,2FAEJY,OAAOM,QAAQP,GAAwBjB,KAAIC,IAAA,IAAEwB,EAAeC,GAAYzB,EAAA,OACvEK,EAAAA,cAAA,OAAKC,UAAU,6BAA6BC,IAAKiB,GAC/CnB,EAAAA,cAAA,MAAIC,UAAU,oBAAoBkB,GAClCnB,EAAAA,cAAA,MAAIC,UAAU,iBACXmB,EAAY1B,KAAK2B,GAChBrB,EAAAA,cAAA,MAAIE,IAAM,GAAEmB,EAAMjB,aAAaiB,EAAMhB,QAClCN,EACCC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACM,EAAAA,GAAS,CACRC,YAAc,GAAER,KAAiBsB,EAAMjB,aAAaiB,EAAMhB,OAC1DG,OAAO,UAENa,EAAMjB,UAER,IAAI,SAAOiB,EAAMhB,KAAK,KAGzBL,EAAAA,cAAAA,EAAAA,SAAA,KAAGqB,EAAMjB,SAAS,UAAQiB,EAAMhB,KAAK,SAKzC,IAId,ECAA,MAzCA,SAA+BhB,GAAoC,IAAnC,IAAEC,GAA8BD,EAC9D,MAAM,cAAEU,EAAa,OAAEN,GAAWH,EAAIE,SAEtC,OACEQ,EAAAA,cAAA,OAAKC,UAAU,qCACbD,EAAAA,cAAA,MAAIC,UAAU,iBACXR,EAAOC,KAAI2B,GACVrB,EAAAA,cAAA,MAAIE,IAAM,GAAEmB,EAAMjB,aAAaiB,EAAMhB,QAClCN,EACCC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACM,EAAAA,GAAS,CACRC,YAAc,GAAER,KAAiBsB,EAAMjB,aAAaiB,EAAMhB,OAC1DG,OAAO,UAENa,EAAMjB,UAER,IAAI,SAAOiB,EAAMhB,KAAK,KAGzBL,EAAAA,cAAAA,EAAAA,SAAA,KAAGqB,EAAMjB,SAAS,UAAQiB,EAAMhB,KAAK,SAOnD,EC5BA,MAjB6BiB,IAC3B,IAAIvB,EACJ,GAA0B,iBAAfuB,EACTvB,EAAgBuB,MACX,IAAIA,UAAAA,EAAYC,IAIrB,OAHAxB,EAAgBuB,EAAWC,GAI7B,CACA,MAAMC,EAAQzB,EAAcU,MAAM,KAC5BgB,EAAoBD,EAAME,WAAWC,GAA0B,eAATA,IAC5DH,EAAMI,OAAO,EAAGH,GAEhB,MAAQ,WADoBD,EAAMK,KAAK,KAAKC,QAAQ,OAAQ,iBACT,E,ik6mBCUrD,MAAMC,EAAY,OACZC,EAAkB,IAGtBC,aAAcC,EACdpC,cAAeqC,GACbC,EAuDEC,EAAuC,GAEvCC,EAAyDH,EAC5DpB,QAAO,CAACwB,EAAkBC,KACzBH,EAAkBI,KAAIC,EAAAA,EAAC,CAAC,EACnBF,GAAO,IACVzC,cAAe4C,EAAoBH,EAAQlB,YAC3CsB,MAAOhC,OAAOiC,OAAiBL,EAAQ/C,QAAQsB,QAAO,CAAC+B,EAAKzB,IAAUyB,EAAMzB,EAAMJ,QAAQ,MAG5FL,OAAOC,KAAK2B,EAAQ/C,QAAQsD,SAAQ5B,IAC7BoB,EAAYpB,KACfoB,EAAYpB,GAAiB,IAE/BoB,EAAYpB,GAAiBoB,EAAYpB,GAAe6B,OAAO,CAC7DpD,KAAM4C,EAAQ5C,KACdqD,WAAYT,EAAQS,WACpBC,QAASV,EAAQU,QACjBnD,cAAe4C,EAAoBH,EAAQlB,YAC3C6B,oBAAqBX,EAAQ/C,OAAO0B,GAAeF,OACnDxB,OAAQ+C,EAAQ/C,OAAO0B,IACvB,IAEGoB,IACN,CAAC,GAEAa,EAAoBxC,OAAOC,KAAKyB,GAEhCe,EAASC,GAAcC,KAAKF,MAAU,GAAJC,GAAU,GAE5CE,EAAmBC,GAAkB,0BAAyBA,cAEpE,SAASC,IACP,MAAM,aAAEC,EAAe,CAAC,EAAC,cAAEC,EAAgBA,MAAM,KAAUC,EAAAA,EAAAA,YAAWC,EAAAA,SAChEC,GAAWC,EAAAA,EAAAA,eAAc,CAAEC,SAAUC,EAAAA,EAAAA,MAAAA,WAErCC,EAAYvD,OAAOC,KAAK8C,GAC3B5C,QAAO,CAACwB,EAAoDpB,KAC3D,MAAMiD,EAAOT,EAAaxC,IAAmByC,EAAczC,IAAkBY,EAI7E,OAHIqB,EAAkBiB,SAASlD,KAC7BoB,EAAY6B,IAAS7B,EAAY6B,IAAS,GAAK,GAE1C7B,CAAW,GACjB,CAAC,GAEA+B,EAA8B1D,OAAOC,KAAK8C,GAC7CjE,KAAKQ,GAAQyD,EAAazD,KAC1BqE,QAAO,CAACC,EAAGC,EAAGC,IAAMA,EAAEC,QAAQH,KAAOC,IACrC/E,KAAI0E,IAAQ,CAAGxE,KAAMwE,EAAMQ,OAAQT,EAAUC,GAAOS,MAAOT,MAExDU,EAAyB,CAAElF,KAAMmC,EAAW6C,YAAQG,EAAWF,MAAO9C,GAEtEiD,EAAyBpE,OAAOM,QAA+BoB,GAAiB5C,KACpFL,IAA6B,IAA3B8B,EAAe1B,GAAOJ,EACtB,MAAM4F,EAAuBxF,EAC1BsB,QAAO,CAACwB,EAAaC,IAAYD,EAAcC,EAAQW,qBAAqB,GAC/E,IAAIiB,EAAOT,EAAaxC,GAKxB,OAJKiD,GAAQR,EAAczC,KACzBiD,EAAOrC,EACP+C,EAAUF,QAAUE,EAAUF,QAAU,GAAK,GAExC,CACLhF,KAAMuB,EACNyB,MAAOqC,EACPxF,OAAQ6C,EAAgBnB,GACxBiD,OACD,IAGLE,EAAa7B,KAAKqC,GAClBX,EAAUpC,GAAa+C,EAAUF,OAEjC,MAAMM,EAAmBF,EAAuBlE,MAAK,CAAC4D,EAAGS,IACzCT,EAAE9E,KAAKwF,cACPD,EAAEvF,KAAKwF,eACG,EAAI,IAGxBC,EAAkChD,EACrCtB,QAAO,CAACwB,EAAaC,IAAYD,EAAcC,EAAQI,OAAO,GAAKP,EAAkBpB,OAExF,OACEjB,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,SAAG,+BAC2BA,EAAAA,cAAA,cAASqC,EAAkBpB,OAAO,aAAoB,wBAC/EjB,EAAAA,cAAA,cAASqD,EAAMgC,GAAiC,YAAiB,kBAGxErF,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAACsF,EAAAA,EAAS,CACRC,aAAW,EACXC,cAAY,EACZC,YAAU,EACVC,qBAAsB3B,EACtB4B,cAAY,EACZC,oBAAqB,CAAEC,OAAQC,EAAAA,GAC/BC,UAAWb,EAAiBjE,OAC5B+E,KAAMd,EACNe,sBAAuBtG,IAAA,IAAC,IAAEL,GAA4BK,EAAA,OAAKK,EAAAA,cAACkG,EAAoB,CAAC5G,IAAKA,GAAO,EAC7F6G,aAAc,CAAEC,SAAUpE,GAC1BqE,QAAS,CACP,CACEC,GAAI,WACJC,OAAQjB,EAAAA,EAAAA,UACRkB,KAAMlB,EAAAA,EAAAA,WAER,CACEiB,OAAQ,iBACRE,SAAU,QAEZ,CACEF,OAAQ,iBACRE,SAAU,QACVC,gBAAgB,GAElB,CACEH,OAAQ,OACRE,SAAU,OACVZ,OAAQc,EAAAA,EACRpC,OAAQ,gBACRqC,cAAetC,KAInBtE,EAAAA,cAACsF,EAAAA,EAAAA,gBAAyB,MAC1BtF,EAAAA,cAACsF,EAAAA,EAAAA,MAAe,MAChBtF,EAAAA,cAACsF,EAAAA,EAAAA,WAAoB,CAACuB,QAAQ,yBAC9B7G,EAAAA,cAACsF,EAAAA,EAAAA,YAAqB,OAI9B,CAGA,SAASwB,IACP,OACE9G,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,MAAIC,UAAU,QAAO,0CACrBD,EAAAA,cAACsF,EAAAA,EAAS,CACRE,cAAY,EACZC,YAAU,EACVM,UAAW1D,EAAkBpB,OAC7B+E,KAAM3D,EACN4D,sBAAuB9F,IAAA,IAAC,IAAEb,GAA4Ba,EAAA,OAAKH,EAAAA,cAAC+G,EAAoB,CAACzH,IAAKA,GAAO,EAC7F+G,QAAS,CACP,CACEC,GAAI,WACJC,OAAQjB,EAAAA,EAAAA,UACRkB,KAAMlB,EAAAA,EAAAA,WAER,CACEiB,OAAQ,eACRE,SAAU,cAEZ,CAAEF,OAAQ,kBAAmBE,SAAU,WACvC,CAAEF,OAAQ,eAAgBE,SAAU,WAGtCzG,EAAAA,cAACsF,EAAAA,EAAAA,gBAAyB,MAC1BtF,EAAAA,cAACsF,EAAAA,EAAAA,MAAe,MAChBtF,EAAAA,cAACsF,EAAAA,EAAAA,WAAoB,CAACuB,QAAQ,gBAC9B7G,EAAAA,cAACsF,EAAAA,EAAAA,YAAqB,OAI9B,CAGA,SAAS0B,EAAcC,GAAsD,IAArD,KAAErH,EAAI,yBAAEsH,GAA2CD,EACzE,OACEjH,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAA,MAAIC,UAAU,QAAQL,GACtBI,EAAAA,cAACsF,EAAAA,EAAS,CACRE,cAAY,EACZC,YAAU,EACVM,UAAWmB,EAAyBjG,OACpC+E,KAAMkB,EACNjB,sBAAuBkB,IAAA,IAAC,IAAE7H,GAA8B6H,EAAA,OAAKnH,EAAAA,cAACoH,EAAsB,CAAC9H,IAAKA,GAAO,EACjG+G,QAAS,CACP,CACEC,GAAI,WACJC,OAAQjB,EAAAA,EAAAA,UACRkB,KAAMlB,EAAAA,EAAAA,WAER,CACEiB,OAAQ,eACRE,SAAU,cAEZ,CAAEF,OAAQ,kBAAmBE,SAAU,WACvC,CAAEF,OAAQ,iBAAkBE,SAAU,yBAGxCzG,EAAAA,cAACsF,EAAAA,EAAAA,MAAe,MAChBtF,EAAAA,cAACsF,EAAAA,EAAAA,WAAoB,CAACuB,QAAQ,eAItC,CAGA,SAASQ,EAAeC,GAA+B,IAA9B,KAAEtB,GAA0BsB,EACnD,OACEtH,EAAAA,cAAA,OAAKC,UAAU,aACZ+F,EAAK/E,OAAS+E,EAAKlF,OAAOpB,KAAIE,GAC7BI,EAAAA,cAACgH,EAAc,CACb9G,IAAKN,EACLA,KAAMA,EACNsH,yBAA0B5E,EAAgB1C,OAEzC4D,EAAgB,cAG3B,CAGA,SAAS+D,EAAUC,GAA+B,IAA9B,KAAExB,GAA0BwB,EAC9C,OACExH,EAAAA,cAAA,OAAKC,UAAU,aACZ+F,EAAK/E,OAAS+E,EAAKlF,OAAOpB,KAAIE,GAC7BI,EAAAA,cAACgH,EAAc,CACb9G,IAAKN,EACLA,KAAMA,EACNsH,yBAA0B5E,EAAgB1C,OAEzC4D,EAAgB,SAG3B,CAGA,SAASiE,EAAUC,GAA+B,IAA9B,KAAE1B,GAA0B0B,EAC9C,OACE1H,EAAAA,cAAA,OAAKC,UAAU,aACZ+F,EAAK/E,OAAS+E,EAAKlF,OAAOpB,KAAIE,GAC7BI,EAAAA,cAACgH,EAAc,CACb9G,IAAKN,EACLA,KAAMA,EACNsH,yBAA0B5E,EAAgB1C,OAEzC4D,EAAgB,SAG3B,CAGA,SAASmE,EAAUC,GAA+B,IAA9B,KAAE5B,GAA0B4B,EAC9C,OACE5H,EAAAA,cAAA,OAAKC,UAAU,aACZ+F,EAAK/E,OAAS+E,EAAKlF,OAAOpB,KAAIE,GAC7BI,EAAAA,cAACgH,EAAc,CACb9G,IAAKN,EACLA,KAAMA,EACNsH,yBAA0B5E,EAAgB1C,OAEzC4D,EAAgB,SAG3B,CAEe,SAASqE,EAAYC,GAA6D,IAA1DC,aAAa,IAAEC,IAAyCF,EAC7F,MAAM,aAAEnE,EAAe,CAAC,EAAC,cAAEC,EAAgBA,MAAM,KAAUC,EAAAA,EAAAA,YAAWC,EAAAA,UAChE,WACJmE,EAAU,MAAEC,EAAK,MAAEC,EAAK,MAAEC,GACxBxH,OAAOC,KAAKyB,GAAiBvB,QAAqB,CAAC+B,EAAKzB,KAC9B,cAAxBsC,EAAatC,GACfyB,EAAImF,WAAWxF,KAAKpB,GACa,SAAxBsC,EAAatC,GACtByB,EAAIoF,MAAMzF,KAAKpB,GACN,CAAC,OAAQ,WAAY,UAAUgD,SAASV,EAAatC,IAC9DyB,EAAIqF,MAAM1F,KAAKpB,GACNuC,EAAcvC,IACvByB,EAAIsF,MAAM3F,KAAKpB,GAEVyB,IACN,CACDmF,WAAY,GAAIC,MAAO,GAAIC,MAAO,GAAIC,MAAO,KAU/C,OACEpI,EAAAA,cAACqI,EAAAA,EAAM,KACLrI,EAAAA,cAACsI,EAAAA,EAAS,CAACC,KAAK,KAAKtI,UAAU,QAE7BD,EAAAA,cAACwI,EAAAA,EAAG,CAACC,MAAM,mBACXzI,EAAAA,cAAA,UAAQC,UAAU,QAChBD,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,SAAG,iBAAe,IAAI0I,KAAKxG,GAAqByG,uBAElD3I,EAAAA,cAAC4I,EAAAA,GAAI,CACHC,UAAWb,EACX1B,GAAG,2BACHwC,SAnBgBjE,IAClBA,IAAUmD,IACZe,EAAAA,EAAOC,UAAUC,MAAO,sCAAqCpE,EAAMqE,cAAcC,mBACjFC,EAAAA,EAAAA,UAASC,EAAAA,eAAAA,MAAoBC,GAAQA,EAAKtB,MAAQnD,IAAQ0E,MAC5D,GAiBMvJ,EAAAA,cAACwJ,EAAAA,EAAG,CAACC,SAAUC,EAAAA,cAAAA,QAAuBjB,MAAM,WACzCT,IAAQ0B,EAAAA,cAAAA,SACP1J,EAAAA,cAAC0D,EAAY,OAGjB1D,EAAAA,cAACwJ,EAAAA,EAAG,CAACC,SAAUC,EAAAA,cAAAA,SAAwBjB,MAAM,YAC1CT,IAAQ0B,EAAAA,cAAAA,UACP1J,EAAAA,cAAC8G,EAAa,OAGlB9G,EAAAA,cAACwJ,EAAAA,EAAG,CAACC,SAAUC,EAAAA,cAAAA,WAA0BjB,MAAM,cAC5CT,IAAQ0B,EAAAA,cAAAA,YACP1J,EAAAA,cAACqH,EAAe,CAACrB,KAAMiC,KAG3BjI,EAAAA,cAACwJ,EAAAA,EAAG,CAACC,SAAUC,EAAAA,cAAAA,MAAqBjB,MAAM,SACvCT,IAAQ0B,EAAAA,cAAAA,OACP1J,EAAAA,cAACuH,EAAU,CAACvB,KAAMkC,KAGtBlI,EAAAA,cAACwJ,EAAAA,EAAG,CAACC,SAAUC,EAAAA,cAAAA,MAAqBjB,MAAM,SACvCT,IAAQ0B,EAAAA,cAAAA,OACP1J,EAAAA,cAACyH,EAAU,CAACzB,KAAMmC,KAGtBnI,EAAAA,cAACwJ,EAAAA,EAAG,CAACC,SAAUC,EAAAA,cAAAA,MAAqBjB,MAAM,SACvCT,IAAQ0B,EAAAA,cAAAA,OACP1J,EAAAA,cAAC2H,EAAU,CAAC3B,KAAMoC,OAOhC,C","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/utils/getGithubProjectUrl.ts","webpack://paragon-pattern-library-documentation/./src/pages/insights.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\nexport interface ISummaryUsageExamples {\n  row: {\n    original: {\n      usages: [],\n    },\n  }\n}\n\nfunction SummaryUsageExamples({ row }: ISummaryUsageExamples) {\n  interface IProjectUsages {\n    filePath: string,\n    line: number,\n  }\n\n  interface IComponentUsages {\n    name: string,\n    usages: [IProjectUsages],\n    repositoryUrl: string,\n  }\n  const componentUsages = row.original.usages;\n  const componentUsagesExample = componentUsages.map(({\n    name: projectName,\n    usages: projectUsages,\n    repositoryUrl,\n  }: IComponentUsages) => (\n    <div className=\"pgn-doc__summary-usages__project mb-4\" key={projectName}>\n      <h5 className=\"font-weight-bold\">{projectName}</h5>\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }: IProjectUsages) => (\n          <li key={`${filePath}L#${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath.split('/').slice(-1)}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath.split('/').slice(-1)} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ));\n\n  return <div>{componentUsagesExample}</div>;\n}\n\nSummaryUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SummaryUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\ntype IProjectUsages = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IProjectUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: { [key: string]: Array<IProjectUsages> },\n    },\n  },\n}\n\nfunction ProjectUsageExamples({ row }: IProjectUsageExamples) {\n  const { repositoryUrl, usages } = row.original;\n\n  const orderedComponentUsages: { [key: string]: Array<IProjectUsages> } = Object.keys(usages)\n    .sort().reduce((obj: { [index: string]: any }, key) => {\n    // eslint-disable-next-line no-param-reassign\n      obj[key] = usages[key];\n      return obj;\n    }, {});\n\n  return (\n    <>\n      {Object.keys(usages).length === 0 && (\n        <p>This project does not import any Paragon components, but may still use its SCSS styles.</p>\n      )}\n      {Object.entries(orderedComponentUsages).map(([componentName, usagesArray]) => (\n        <div className=\"pgn-doc__usages-modal mb-4\" key={componentName}>\n          <h5 className=\"font-weight-bold\">{componentName}</h5>\n          <ul className=\"list-unstyled\">\n            {usagesArray.map((usage) => (\n              <li key={`${usage.filePath}L#${usage.line}`}>\n                {repositoryUrl ? (\n                  <>\n                    <Hyperlink\n                      destination={`${repositoryUrl}/${usage.filePath}#L${usage.line}`}\n                      target=\"_blank\"\n                    >\n                      {usage.filePath}\n                    </Hyperlink>\n                    {' '}(line {usage.line})\n                  </>\n                ) : (\n                  <>{usage.filePath} (line {usage.line})</>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </>\n  );\n}\n\nProjectUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\ntype ProjectUsagesTypes = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IComponentUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: Array<ProjectUsagesTypes>,\n    },\n  },\n}\n\nfunction ComponentUsageExamples({ row }: IComponentUsageExamples) {\n  const { repositoryUrl, usages } = row.original;\n\n  return (\n    <div className=\"pgn-doc__component-usage__project\">\n      <ul className=\"list-unstyled\">\n        {usages.map(usage => (\n          <li key={`${usage.filePath}#L${usage.line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${usage.filePath}#L${usage.line}`}\n                  target=\"_blank\"\n                >\n                  {usage.filePath}\n                </Hyperlink>\n                {' '}(line {usage.line})\n              </>\n            ) : (\n              <>{usage.filePath} (line {usage.line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nComponentUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ComponentUsageExamples;\n","const getGithubProjectUrl = (repository?: string | { type: string, url: string }): string | undefined => {\n  let repositoryUrl;\n  if (typeof repository === 'string') {\n    repositoryUrl = repository;\n  } else if (repository?.url) {\n    repositoryUrl = repository.url;\n  } else {\n    // unsupported repository field\n    return undefined;\n  }\n  const parts = repositoryUrl.split('/');\n  const githubDomainIndex = parts.findIndex((part: string) => part === 'github.com');\n  parts.splice(0, githubDomainIndex);\n  const parsedRepositoryUrl = parts.join('/').replace('.git', '');\n  return `https://${parsedRepositoryUrl}/blob/master`;\n};\n\nexport default getGithubProjectUrl;\n","import React, { useContext } from 'react';\nimport { navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport {\n  DataTable,\n  Tabs,\n  Tab,\n  Container,\n  TextFilter,\n  CheckboxFilter,\n  useMediaQuery,\n  breakpoints,\n} from '~paragon-react';\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport SummaryUsageExamples, { ISummaryUsageExamples } from '../components/insights/SummaryUsageExamples';\nimport ProjectUsageExamples, { IProjectUsageExamples } from '../components/insights/ProjectUsageExamples';\nimport ComponentUsageExamples, { IComponentUsageExamples } from '../components/insights/ComponentUsageExamples';\nimport getGithubProjectUrl from '../utils/getGithubProjectUrl';\n// @ts-ignore\nimport dependentProjectsAnalysis from '../../../dependent-usage.json'; // eslint-disable-line\nimport { INSIGHTS_TABS, INSIGHTS_PAGES } from '../config';\nimport InsightsContext from '../context/InsightsContext';\n\nconst ICON_TYPE = 'Icon';\nconst TABLE_PAGE_SIZE = 10;\n\nconst {\n  lastModified: analysisLastUpdated,\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\ninterface IUsage {\n  filePath: string,\n  line: number,\n  column: number,\n  version: string,\n}\n\ninterface IDependentUsage {\n  version?: string,\n  name?: string,\n  repository?: { type: string, url: string },\n  repositoryUrl?: string,\n  count: number,\n  folderName?: string,\n  usages: {\n    [key: string]: IUsage[],\n  },\n}\n\ninterface IComponentUsageData {\n  componentUsageCount: number,\n  folderName: string,\n  name: string,\n  repositoryUrl: string,\n  usages: IUsage[],\n  version: string,\n}\n\ninterface IInsightsContext {\n  paragonTypes: {\n    [key: string]: string\n  },\n  isParagonIcon: Function,\n}\n\ninterface IFilterData {\n  name: string,\n  number: number | undefined,\n  value: string\n}\n\ninterface TabsDataType {\n  components: string[],\n  hooks: string[],\n  utils: string[],\n  icons: string[],\n}\n\nexport interface IComponentUsage {\n  name: string,\n  componentUsageInProjects: IComponentUsageData[],\n}\n\nconst dependentProjects: IDependentUsage[] = [];\n\nconst componentsUsage: Record<string, IComponentUsageData[]> = dependentProjectsUsages\n  .reduce((accumulator: any, project: any) => {\n    dependentProjects.push({\n      ...project,\n      repositoryUrl: getGithubProjectUrl(project.repository),\n      count: Object.values<IUsage[]>(project.usages).reduce((acc, usage) => acc + usage.length, 0),\n    });\n\n    Object.keys(project.usages).forEach(componentName => {\n      if (!accumulator[componentName]) {\n        accumulator[componentName] = [];\n      }\n      accumulator[componentName] = accumulator[componentName].concat({\n        name: project.name,\n        folderName: project.folderName,\n        version: project.version,\n        repositoryUrl: getGithubProjectUrl(project.repository),\n        componentUsageCount: project.usages[componentName].length,\n        usages: project.usages[componentName],\n      });\n    });\n    return accumulator;\n  }, {});\n\nconst componentsInUsage = Object.keys(componentsUsage);\n\nconst round = (n: number) => Math.round(n * 10) / 10;\n\nconst getEmptyMessage = (text: string) => `Currently there are no ${text} usage yet`;\n\nfunction SummaryUsage() {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const isMedium = useMediaQuery({ minWidth: breakpoints.large.minWidth });\n\n  const typeCount = Object.keys(paragonTypes)\n    .reduce((accumulator: { [key: string]: number | undefined }, componentName) => {\n      const type = paragonTypes[componentName] || (isParagonIcon(componentName) && ICON_TYPE);\n      if (componentsInUsage.includes(componentName)) {\n        accumulator[type] = (accumulator[type] || 0) + 1;\n      }\n      return accumulator;\n    }, {});\n\n  const filterValues: IFilterData[] = Object.keys(paragonTypes)\n    .map((key) => paragonTypes[key])\n    .filter((v, i, a) => a.indexOf(v) === i)\n    .map(type => ({ name: type, number: typeCount[type], value: type }));\n  // Number of Icons is calculated in the statement below. Initialized as `undefined` to not display '0'.\n  const iconsType: IFilterData = { name: ICON_TYPE, number: undefined, value: ICON_TYPE };\n\n  const summaryComponentsUsage = Object.entries<IComponentUsageData[]>(componentsUsage).map(\n    ([componentName, usages]) => {\n      const componentUsageCounts = usages\n        .reduce((accumulator, project) => accumulator + project.componentUsageCount, 0);\n      let type = paragonTypes[componentName];\n      if (!type && isParagonIcon(componentName)) {\n        type = ICON_TYPE;\n        iconsType.number = (iconsType.number || 0) + 1;\n      }\n      return {\n        name: componentName,\n        count: componentUsageCounts,\n        usages: componentsUsage[componentName],\n        type,\n      };\n    },\n  );\n  filterValues.push(iconsType);\n  typeCount[ICON_TYPE] = iconsType.number;\n\n  const summaryTableData = summaryComponentsUsage.sort((a, b) => {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    return nameA < nameB ? -1 : 1;\n  });\n\n  const averageComponentsUsedPerProject = dependentProjects\n    .reduce((accumulator, project) => accumulator + project.count, 0) / dependentProjects.length;\n\n  return (\n    <div className=\"pt-5 mb-5\">\n      <div className=\"mb-5\">\n        <h2>Overview</h2>\n        <p>\n          Paragon is used by at least <strong>{dependentProjects.length} projects</strong>, with an average\n          of <strong>{round(averageComponentsUsedPerProject)} imports</strong> per project.\n        </p>\n      </div>\n      <h3>Overall usage</h3>\n      <DataTable\n        isPaginated\n        isExpandable\n        isSortable\n        showFiltersInSidebar={isMedium}\n        isFilterable\n        defaultColumnValues={{ Filter: TextFilter }}\n        itemCount={summaryTableData.length}\n        data={summaryTableData}\n        renderRowSubComponent={({ row }: ISummaryUsageExamples) => <SummaryUsageExamples row={row} />}\n        initialState={{ pageSize: TABLE_PAGE_SIZE }}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Component Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Instance Count',\n            accessor: 'count',\n            disableFilters: true,\n          },\n          {\n            Header: 'Type',\n            accessor: 'type',\n            Filter: CheckboxFilter,\n            filter: 'includesValue',\n            filterChoices: filterValues,\n          },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No summary available\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\n// Paragon version in all projects\nfunction ProjectsUsage() {\n  return (\n    <div className=\"pt-5 mb-5\">\n      <h3 className=\"mb-4\">Projects in Open edX consuming Paragon</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={dependentProjects.length}\n        data={dependentProjects}\n        renderRowSubComponent={({ row }: IProjectUsageExamples) => <ProjectUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Import Count', accessor: 'count' },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No projects\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\n// Usage info about a single component\nfunction ComponentUsage({ name, componentUsageInProjects }: IComponentUsage) {\n  return (\n    <div className=\"mb-5\">\n      <h3 className=\"mb-4\">{name}</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={componentUsageInProjects.length} // eslint-disable-line\n        data={componentUsageInProjects}\n        renderRowSubComponent={({ row }: IComponentUsageExamples) => <ComponentUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Instance Count', accessor: 'componentUsageCount' },\n        ]}\n      >\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No usages\" />\n      </DataTable>\n    </div>\n  );\n}\n\n// Usage info for all components\nfunction ComponentsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('components')}\n    </div>\n  );\n}\n\n// Usage info for all hooks\nfunction HooksUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('hooks')}\n    </div>\n  );\n}\n\n// Usage info for all utils\nfunction UtilsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\n// Usage info for all utils\nfunction IconsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\nexport default function InsightsPage({ pageContext: { tab } }: { pageContext: { tab: string } }) {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const {\n    components, hooks, utils, icons,\n  } = Object.keys(componentsUsage).reduce<TabsDataType>((acc, usage) => {\n    if (paragonTypes[usage] === 'Component') {\n      acc.components.push(usage);\n    } else if (paragonTypes[usage] === 'Hook') {\n      acc.hooks.push(usage);\n    } else if (['Text', 'Function', 'Object'].includes(paragonTypes[usage])) {\n      acc.utils.push(usage);\n    } else if (isParagonIcon(usage)) {\n      acc.icons.push(usage);\n    }\n    return acc;\n  }, {\n    components: [], hooks: [], utils: [], icons: [],\n  });\n\n  const handleOnSelect = (value: string) => {\n    if (value !== tab) {\n      global.analytics.track(`openedx.paragon.docs.insights.tabs.${value.toLowerCase().trim()}.clicked`);\n      navigate(INSIGHTS_PAGES.find(item => item.tab === value)!.path);\n    }\n  };\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Usage Insights\" />\n        <header className=\"mb-5\">\n          <h1>Usage Insights</h1>\n          <p>Last updated: {new Date(analysisLastUpdated).toLocaleDateString()}</p>\n        </header>\n        <Tabs\n          activeKey={tab}\n          id=\"uncontrolled-tab-example\"\n          onSelect={handleOnSelect}\n        >\n          <Tab eventKey={INSIGHTS_TABS.SUMMARY} title=\"Summary\">\n            {tab === INSIGHTS_TABS.SUMMARY && (\n              <SummaryUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.PROJECTS} title=\"Projects\">\n            {tab === INSIGHTS_TABS.PROJECTS && (\n              <ProjectsUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.COMPONENTS} title=\"Components\">\n            {tab === INSIGHTS_TABS.COMPONENTS && (\n              <ComponentsUsage data={components} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.HOOKS} title=\"Hooks\">\n            {tab === INSIGHTS_TABS.HOOKS && (\n              <HooksUsage data={hooks} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.UTILS} title=\"Utils\">\n            {tab === INSIGHTS_TABS.UTILS && (\n              <UtilsUsage data={utils} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.ICONS} title=\"Icons\">\n            {tab === INSIGHTS_TABS.ICONS && (\n              <IconsUsage data={icons} />\n            )}\n          </Tab>\n        </Tabs>\n      </Container>\n    </Layout>\n  );\n}\n\nInsightsPage.propTypes = {\n  pageContext: PropTypes.shape({\n    tab: PropTypes.oneOf(Object.values(INSIGHTS_TABS)),\n  }).isRequired,\n};\n\nComponentUsage.propTypes = {\n  name: PropTypes.string.isRequired,\n  componentUsageInProjects: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    folderName: PropTypes.string,\n    version: PropTypes.string,\n    repositoryUrl: PropTypes.string,\n    componentUsageCount: PropTypes.number,\n    usages: PropTypes.arrayOf(PropTypes.shape({\n      column: PropTypes.number,\n      filePath: PropTypes.string,\n      line: PropTypes.number,\n      version: PropTypes.string,\n    })),\n  })).isRequired,\n};\n\nconst usagePropTypes = {\n  data: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nComponentsUsage.propTypes = usagePropTypes;\nHooksUsage.propTypes = usagePropTypes;\nUtilsUsage.propTypes = usagePropTypes;\nIconsUsage.propTypes = usagePropTypes;\n"],"names":["_ref","row","componentUsagesExample","original","usages","map","_ref2","name","projectName","projectUsages","repositoryUrl","React","className","key","_ref3","filePath","line","Hyperlink","destination","target","split","slice","orderedComponentUsages","Object","keys","sort","reduce","obj","length","entries","componentName","usagesArray","usage","repository","url","parts","githubDomainIndex","findIndex","part","splice","join","replace","ICON_TYPE","TABLE_PAGE_SIZE","lastModified","analysisLastUpdated","dependentProjectsUsages","dependentProjectsAnalysis","dependentProjects","componentsUsage","accumulator","project","push","_objectSpread","getGithubProjectUrl","count","values","acc","forEach","concat","folderName","version","componentUsageCount","componentsInUsage","round","n","Math","getEmptyMessage","text","SummaryUsage","paragonTypes","isParagonIcon","useContext","InsightsContext","isMedium","useMediaQuery","minWidth","breakpoints","typeCount","type","includes","filterValues","filter","v","i","a","indexOf","number","value","iconsType","undefined","summaryComponentsUsage","componentUsageCounts","summaryTableData","b","toUpperCase","averageComponentsUsedPerProject","DataTable","isPaginated","isExpandable","isSortable","showFiltersInSidebar","isFilterable","defaultColumnValues","Filter","TextFilter","itemCount","data","renderRowSubComponent","SummaryUsageExamples","initialState","pageSize","columns","id","Header","Cell","accessor","disableFilters","CheckboxFilter","filterChoices","content","ProjectsUsage","ProjectUsageExamples","ComponentUsage","_ref4","componentUsageInProjects","_ref5","ComponentUsageExamples","ComponentsUsage","_ref6","HooksUsage","_ref7","UtilsUsage","_ref8","IconsUsage","_ref9","InsightsPage","_ref10","pageContext","tab","components","hooks","utils","icons","Layout","Container","size","SEO","title","Date","toLocaleDateString","Tabs","activeKey","onSelect","global","analytics","track","toLowerCase","trim","navigate","INSIGHTS_PAGES","item","path","Tab","eventKey","INSIGHTS_TABS"],"sourceRoot":""}