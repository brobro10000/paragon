{"version":3,"file":"component---src-pages-insights-tsx-82a38bfda6b182f3e286.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/utils/getGithubProjectUrl.ts","webpack://paragon-pattern-library-documentation/./src/pages/insights.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\nexport interface ISummaryUsageExamples {\n  row: {\n    original: {\n      usages: [],\n    },\n  }\n}\n\nfunction SummaryUsageExamples({ row }: ISummaryUsageExamples) {\n  interface IProjectUsages {\n    filePath: string,\n    line: number,\n  }\n\n  interface IComponentUsages {\n    name: string,\n    usages: [IProjectUsages],\n    repositoryUrl: string,\n  }\n  const componentUsages = row.original.usages;\n  const componentUsagesExample = componentUsages.map(({\n    name: projectName,\n    usages: projectUsages,\n    repositoryUrl,\n  }: IComponentUsages) => (\n    <div className=\"pgn-doc__summary-usages__project mb-4\" key={projectName}>\n      <h5 className=\"font-weight-bold\">{projectName}</h5>\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }: IProjectUsages) => (\n          <li key={`${filePath}L#${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ));\n\n  return <div>{componentUsagesExample}</div>;\n}\n\nSummaryUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SummaryUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\ntype IProjectUsages = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IProjectUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: { [key: string]: Array<IProjectUsages> },\n    },\n  },\n}\n\nfunction ProjectUsageExamples({ row }: IProjectUsageExamples) {\n  const { repositoryUrl, usages } = row.original;\n\n  const orderedComponentUsages: { [key: string]: Array<IProjectUsages> } = Object.keys(usages)\n    .sort().reduce((obj: { [index: string]: any }, key) => {\n    // eslint-disable-next-line no-param-reassign\n      obj[key] = usages[key];\n      return obj;\n    }, {});\n\n  return (\n    <>\n      {Object.keys(usages).length === 0 && (\n        <p>This project does not import any Paragon components, but may still use its SCSS styles.</p>\n      )}\n      {Object.entries(orderedComponentUsages).map(([componentName, usagesArray]) => (\n        <div className=\"pgn-doc__usages-modal mb-4\" key={componentName}>\n          <h5 className=\"font-weight-bold\">{componentName}</h5>\n          <ul className=\"list-unstyled\">\n            {usagesArray.map((usage) => (\n              <li key={`${usage.filePath}L#${usage.line}`}>\n                {repositoryUrl ? (\n                  <>\n                    <Hyperlink\n                      destination={`${repositoryUrl}/${usage.filePath}#L${usage.line}`}\n                      target=\"_blank\"\n                    >\n                      {usage.filePath}\n                    </Hyperlink>\n                    {' '}(line {usage.line})\n                  </>\n                ) : (\n                  <>{usage.filePath} (line {usage.line})</>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </>\n  );\n}\n\nProjectUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\ntype ProjectUsagesTypes = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IComponentUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: Array<ProjectUsagesTypes>,\n    },\n  },\n}\n\nfunction ComponentUsageExamples({ row }: IComponentUsageExamples) {\n  const { repositoryUrl, usages } = row.original;\n\n  return (\n    <div className=\"pgn-doc__component-usage__project\">\n      <ul className=\"list-unstyled\">\n        {usages.map(usage => (\n          <li key={`${usage.filePath}#L${usage.line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${usage.filePath}#L${usage.line}`}\n                  target=\"_blank\"\n                >\n                  {usage.filePath}\n                </Hyperlink>\n                {' '}(line {usage.line})\n              </>\n            ) : (\n              <>{usage.filePath} (line {usage.line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nComponentUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ComponentUsageExamples;\n","const getGithubProjectUrl = (repository?: string | { type: string, url: string }): string | undefined => {\n  let repositoryUrl;\n  if (typeof repository === 'string') {\n    repositoryUrl = repository;\n  } else if (repository?.url) {\n    repositoryUrl = repository.url;\n  } else {\n    // unsupported repository field\n    return undefined;\n  }\n  const parts = repositoryUrl.split('/');\n  const githubDomainIndex = parts.findIndex((part: string) => part === 'github.com');\n  parts.splice(0, githubDomainIndex);\n  const parsedRepositoryUrl = parts.join('/').replace('.git', '');\n  return `https://${parsedRepositoryUrl}/blob/master`;\n};\n\nexport default getGithubProjectUrl;\n","import React, { useContext } from 'react';\nimport { navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport {\n  DataTable,\n  Tabs,\n  Tab,\n  Container,\n  TextFilter,\n  CheckboxFilter,\n  useMediaQuery,\n  breakpoints,\n} from '~paragon-react';\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport SummaryUsageExamples, { ISummaryUsageExamples } from '../components/insights/SummaryUsageExamples';\nimport ProjectUsageExamples, { IProjectUsageExamples } from '../components/insights/ProjectUsageExamples';\nimport ComponentUsageExamples, { IComponentUsageExamples } from '../components/insights/ComponentUsageExamples';\nimport getGithubProjectUrl from '../utils/getGithubProjectUrl';\n// @ts-ignore\nimport dependentProjectsAnalysis from '../../../dependent-usage.json'; // eslint-disable-line\nimport { INSIGHTS_TABS, INSIGHTS_PAGES } from '../config';\nimport InsightsContext from '../context/InsightsContext';\n\nconst ICON_TYPE = 'Icon';\nconst TABLE_PAGE_SIZE = 10;\n\nconst {\n  lastModified: analysisLastUpdated,\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\ninterface IUsage {\n  filePath: string,\n  line: number,\n  column: number,\n  version: string,\n}\n\ninterface IDependentUsage {\n  version?: string,\n  name?: string,\n  repository?: { type: string, url: string },\n  repositoryUrl?: string,\n  count: number,\n  folderName?: string,\n  usages: {\n    [key: string]: IUsage[],\n  },\n}\n\ninterface IComponentUsageData {\n  componentUsageCount: number,\n  folderName: string,\n  name: string,\n  repositoryUrl: string,\n  usages: IUsage[],\n  version: string,\n}\n\ninterface IInsightsContext {\n  paragonTypes: {\n    [key: string]: string\n  },\n  isParagonIcon: Function,\n}\n\ninterface IFilterData {\n  name: string,\n  number: number | undefined,\n  value: string\n}\n\ninterface TabsDataType {\n  components: string[],\n  hooks: string[],\n  utils: string[],\n  icons: string[],\n}\n\nexport interface IComponentUsage {\n  name: string,\n  componentUsageInProjects: IComponentUsageData[],\n}\n\nconst dependentProjects: IDependentUsage[] = [];\n\nconst componentsUsage: Record<string, IComponentUsageData[]> = dependentProjectsUsages\n  .reduce((accumulator: any, project: any) => {\n    dependentProjects.push({\n      ...project,\n      repositoryUrl: getGithubProjectUrl(project.repository),\n      count: Object.values<IUsage[]>(project.usages).reduce((acc, usage) => acc + usage.length, 0),\n    });\n\n    Object.keys(project.usages).forEach(componentName => {\n      if (!accumulator[componentName]) {\n        accumulator[componentName] = [];\n      }\n      accumulator[componentName] = accumulator[componentName].concat({\n        name: project.name,\n        folderName: project.folderName,\n        version: project.version,\n        repositoryUrl: getGithubProjectUrl(project.repository),\n        componentUsageCount: project.usages[componentName].length,\n        usages: project.usages[componentName],\n      });\n    });\n    return accumulator;\n  }, {});\n\nconst componentsInUsage = Object.keys(componentsUsage);\n\nconst round = (n: number) => Math.round(n * 10) / 10;\n\nconst getEmptyMessage = (text: string) => `Currently there are no ${text} usage yet`;\n\nfunction SummaryUsage() {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const isMedium = useMediaQuery({ minWidth: breakpoints.large.minWidth });\n\n  const typeCount = Object.keys(paragonTypes)\n    .reduce((accumulator: { [key: string]: number | undefined }, componentName) => {\n      const type = paragonTypes[componentName] || (isParagonIcon(componentName) && ICON_TYPE);\n      if (componentsInUsage.includes(componentName)) {\n        accumulator[type] = (accumulator[type] || 0) + 1;\n      }\n      return accumulator;\n    }, {});\n\n  const filterValues: IFilterData[] = Object.keys(paragonTypes)\n    .map((key) => paragonTypes[key])\n    .filter((v, i, a) => a.indexOf(v) === i)\n    .map(type => ({ name: type, number: typeCount[type], value: type }));\n  // Number of Icons is calculated in the statement below. Initialized as `undefined` to not display '0'.\n  const iconsType: IFilterData = { name: ICON_TYPE, number: undefined, value: ICON_TYPE };\n\n  const summaryComponentsUsage = Object.entries<IComponentUsageData[]>(componentsUsage).map(\n    ([componentName, usages]) => {\n      const componentUsageCounts = usages\n        .reduce((accumulator, project) => accumulator + project.componentUsageCount, 0);\n      let type = paragonTypes[componentName];\n      if (!type && isParagonIcon(componentName)) {\n        type = ICON_TYPE;\n        iconsType.number = (iconsType.number || 0) + 1;\n      }\n      return {\n        name: componentName,\n        count: componentUsageCounts,\n        usages: componentsUsage[componentName],\n        type,\n      };\n    },\n  );\n  filterValues.push(iconsType);\n  typeCount[ICON_TYPE] = iconsType.number;\n\n  const summaryTableData = summaryComponentsUsage.sort((a, b) => {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    return nameA < nameB ? -1 : 1;\n  });\n\n  const averageComponentsUsedPerProject = dependentProjects\n    .reduce((accumulator, project) => accumulator + project.count, 0) / dependentProjects.length;\n\n  return (\n    <div className=\"pt-5 mb-5\">\n      <div className=\"mb-5\">\n        <h2>Overview</h2>\n        <p>\n          Paragon is used by at least <strong>{dependentProjects.length} projects</strong>, with an average\n          of <strong>{round(averageComponentsUsedPerProject)} imports</strong> per project.\n        </p>\n      </div>\n      <h3>Overall usage</h3>\n      <DataTable\n        isPaginated\n        isExpandable\n        isSortable\n        showFiltersInSidebar={isMedium}\n        isFilterable\n        defaultColumnValues={{ Filter: TextFilter }}\n        itemCount={summaryTableData.length}\n        data={summaryTableData}\n        renderRowSubComponent={({ row }: ISummaryUsageExamples) => <SummaryUsageExamples row={row} />}\n        initialState={{ pageSize: TABLE_PAGE_SIZE }}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Component Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Instance Count',\n            accessor: 'count',\n            disableFilters: true,\n          },\n          {\n            Header: 'Type',\n            accessor: 'type',\n            Filter: CheckboxFilter,\n            filter: 'includesValue',\n            filterChoices: filterValues,\n          },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No summary available\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\n// Paragon version in all projects\nfunction ProjectsUsage() {\n  return (\n    <div className=\"pt-5 mb-5\">\n      <h3 className=\"mb-4\">Projects in Open edX consuming Paragon</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={dependentProjects.length}\n        data={dependentProjects}\n        renderRowSubComponent={({ row }: IProjectUsageExamples) => <ProjectUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Import Count', accessor: 'count' },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No projects\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\n// Usage info about a single component\nfunction ComponentUsage({ name, componentUsageInProjects }: IComponentUsage) {\n  return (\n    <div className=\"mb-5\">\n      <h3 className=\"mb-4\">{name}</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={componentUsageInProjects.length} // eslint-disable-line\n        data={componentUsageInProjects}\n        renderRowSubComponent={({ row }: IComponentUsageExamples) => <ComponentUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Instance Count', accessor: 'componentUsageCount' },\n        ]}\n      >\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No usages\" />\n      </DataTable>\n    </div>\n  );\n}\n\n// Usage info for all components\nfunction ComponentsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('components')}\n    </div>\n  );\n}\n\n// Usage info for all hooks\nfunction HooksUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('hooks')}\n    </div>\n  );\n}\n\n// Usage info for all utils\nfunction UtilsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\n// Usage info for all utils\nfunction IconsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\nexport default function InsightsPage({ pageContext: { tab } }: { pageContext: { tab: string } }) {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const {\n    components, hooks, utils, icons,\n  } = Object.keys(componentsUsage).reduce<TabsDataType>((acc, usage) => {\n    if (paragonTypes[usage] === 'Component') {\n      acc.components.push(usage);\n    } else if (paragonTypes[usage] === 'Hook') {\n      acc.hooks.push(usage);\n    } else if (['Text', 'Function', 'Object'].includes(paragonTypes[usage])) {\n      acc.utils.push(usage);\n    } else if (isParagonIcon(usage)) {\n      acc.icons.push(usage);\n    }\n    return acc;\n  }, {\n    components: [], hooks: [], utils: [], icons: [],\n  });\n\n  const handleOnSelect = (value: string) => {\n    if (value !== tab) {\n      global.analytics.track(`openedx.paragon.docs.insights.tabs.${value.toLowerCase().trim()}.clicked`);\n      navigate(INSIGHTS_PAGES.find(item => item.tab === value)!.path);\n    }\n  };\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Usage Insights\" />\n        <header className=\"mb-5\">\n          <h1>Usage Insights</h1>\n          <p>Last updated: {new Date(analysisLastUpdated).toLocaleDateString()}</p>\n        </header>\n        <Tabs\n          activeKey={tab}\n          id=\"uncontrolled-tab-example\"\n          onSelect={handleOnSelect}\n        >\n          <Tab eventKey={INSIGHTS_TABS.SUMMARY} title=\"Summary\">\n            {tab === INSIGHTS_TABS.SUMMARY && (\n              <SummaryUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.PROJECTS} title=\"Projects\">\n            {tab === INSIGHTS_TABS.PROJECTS && (\n              <ProjectsUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.COMPONENTS} title=\"Components\">\n            {tab === INSIGHTS_TABS.COMPONENTS && (\n              <ComponentsUsage data={components} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.HOOKS} title=\"Hooks\">\n            {tab === INSIGHTS_TABS.HOOKS && (\n              <HooksUsage data={hooks} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.UTILS} title=\"Utils\">\n            {tab === INSIGHTS_TABS.UTILS && (\n              <UtilsUsage data={utils} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.ICONS} title=\"Icons\">\n            {tab === INSIGHTS_TABS.ICONS && (\n              <IconsUsage data={icons} />\n            )}\n          </Tab>\n        </Tabs>\n      </Container>\n    </Layout>\n  );\n}\n\nInsightsPage.propTypes = {\n  pageContext: PropTypes.shape({\n    tab: PropTypes.oneOf(Object.values(INSIGHTS_TABS)),\n  }).isRequired,\n};\n\nComponentUsage.propTypes = {\n  name: PropTypes.string.isRequired,\n  componentUsageInProjects: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    folderName: PropTypes.string,\n    version: PropTypes.string,\n    repositoryUrl: PropTypes.string,\n    componentUsageCount: PropTypes.number,\n    usages: PropTypes.arrayOf(PropTypes.shape({\n      column: PropTypes.number,\n      filePath: PropTypes.string,\n      line: PropTypes.number,\n      version: PropTypes.string,\n    })),\n  })).isRequired,\n};\n\nconst usagePropTypes = {\n  data: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nComponentsUsage.propTypes = usagePropTypes;\nHooksUsage.propTypes = usagePropTypes;\nUtilsUsage.propTypes = usagePropTypes;\nIconsUsage.propTypes = usagePropTypes;\n"],"names":["row","componentUsagesExample","original","usages","map","name","projectName","projectUsages","repositoryUrl","className","key","filePath","line","Hyperlink","destination","target","orderedComponentUsages","Object","keys","sort","reduce","obj","length","entries","componentName","usagesArray","usage","repository","url","parts","split","githubDomainIndex","findIndex","part","splice","join","replace","ICON_TYPE","lastModified","analysisLastUpdated","dependentProjectsUsages","dependentProjectsAnalysis","dependentProjects","componentsUsage","accumulator","project","push","getGithubProjectUrl","count","values","acc","forEach","concat","folderName","version","componentUsageCount","componentsInUsage","getEmptyMessage","text","SummaryUsage","paragonTypes","isParagonIcon","useContext","InsightsContext","isMedium","useMediaQuery","minWidth","breakpoints","typeCount","type","includes","filterValues","filter","v","i","a","indexOf","number","value","iconsType","undefined","summaryComponentsUsage","componentUsageCounts","summaryTableData","b","toUpperCase","averageComponentsUsedPerProject","n","Math","round","DataTable","isPaginated","isExpandable","isSortable","showFiltersInSidebar","isFilterable","defaultColumnValues","Filter","TextFilter","itemCount","data","renderRowSubComponent","initialState","pageSize","columns","id","Header","Cell","accessor","disableFilters","CheckboxFilter","filterChoices","content","ProjectsUsage","ComponentUsage","componentUsageInProjects","ComponentsUsage","HooksUsage","UtilsUsage","IconsUsage","InsightsPage","pageContext","tab","components","hooks","utils","icons","Container","size","SEO","title","Date","toLocaleDateString","Tabs","activeKey","onSelect","global","analytics","track","toLowerCase","trim","navigate","INSIGHTS_PAGES","item","path","Tab","eventKey","INSIGHTS_TABS"],"sourceRoot":""}