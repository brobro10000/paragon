{"version":3,"file":"component---src-pages-insights-tsx-a80fa9d3c9e8c4d7afb6.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/utils/getDependentProjectsUsages.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsage.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectsUsage.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/HooksUsage.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/UtilsUsage.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/IconsUsage.tsx","webpack://paragon-pattern-library-documentation/./src/pages/insights.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport UsagesList from './UsagesList';\n\nexport interface ISummaryUsageExamples {\n  row: {\n    original: {\n      usages: [],\n      name: string\n    },\n  }\n}\n\nfunction SummaryUsageExamples({ row }: ISummaryUsageExamples) {\n  interface IComponentUsages {\n    folderName: string,\n    usages: [],\n    repositoryUrl: string,\n  }\n\n  const { usages: componentUsages, name: componentName } = row.original;\n\n  const componentUsagesExample = componentUsages.map(({\n    folderName: projectName,\n    usages: projectUsages,\n    repositoryUrl,\n  }: IComponentUsages) => (\n    <div className=\"pgn-doc__summary-usages__project mb-4\" key={projectName}>\n      <h5 className=\"font-weight-bold\">{projectName}</h5>\n      <UsagesList\n        usages={projectUsages}\n        componentName={componentName}\n        repositoryUrl={repositoryUrl}\n        projectName={projectName}\n      />\n    </div>\n  ));\n\n  return <div>{componentUsagesExample}</div>;\n}\n\nSummaryUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        folderName: PropTypes.string.isRequired,\n        repositoryUrl: PropTypes.string.isRequired,\n        usages: PropTypes.arrayOf(PropTypes.shape({\n          filePath: PropTypes.string.isRequired,\n          line: PropTypes.number.isRequired,\n        })),\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SummaryUsageExamples;\n","// @ts-ignore\nimport dependentProjectsAnalysis from '../../../dependent-usage.json'; // eslint-disable-line\nimport getGithubProjectUrl from './getGithubProjectUrl';\nimport { IDependentProjectsUsages, IDependentUsage, IUsage } from '../types/types';\n\nconst {\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\nexport default function getDependentProjectsUsages() {\n  const dependentProjects: IDependentUsage[] = [];\n\n  dependentProjectsUsages.forEach((project: IDependentProjectsUsages) => {\n    dependentProjects.push({\n      ...project,\n      repositoryUrl: getGithubProjectUrl(project.repository),\n      count: Object.values<IUsage[]>(project.usages).reduce((acc, usage) => acc + usage.length, 0),\n    });\n  });\n\n  return dependentProjects;\n}\n","import React, { useContext } from 'react';\nimport {\n  DataTable,\n  TextFilter,\n  CheckboxFilter,\n  useMediaQuery,\n  breakpoints,\n} from '~paragon-react';\nimport componentsUsage from '../../utils/componentsUsage';\nimport InsightsContext from '../../context/InsightsContext';\nimport SummaryUsageExamples, { ISummaryUsageExamples } from './SummaryUsageExamples';\nimport { IComponentUsageData, IInsightsContext } from '../../types/types';\nimport getDependentProjectsUsages from '../../utils/getDependentProjectsUsages';\n\ninterface IFilterData {\n  name: string,\n  number: number | undefined,\n  value: string\n}\n\nconst round = (n: number) => Math.round(n * 10) / 10;\n\nconst ICON_TYPE = 'Icon';\nconst TABLE_PAGE_SIZE = 10;\nconst componentsInUsage = Object.keys(componentsUsage);\nconst dependentProjects = getDependentProjectsUsages();\n\nfunction SummaryUsage() {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const isMedium = useMediaQuery({ minWidth: breakpoints.large.minWidth });\n\n  const typeCount = Object.keys(paragonTypes)\n    .reduce((accumulator: { [key: string]: number | undefined }, componentName) => {\n      const type = paragonTypes[componentName] || (isParagonIcon(componentName) && ICON_TYPE);\n      if (componentsInUsage.includes(componentName)) {\n        accumulator[type] = (accumulator[type] || 0) + 1;\n      }\n      return accumulator;\n    }, {});\n\n  const filterValues: IFilterData[] = Object.keys(paragonTypes)\n    .map((key) => paragonTypes[key])\n    .filter((v, i, a) => a.indexOf(v) === i)\n    .map(type => ({ name: type, number: typeCount[type], value: type }));\n  // Number of Icons is calculated in the statement below. Initialized as `undefined` to not display '0'.\n  const iconsType: IFilterData = { name: ICON_TYPE, number: undefined, value: ICON_TYPE };\n\n  const summaryComponentsUsage = Object.entries<IComponentUsageData[]>(componentsUsage).map(\n    ([componentName, usages]) => {\n      const componentUsageCounts = usages\n        .reduce((accumulator, project) => accumulator + project.componentUsageCount, 0);\n      let type = paragonTypes[componentName];\n      if (!type && isParagonIcon(componentName)) {\n        type = ICON_TYPE;\n        iconsType.number = (iconsType.number || 0) + 1;\n      }\n      return {\n        name: componentName,\n        count: componentUsageCounts,\n        usages: componentsUsage[componentName],\n        type,\n      };\n    },\n  );\n  filterValues.push(iconsType);\n  typeCount[ICON_TYPE] = iconsType.number;\n\n  const summaryTableData = summaryComponentsUsage.sort((a, b) => {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    return nameA < nameB ? -1 : 1;\n  });\n\n  const averageComponentsUsedPerProject = dependentProjects\n    .reduce((accumulator, project) => accumulator + project.count, 0) / dependentProjects.length;\n  return (\n    <div className=\"pt-5 mb-5\">\n      <div className=\"mb-5\">\n        <h2>Overview</h2>\n        <p>\n          Paragon is used by at least <strong>{dependentProjects.length} projects</strong>, with an average\n          of <strong>{round(averageComponentsUsedPerProject)} imports</strong> per project.\n        </p>\n      </div>\n      <h3>Overall usage</h3>\n      <DataTable\n        isPaginated\n        isExpandable\n        isSortable\n        showFiltersInSidebar={isMedium}\n        isFilterable\n        defaultColumnValues={{ Filter: TextFilter }}\n        itemCount={summaryTableData.length}\n        data={summaryTableData}\n        renderRowSubComponent={({ row }: ISummaryUsageExamples) => <SummaryUsageExamples row={row} />}\n        initialState={{ pageSize: TABLE_PAGE_SIZE }}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Component Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Instance Count',\n            accessor: 'count',\n            disableFilters: true,\n          },\n          {\n            Header: 'Type',\n            accessor: 'type',\n            Filter: CheckboxFilter,\n            filter: 'includesValue',\n            filterChoices: filterValues,\n          },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No summary available\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\nexport default SummaryUsage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport UsagesList from './UsagesList';\n\ntype IProjectUsages = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IProjectUsageExamples {\n  row: {\n    original: {\n      folderName: string,\n      repositoryUrl: string,\n      usages: { [key: string]: Array<IProjectUsages> },\n    },\n  },\n}\n\nfunction ProjectUsageExamples({ row }: IProjectUsageExamples) {\n  const { repositoryUrl, usages, folderName: projectName } = row.original;\n\n  const orderedComponentUsages: { [key: string]: Array<IProjectUsages> } = Object.keys(usages)\n    .sort().reduce((obj: { [index: string]: any }, key) => {\n    // eslint-disable-next-line no-param-reassign\n      obj[key] = usages[key];\n      return obj;\n    }, {});\n\n  return (\n    <>\n      {Object.keys(usages).length === 0 && (\n        <p>This project does not import any Paragon components, but may still use its SCSS styles.</p>\n      )}\n      {Object.entries(orderedComponentUsages).map(([componentName, usagesArray]) => (\n        <div className=\"pgn-doc__usages-modal mb-4\" key={componentName}>\n          <h5 className=\"font-weight-bold\">{componentName}</h5>\n          <UsagesList\n            usages={usagesArray}\n            componentName={componentName}\n            repositoryUrl={repositoryUrl}\n            projectName={projectName}\n          />\n        </div>\n      ))}\n    </>\n  );\n}\n\nProjectUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      folderName: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      }))).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectUsageExamples;\n","import React from 'react';\nimport { DataTable } from '~paragon-react';\nimport ProjectUsageExamples, { IProjectUsageExamples } from './ProjectUsageExamples';\n\nimport getDependentProjectsUsages from '../../utils/getDependentProjectsUsages';\n\nfunction ProjectsUsage() {\n  const dependentProjects = getDependentProjectsUsages();\n\n  return (\n    <div className=\"pt-5 mb-5\">\n      <h3 className=\"mb-4\">Projects in Open edX consuming Paragon</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={dependentProjects.length}\n        data={dependentProjects}\n        renderRowSubComponent={({ row }: IProjectUsageExamples) => <ProjectUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Import Count', accessor: 'count' },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No projects\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\nexport default ProjectsUsage;\n","import React from 'react';\nimport ComponentUsage from './ComponentUsage';\n\nimport componentsUsage from '../../utils/componentsUsage';\nimport getEmptyMessage from '../../utils/getEmptyMessage';\nimport usagePropTypes from '../../utils/usagePropTypes';\n\nfunction HooksUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('hooks')}\n    </div>\n  );\n}\n\nHooksUsage.propTypes = usagePropTypes;\n\nexport default HooksUsage;\n","import React from 'react';\nimport ComponentUsage from './ComponentUsage';\n\nimport componentsUsage from '../../utils/componentsUsage';\nimport getEmptyMessage from '../../utils/getEmptyMessage';\nimport usagePropTypes from '../../utils/usagePropTypes';\n\nfunction UtilsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\nUtilsUsage.propTypes = usagePropTypes;\n\nexport default UtilsUsage;\n","import React from 'react';\nimport ComponentUsage from './ComponentUsage';\n\nimport componentsUsage from '../../utils/componentsUsage';\nimport getEmptyMessage from '../../utils/getEmptyMessage';\nimport usagePropTypes from '../../utils/usagePropTypes';\n\nfunction IconsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\nIconsUsage.propTypes = usagePropTypes;\n\nexport default IconsUsage;\n","import React, { useContext } from 'react';\nimport { navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Tabs,\n  Tab,\n} from '~paragon-react';\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport InsightsContext from '../context/InsightsContext';\nimport SummaryUsage from '../components/insights/SummaryUsage';\nimport ProjectsUsage from '../components/insights/ProjectsUsage';\nimport HooksUsage from '../components/insights/HooksUsage';\nimport UtilsUsage from '../components/insights/UtilsUsage';\nimport IconsUsage from '../components/insights/IconsUsage';\nimport ComponentsUsage from '../components/insights/ComponentsUsage';\n\n// @ts-ignore\nimport dependentProjectsAnalysis from '../../../dependent-usage.json'; // eslint-disable-line\nimport { INSIGHTS_TABS, INSIGHTS_PAGES } from '../config';\nimport componentsUsage from '../utils/componentsUsage';\nimport { IInsightsContext } from '../types/types';\nimport { SettingsContext } from '../context/SettingsContext';\n\nconst {\n  lastModified: analysisLastUpdated,\n} = dependentProjectsAnalysis;\n\nexport interface TabsDataType {\n  components: string[],\n  hooks: string[],\n  utils: string[],\n  icons: string[],\n}\n\nexport interface InsightsPageTypes {\n  pageContext: {\n    tab: string,\n    githubEditPath: string\n  }\n}\n\nexport default function InsightsPage({ pageContext: { tab, githubEditPath } }: InsightsPageTypes) {\n  const { settings } = useContext(SettingsContext);\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const {\n    components, hooks, utils, icons,\n  } = Object.keys(componentsUsage).reduce<TabsDataType>((acc, usage) => {\n    if (paragonTypes[usage] === 'Component') {\n      acc.components.push(usage);\n    } else if (paragonTypes[usage] === 'Hook') {\n      acc.hooks.push(usage);\n    } else if (['Text', 'Function', 'Object'].includes(paragonTypes[usage])) {\n      acc.utils.push(usage);\n    } else if (isParagonIcon(usage)) {\n      acc.icons.push(usage);\n    }\n    return acc;\n  }, {\n    components: [], hooks: [], utils: [], icons: [],\n  });\n\n  const handleOnSelect = (value: string) => {\n    if (value !== tab) {\n      global.analytics.track(`openedx.paragon.docs.insights.tabs.${value.toLowerCase().trim()}.clicked`);\n      navigate(INSIGHTS_PAGES.find(item => item.tab === value).path);\n    }\n  };\n  return (\n    <Layout isAutoToc tab={tab} githubEditPath={githubEditPath}>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title=\"Usage Insights\" />\n      <Container size={settings.containerWidth} className=\"py-5\">\n        <header className=\"mb-5\">\n          <h1>Usage Insights</h1>\n          <p>Last updated: {new Date(analysisLastUpdated).toLocaleDateString()}</p>\n        </header>\n        <Tabs\n          activeKey={tab}\n          id=\"uncontrolled-tab-example\"\n          onSelect={handleOnSelect}\n        >\n          <Tab eventKey={INSIGHTS_TABS.SUMMARY} title=\"Summary\">\n            {tab === INSIGHTS_TABS.SUMMARY && (\n            <SummaryUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.PROJECTS} title=\"Projects\">\n            {tab === INSIGHTS_TABS.PROJECTS && (\n            <ProjectsUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.COMPONENTS} title=\"Components\">\n            {tab === INSIGHTS_TABS.COMPONENTS && (\n            <ComponentsUsage data={components} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.HOOKS} title=\"Hooks\">\n            {tab === INSIGHTS_TABS.HOOKS && (\n            <HooksUsage data={hooks} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.UTILS} title=\"Utils\">\n            {tab === INSIGHTS_TABS.UTILS && (\n            <UtilsUsage data={utils} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.ICONS} title=\"Icons\">\n            {tab === INSIGHTS_TABS.ICONS && (\n            <IconsUsage data={icons} />\n            )}\n          </Tab>\n        </Tabs>\n      </Container>\n    </Layout>\n  );\n}\n\nInsightsPage.propTypes = {\n  pageContext: PropTypes.shape({\n    tab: PropTypes.oneOf(Object.values(INSIGHTS_TABS)),\n    githubEditPath: PropTypes.string,\n  }).isRequired,\n};\n"],"names":["_ref","row","usages","componentUsages","name","componentName","original","componentUsagesExample","map","_ref2","folderName","projectName","projectUsages","repositoryUrl","React","className","key","UsagesList","dependentProjectsUsages","dependentProjectsAnalysis","getDependentProjectsUsages","dependentProjects","forEach","project","push","_objectSpread","getGithubProjectUrl","repository","count","Object","values","reduce","acc","usage","length","round","n","Math","ICON_TYPE","TABLE_PAGE_SIZE","componentsInUsage","keys","componentsUsage","paragonTypes","isParagonIcon","useContext","InsightsContext","isMedium","useMediaQuery","minWidth","breakpoints","typeCount","accumulator","type","includes","filterValues","filter","v","i","a","indexOf","number","value","iconsType","undefined","summaryComponentsUsage","entries","componentUsageCounts","componentUsageCount","summaryTableData","sort","b","toUpperCase","averageComponentsUsedPerProject","DataTable","isPaginated","isExpandable","isSortable","showFiltersInSidebar","isFilterable","defaultColumnValues","Filter","TextFilter","itemCount","data","renderRowSubComponent","SummaryUsageExamples","initialState","pageSize","columns","id","Header","Cell","accessor","disableFilters","CheckboxFilter","filterChoices","content","orderedComponentUsages","obj","usagesArray","ProjectUsageExamples","ComponentUsage","componentUsageInProjects","getEmptyMessage","lastModified","analysisLastUpdated","InsightsPage","pageContext","tab","githubEditPath","settings","SettingsContext","components","hooks","utils","icons","Layout","isAutoToc","SEO","title","Container","size","containerWidth","Date","toLocaleDateString","Tabs","activeKey","onSelect","global","analytics","track","toLowerCase","trim","navigate","INSIGHTS_PAGES","item","path","Tab","eventKey","INSIGHTS_TABS","SummaryUsage","ProjectsUsage","ComponentsUsage","HooksUsage","UtilsUsage","IconsUsage"],"sourceRoot":""}