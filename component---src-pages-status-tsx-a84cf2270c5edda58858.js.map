{"version":3,"file":"component---src-pages-status-tsx-a84cf2270c5edda58858.js","mappings":"iQASO,SAASA,EAAeC,GAA8C,IAA7C,OAAEC,EAAM,aAAEC,GAAgCF,EACxE,OAAKC,EAEHE,EAAAA,cAAA,QACEC,UAAY,oBAAmBF,GAC1B,2BAA2BD,EAAOI,cAAcC,QAAQ,IAAK,QAElEH,EAAAA,cAAA,YAAOF,IANW,IASxB,CAOAF,EAAgBQ,aAAe,CAC7BL,cAAc,G,qCCbD,SAASM,EAAUR,GAAkB,IAAjB,YAAES,GAAaT,EAChD,MAAM,SAAEU,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,iBAEhC,OACET,EAAAA,cAACU,EAAAA,EAAM,CAACC,WAAS,EAACC,eAAgBN,EAAYM,gBAE5CZ,EAAAA,cAACa,EAAAA,EAAG,CAACC,MAAM,WACXd,EAAAA,cAACe,EAAAA,EAAS,CAACC,KAAMT,EAASU,eAAgBhB,UAAU,QAClDD,EAAAA,cAAA,UAAI,kBAEJA,EAAAA,cAAA,UAAI,qBACJA,EAAAA,cAACkB,EAAAA,YAAW,CACVC,MAAK,aAeLC,OAAQC,IAAgB,IAAf,OAAEC,GAAQD,EACjB,IAAKC,IAAWA,EAAOC,MAAS,OAAO,KACvC,MAAMC,EAAaF,EAAOC,MAAME,KAAIC,IAAA,IAAC,YAAEC,GAA0BD,EAAA,OAAKC,CAAW,IAC9EC,QAAOC,IAAA,IAAC,MAAEf,GAAoBe,EAAA,MAAe,iBAAVf,CAAwB,IAU9D,OACEd,EAAAA,cAAC8B,EAAAA,EAAK,CACJ7B,UAAU,wBACV8B,KAAMP,EAAWC,KAAIO,IAAA,IAAC,MACpBlB,EAAK,OAAEhB,EAAM,aAAEmC,EAAY,UAAEC,EAAS,MAAEC,GACjCH,EAAA,MAAM,CACbI,KACEpC,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAKc,EAAM,IAACd,EAAAA,cAACJ,EAAe,CAACE,OAAQA,KACrCE,EAAAA,cAAA,WAAMmC,IAGVF,aAAcjC,EAAAA,cAACJ,EAAe,CAACE,OAAQmC,IACvCC,UAAWlC,EAAAA,cAACJ,EAAe,CAACE,OAAQoC,IACrC,IACDG,QAAS,CACP,CACEC,MAAO,YACPC,IAAK,OACLC,MAAO,SAET,CACEF,MAAO,SACPC,IAAK,eACLC,MAAO,SAET,CACEF,MAAO,cACPC,IAAK,YACLC,MAAO,WAGX,KAOhB,C","sources":["webpack://paragon-pattern-library-documentation/./src/components/doc-elements.tsx","webpack://paragon-pattern-library-documentation/./src/pages/status.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface IComponentStatus {\n  status: string,\n  noLeftMargin?: string,\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function ComponentStatus({ status, noLeftMargin }: IComponentStatus) {\n  if (!status) { return null; }\n  return (\n    <span\n      className={`status-indicator ${noLeftMargin\n        && 'status-no-left-margin'} ${status.toLowerCase().replace(' ', '-')}`}\n    >\n      <span>{status}</span>\n    </span>\n  );\n}\n\nComponentStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n  noLeftMargin: PropTypes.bool,\n};\n\nComponentStatus.defaultProps = {\n  noLeftMargin: false,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\nimport { Table, Container } from '~paragon-react';\nimport { ComponentStatus } from '../components/doc-elements';\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport { SettingsContext } from '../context/SettingsContext';\n\nexport interface IComponents {\n  frontmatter?: string,\n  title?: string,\n}\n\nexport default function StatusPage({ pageContext }) {\n  const { settings } = useContext(SettingsContext);\n\n  return (\n    <Layout isAutoToc githubEditPath={pageContext.githubEditPath}>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title=\"Status\" />\n      <Container size={settings.containerWidth} className=\"py-5\">\n        <h1>Library Status</h1>\n\n        <h3>Components Status</h3>\n        <StaticQuery\n          query={graphql`query ComponentStatusQuery {\n            allMdx(filter: {frontmatter: {type: {eq: \"component\"}}}, sort: {fields: frontmatter___title}) {\n              nodes {\n                frontmatter {\n                  designStatus\n                  devStatus\n                  status\n                  notes\n                  status\n                  title\n                  type\n                }\n              }\n            }\n          }`}\n          render={({ allMdx }) => {\n            if (!allMdx || !allMdx.nodes) { return null; }\n            const components = allMdx.nodes.map(({ frontmatter }: IComponents) => frontmatter)\n              .filter(({ title }: IComponents) => title !== 'My Component');\n\n            interface ITable {\n              title: string,\n              status: string,\n              designStatus: string,\n              devStatus: string,\n              notes: string,\n            }\n\n            return (\n              <Table\n                className=\"pgn-doc__status-table\"\n                data={components.map(({\n                  title, status, designStatus, devStatus, notes,\n                }: ITable) => ({\n                  name: (\n                    <div>\n                      <h6>{title} <ComponentStatus status={status} /></h6>\n                      <pre>{notes}</pre>\n                    </div>\n                  ),\n                  designStatus: <ComponentStatus status={designStatus} />,\n                  devStatus: <ComponentStatus status={devStatus} />,\n                }))}\n                columns={[\n                  {\n                    label: 'Component',\n                    key: 'name',\n                    width: 'col-2',\n                  },\n                  {\n                    label: 'Design',\n                    key: 'designStatus',\n                    width: 'col-3',\n                  },\n                  {\n                    label: 'Development',\n                    key: 'devStatus',\n                    width: 'col-3',\n                  },\n                ]}\n              />\n            );\n          }}\n        />\n      </Container>\n    </Layout>\n  );\n}\n\nStatusPage.propTypes = {\n  pageContext: PropTypes.shape({\n    githubEditPath: PropTypes.string,\n  }).isRequired,\n};\n"],"names":["ComponentStatus","_ref","status","noLeftMargin","React","className","toLowerCase","replace","defaultProps","StatusPage","pageContext","settings","useContext","SettingsContext","Layout","isAutoToc","githubEditPath","SEO","title","Container","size","containerWidth","StaticQuery","query","render","_ref2","allMdx","nodes","components","map","_ref3","frontmatter","filter","_ref4","Table","data","_ref5","designStatus","devStatus","notes","name","columns","label","key","width"],"sourceRoot":""}