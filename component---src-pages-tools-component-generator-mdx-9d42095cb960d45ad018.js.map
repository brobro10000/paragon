{"version":3,"file":"component---src-pages-tools-component-generator-mdx-9d42095cb960d45ad018.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/LinkedHeading.tsx","webpack://paragon-pattern-library-documentation/./src/templates/default-mdx-page-template.tsx","webpack://paragon-pattern-library-documentation/./src/pages/tools/component-generator.mdx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface ILinkedHeading {\n  h: string,\n  children: React.ReactNode,\n  id: string,\n}\n\ntype HeadingTag = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nfunction LinkedHeading({\n  h,\n  children,\n  id,\n}: ILinkedHeading) {\n  const H = `h${h}` as HeadingTag;\n\n  return (\n    <H id={id} className=\"pgn-doc__heading\">\n      {children}\n    </H>\n  );\n}\n\nLinkedHeading.propTypes = {\n  h: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default LinkedHeading;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { MDXProvider } from '@mdx-js/react';\nimport { Link } from 'gatsby';\nimport { Container } from '~paragon-react';\nimport CodeBlock from '../components/CodeBlock';\nimport Layout from '../components/PageLayout';\nimport SEO from '../components/SEO';\nimport LinkedHeading from '../components/LinkedHeading';\nimport { SettingsContext } from '../context/SettingsContext';\n\nconst shortcodes = {\n  h1: (props: HTMLHeadingElement) => <LinkedHeading h=\"1\" {...props} />,\n  h2: (props: HTMLHeadingElement) => <LinkedHeading h=\"2\" {...props} />,\n  h3: (props: HTMLHeadingElement) => <LinkedHeading h=\"3\" {...props} />,\n  h4: (props: HTMLHeadingElement) => <LinkedHeading h=\"4\" {...props} />,\n  h5: (props: HTMLHeadingElement) => <LinkedHeading h=\"5\" {...props} />,\n  h6: (props: HTMLHeadingElement) => <LinkedHeading h=\"6\" {...props} />,\n  pre: (props:\n  JSX.IntrinsicAttributes & React.ClassAttributes<HTMLDivElement> &\n  React.HTMLAttributes<HTMLDivElement>) => <div {...props} />,\n  code: CodeBlock,\n  Link,\n};\n\nexport interface IPageTemplateType {\n  children: React.ReactNode,\n  pageContext: {\n    frontmatter: {\n      title: string,\n    },\n    githubEditPath: string,\n  },\n}\n\nexport default function PageTemplate({ children, pageContext }: IPageTemplateType) {\n  const { settings } = useContext(SettingsContext);\n\n  return (\n    <Layout isAutoToc githubEditPath={pageContext.githubEditPath}>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title={pageContext?.frontmatter?.title} />\n      <Container size={settings.containerWidth} className=\"py-5\">\n        <MDXProvider components={shortcodes}>{children}</MDXProvider>\n      </Container>\n    </Layout>\n  );\n}\n\nPageTemplate.propTypes = {\n  children: PropTypes.node.isRequired,\n  // Require mdx files to define their page title using frontmatter\n  pageContext: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string,\n    }),\n    githubEditPath: PropTypes.string,\n  }).isRequired,\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/paragon/paragon/www/src/templates/default-mdx-page-template.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"component-generation\"\n    }}>{`Component generation`}<a parentName=\"h1\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#component-generation\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"pgn-doc__anchor\"\n        }}>{`#`}</span></a></h1>\n    <p>{`Component generation offers pre-defined templates of the necessary files to kickstart development and automatically export the created components for use in the project. In this document, we will explore the process of component generation and the steps required to get started with this powerful feature.`}</p>\n    <h2 {...{\n      \"id\": \"1-start-the-documentation-site-development-server\"\n    }}>{`1. Start the documentation site development server`}<a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#1-start-the-documentation-site-development-server\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"pgn-doc__anchor\"\n        }}>{`#`}</span></a></h2>\n    <p>{`The Paragon documentation site serves both as documentation and as a workbench to create your component within. To see your component in action, you need to run the documentation site locally.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install\nnpm start\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-create-new-component\"\n    }}>{`2. Create new component`}<a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#2-create-new-component\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"pgn-doc__anchor\"\n        }}>{`#`}</span></a></h2>\n    <p>{`To create new component run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run generate-component MyComponent\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`MyComponent`}</inlineCode>{` is your new component's name.`}</p>\n    <p>{`This will create a directory in `}<inlineCode parentName=\"p\">{`/src/`}</inlineCode>{` that will contain templates for all necessary files to start developing the component:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`MyComponent\n├── index.jsx\n├── README.md\n├── MyComponent.scss\n├── _variables.scss\n└── MyComponent.test.jsx\n`}</code></pre>\n    <p>{`The script will also automatically export your component from Paragon.`}</p>\n    <h2 {...{\n      \"id\": \"3-start-developing\"\n    }}>{`3. Start developing`}<a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#3-start-developing\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"pgn-doc__anchor\"\n        }}>{`#`}</span></a></h2>\n    <p><inlineCode parentName=\"p\">{`/src/MyComponent/index.jsx`}</inlineCode>{` is where your component lives, the file is created with the following template, edit it to implement your own component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst MyComponent = React.forwardRef(({ className, children }, ref) => (\n  <div ref={ref} className={classNames('png__MyComponent', className)}>\n    {children}\n  </div>\n));\n\nMyComponent.defaultProps = {\n  className: undefined,\n};\n\nMyComponent.propTypes = {\n  /** A class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n};\n\nexport default MyComponent;\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"4-optional-add-styles-to-your-component\"\n    }}>{`4. (Optional) Add styles to your component.`}<a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#4-optional-add-styles-to-your-component\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"pgn-doc__anchor\"\n        }}>{`#`}</span></a></h2>\n    <p>{`If your component requires additional styling (which most likely is the case), edit created SCSS style sheet in your\ncomponent's directory `}<inlineCode parentName=\"p\">{`/src/MyComponent/MyComponent.scss`}</inlineCode>{` which by default contains an empty class for your component.`}</p>\n    <p>{`If you wish to use SASS variables (which is the preferred way of styling the components since values can be\neasily overridden and customized by the consumers of Paragon), add them in `}<inlineCode parentName=\"p\">{`/src/MyComponent/_variables.scss`}</inlineCode>{` (this file should contain all variables specific to your component).\nThis way the variables will also get automatically picked up by documentation site and displayed on your component's page.`}</p>\n    <p><strong parentName=\"p\">{`Please note that you need to follow `}<a parentName=\"strong\" {...{\n          \"href\": \"https://github.com/openedx/paragon/blob/master/docs/decisions/0012-css-styling-conventions\"\n        }}>{`Paragon's CSS styling conventions`}</a>{`.`}</strong></p>\n    <h2 {...{\n      \"id\": \"5-document-your-component\"\n    }}>{`5. Document your component`}<a parentName=\"h2\" {...{\n        \"aria-hidden\": \"true\",\n        \"tabIndex\": -1,\n        \"href\": \"#5-document-your-component\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"pgn-doc__anchor\"\n        }}>{`#`}</span></a></h2>\n    <p>{`The documentation for your component lives in `}<inlineCode parentName=\"p\">{`src/MyComponent/README.md`}</inlineCode>{`. The documentation site scans this directory for markdown or mdx files to create pages. By default, the file is created with following content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`---\ntitle: 'MyComponent'\ntype: 'component'\ncomponents:\n- MyComponent\nstatus: 'New'\ndesignStatus: 'Done'\ndevStatus: 'Done'\nnotes: |\n  Something special about this component\n---\n\nDescribe your component here and give usage examples.\n\n### Basic Usage\n\n\\`\\`\\`jsx live\n<MyComponent>\n  Hello!\n</MyComponent>\n\\`\\`\\`\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_ref","h","children","id","H","React","className","shortcodes","h1","props","LinkedHeading","Object","assign","h2","h3","h4","h5","h6","pre","code","CodeBlock","Link","PageTemplate","_pageContext$frontmat","pageContext","settings","useContext","SettingsContext","Layout","isAutoToc","githubEditPath","SEO","title","frontmatter","Container","size","containerWidth","MDXProvider","components","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_objectWithoutProperties","_excluded","mdx","mdxType","parentName","isMDXComponent"],"sourceRoot":""}