{"version":3,"file":"dba6d12e4b8f2f7110c9fbf33055c02769c5062d-62144dcc464898b44f45.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsage.tsx","webpack://paragon-pattern-library-documentation/./src/utils/removeDotsFromKey.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentsUsage.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/UsagesList.tsx","webpack://paragon-pattern-library-documentation/./src/utils/getEmptyMessage.tsx","webpack://paragon-pattern-library-documentation/./src/utils/componentsUsage.js","webpack://paragon-pattern-library-documentation/./src/utils/getGithubProjectUrl.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport UsagesList from './UsagesList';\n\ntype ProjectUsagesTypes = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IComponentUsageExamples {\n  row: {\n    original: {\n      folderName: string,\n      repositoryUrl: string,\n      usages: Array<ProjectUsagesTypes>,\n    },\n  },\n  componentName: string,\n}\n\nfunction ComponentUsageExamples({ row, componentName }: IComponentUsageExamples) {\n  const { repositoryUrl, usages, folderName: projectName } = row.original;\n\n  return (\n    <div className=\"pgn-doc__component-usage__project\">\n      <UsagesList\n        usages={usages}\n        componentName={componentName}\n        repositoryUrl={repositoryUrl}\n        projectName={projectName}\n      />\n    </div>\n  );\n}\n\nComponentUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      folderName: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ComponentUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DataTable } from '~paragon-react';\nimport ComponentUsageExamples, { IComponentUsageExamples } from './ComponentUsageExamples';\n\nimport { IComponentUsage } from '../../types/types';\n\nfunction ComponentUsage({ name, componentUsageInProjects }: IComponentUsage) {\n  return (\n    <div className=\"mb-5\">\n      <h3 className=\"mb-4\">{name}</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={componentUsageInProjects.length} // eslint-disable-line\n        data={componentUsageInProjects}\n        renderRowSubComponent={({ row }: IComponentUsageExamples) => (\n          <ComponentUsageExamples row={row} componentName={name} />\n        )}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Instance Count', accessor: 'componentUsageCount' },\n        ]}\n      >\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No usages\" />\n      </DataTable>\n    </div>\n  );\n}\n\nComponentUsage.propTypes = {\n  name: PropTypes.string.isRequired,\n  componentUsageInProjects: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    folderName: PropTypes.string,\n    version: PropTypes.string,\n    repositoryUrl: PropTypes.string,\n    componentUsageCount: PropTypes.number,\n    usages: PropTypes.arrayOf(PropTypes.shape({\n      column: PropTypes.number,\n      filePath: PropTypes.string,\n      line: PropTypes.number,\n      version: PropTypes.string,\n    })),\n  })).isRequired,\n};\n\nexport default ComponentUsage;\n","/**\n * Removes dots in the keys of the passed object.\n * @param {object} object - object with usage insights of Paragon components.\n */\nconst removeDotsFromKeys = (object) => Object.entries(object).reduce((accumulator, [key, value]) => {\n  const newKey = key.replace(/\\./g, '');\n  return { ...accumulator, [newKey]: value };\n}, {});\n\nexport default removeDotsFromKeys;\n","import React from 'react';\nimport ComponentUsage from './ComponentUsage';\n\nimport componentsUsage from '../../utils/componentsUsage';\nimport getEmptyMessage from '../../utils/getEmptyMessage';\nimport usagePropTypes from '../../utils/usagePropTypes';\nimport removeDotsFromKeys from '../../utils/removeDotsFromKey';\n\nfunction ComponentsUsage({ data }: { data: string[] }) {\n  const filteredComponentsUsage = removeDotsFromKeys(componentsUsage);\n\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => {\n        if (filteredComponentsUsage[name]) {\n          return (\n            <ComponentUsage\n              key={name}\n              name={name}\n              componentUsageInProjects={filteredComponentsUsage[name]}\n            />\n          );\n        }\n        return null;\n      }) : getEmptyMessage('components')}\n    </div>\n  );\n}\n\nComponentsUsage.propTypes = usagePropTypes;\n\nexport default ComponentsUsage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\ntype UsagesType = {\n  filePath: string,\n  line: number,\n};\n\ninterface UsagesListPropTypes {\n  repositoryUrl: string,\n  componentName: string,\n  projectName: string,\n  usages: Array<UsagesType>,\n}\n\nexport default function UsagesList({\n  usages,\n  repositoryUrl,\n  componentName,\n  projectName,\n} : UsagesListPropTypes) {\n  const handleUsageLinkClick = (linkToUsage) => {\n    global.analytics.track(\n      'openedx.paragon.docs.usage-insights.component-usage-link.clicked',\n      { project: projectName, component: componentName, linkToUsage },\n    );\n  };\n\n  return (\n    <ul className=\"list-unstyled\">\n      {usages.map((usage) => {\n        const PATH_TO_USAGE = `${repositoryUrl}/${usage.filePath}#L${usage.line}`;\n        return (\n          <li key={`${usage.filePath}L#${usage.line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={PATH_TO_USAGE}\n                  target=\"_blank\"\n                  onClick={() => handleUsageLinkClick(PATH_TO_USAGE)}\n                >\n                  {usage.filePath}\n                </Hyperlink>\n                {' '}(line {usage.line})\n              </>\n            ) : (\n              <>{usage.filePath} (line {usage.line})</>\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nUsagesList.propTypes = {\n  projectName: PropTypes.string.isRequired,\n  componentName: PropTypes.string.isRequired,\n  repositoryUrl: PropTypes.string.isRequired,\n  usages: PropTypes.arrayOf(PropTypes.shape({\n    filePath: PropTypes.string.isRequired,\n    line: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","export default function getEmptyMessage(text: string) {\n  return `Currently there are no ${text} usage yet`;\n}\n","const getGithubProjectUrl = require('./getGithubProjectUrl');\nconst dependentProjectsAnalysis = require('../../../dependent-usage.json');\n\nconst {\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\nconst componentsUsage = dependentProjectsUsages\n  .reduce((accumulator, project) => {\n    Object.keys(project.usages).forEach(componentName => {\n      if (!accumulator[componentName]) {\n        accumulator[componentName] = [];\n      }\n      accumulator[componentName] = accumulator[componentName].concat({\n        name: project.name,\n        folderName: project.folderName,\n        version: project.version,\n        repositoryUrl: getGithubProjectUrl(project.repository),\n        componentUsageCount: project.usages[componentName].length,\n        usages: project.usages[componentName],\n      });\n    });\n\n    return accumulator;\n  }, {});\n\nmodule.exports = componentsUsage;\n","const getGithubProjectUrl = (repository) => {\n  let repositoryUrl;\n  if (typeof repository === 'string') {\n    repositoryUrl = repository;\n  } else if (repository?.url) {\n    repositoryUrl = repository.url;\n  } else {\n    // unsupported repository field\n    return undefined;\n  }\n  const parts = repositoryUrl.split('/');\n  const githubDomainIndex = parts.findIndex((part) => part === 'github.com');\n  parts.splice(0, githubDomainIndex);\n  const parsedRepositoryUrl = parts.join('/').replace('.git', '');\n  return `https://${parsedRepositoryUrl}/blob/master`;\n};\n\nmodule.exports = getGithubProjectUrl;\n"],"names":["_ref","row","componentName","repositoryUrl","usages","folderName","projectName","original","React","className","UsagesList","name","componentUsageInProjects","DataTable","isExpandable","isSortable","itemCount","length","data","renderRowSubComponent","_ref2","ComponentUsageExamples","columns","id","Header","Cell","accessor","content","object","Object","entries","reduce","accumulator","key","value","newKey","replace","_objectSpread","filteredComponentsUsage","removeDotsFromKeys","componentsUsage","sort","map","ComponentUsage","getEmptyMessage","usage","PATH_TO_USAGE","filePath","line","Hyperlink","destination","target","onClick","handleUsageLinkClick","linkToUsage","global","analytics","track","project","component","text","getGithubProjectUrl","require","dependentProjectsAnalysis","projectUsages","dependentProjectsUsages","keys","forEach","concat","version","repository","componentUsageCount","module","exports","url","parts","split","githubDomainIndex","findIndex","part","splice","join"],"sourceRoot":""}