{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/button/","result":{"data":{"mdx":{"id":"cec0d289-d6b1-57fa-986b-f971ddd79ab5","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Button\",\n  \"type\": \"component\",\n  \"components\": [\"Button\"],\n  \"categories\": [\"Buttonlike\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"TO DO\",\n  \"notes\": \"TODO: Remove subcomponent of deprecated implementation soon\\n\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `This component utilizes `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Button`), ` from React-Bootstrap and extends it with an ability to add icons before and after button label, see `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#with-icons-before-or-after\"\n  }, `below`), ` for usage example.`, mdx(\"br\", null), ` `, mdx(\"a\", {\n    href: \"https://react-bootstrap.github.io/components/buttons/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ` See React-Bootstrap for additional documentation. `)), mdx(\"h2\", {\n    \"id\": \"core-buttons\"\n  }, `Core Buttons`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#core-buttons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Button variant=\"brand\" className=\"mb-2 mb-sm-0\">Brand</Button>{' '}\n  <Button variant=\"outline-brand\" className=\"mb-2 mb-sm-0\">Outline Brand</Button>{' '}\n  <Button variant=\"primary\" className=\"mb-2 mb-sm-0\">Primary</Button>{' '}\n  <Button variant=\"outline-primary\" className=\"mb-2 mb-sm-0\">Outline Primary</Button>{' '}\n  <Button variant=\"tertiary\" className=\"mb-2 mb-sm-0\">Tertiary</Button>{' '}\n</>\n`)), mdx(\"h2\", {\n    \"id\": \"core-buttons-inverse-pallete\"\n  }, `Core Buttons (Inverse Pallete)`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#core-buttons-inverse-pallete\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div className=\"bg-dark-700 p-4\">\n  <Button variant=\"inverse-brand\" className=\"mb-2 mb-sm-0\">Brand</Button>{' '}\n  <Button variant=\"inverse-outline-brand\" className=\"mb-2 mb-sm-0\">Outline Brand</Button>{' '}\n  <Button variant=\"inverse-primary\" className=\"mb-2 mb-sm-0\">Primary</Button>{' '}\n  <Button variant=\"inverse-outline-primary\" className=\"mb-2 mb-sm-0\">Outline Primary</Button>{' '}\n  <Button variant=\"inverse-tertiary\" className=\"mb-2 mb-sm-0\">Tertiary</Button>{' '}\n</div>\n`)), mdx(\"h2\", {\n    \"id\": \"utility-buttons\"\n  }, `Utility Buttons`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#utility-buttons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <div className=\"mb-2\">\n    <Button variant=\"success\" className=\"mb-2 mb-sm-0\">Success</Button>{' '}\n    <Button variant=\"danger\" className=\"mb-2 mb-sm-0\">Danger</Button>{' '}\n    <Button variant=\"outline-success\" className=\"mb-2 mb-sm-0\">Success</Button>{' '}\n    <Button variant=\"outline-danger\" className=\"mb-2 mb-sm-0\">Danger</Button>{' '}\n  </div>\n  <div className=\"mb-2\">\n    <Button variant=\"link\" className=\"mb-2 mb-sm-0\">Link</Button>{' '}\n    <Button variant=\"light\" className=\"mb-2 mb-sm-0\">Light</Button>{' '} \n    <Button variant=\"dark\" className=\"mb-2 mb-sm-0\">Dark</Button>{' '}\n    <Button variant=\"outline-light\" className=\"mb-2 mb-sm-0\">Light</Button>{' '}\n    <Button variant=\"outline-dark\" className=\"mb-2 mb-sm-0\">Dark</Button>\n  </div>\n</>\n`)), mdx(\"h2\", {\n    \"id\": \"size\"\n  }, `Size`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#size\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <div className=\"mb-2\">\n    <Button variant=\"primary\" size=\"lg\" className=\"mb-2 mb-sm-0\">\n      Large button\n    </Button>{' '}\n    <Button variant=\"outline-primary\" size=\"lg\" className=\"mb-2 mb-sm-0\">\n      Large button\n    </Button>\n  </div>\n  <div className=\"mb-2\">\n    <Button variant=\"primary\" size=\"sm\" className=\"mb-2 mb-sm-0\">\n      Small button\n    </Button>{' '}\n    <Button variant=\"outline-primary\" size=\"sm\" className=\"mb-2 mb-sm-0\">\n      Small button\n    </Button>\n  </div>\n  <div className=\"mb-2\">\n    <Button variant=\"link\" size=\"inline\" className=\"mb-2 mb-sm-0\">Inline button</Button>\n    <Button variant=\"link\" size=\"inline\" className=\"mb-2 mb-sm-0\">Inline button</Button>\n  </div>\n</>\n`)), mdx(\"h3\", {\n    \"id\": \"when-to-use-the-inline-size\"\n  }, `When to use the inline size`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#when-to-use-the-inline-size\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Use inline size buttons for when a button sits with a line of text.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <p>\n    <span className=\"mr-1\">2 items selected.</span>\n    <Button variant=\"link\" size=\"inline\" className=\"mr-1\">Select all</Button>\n    <Button variant=\"link\" size=\"inline\">Clear</Button>\n  </p>\n</>\n`)), mdx(\"h2\", {\n    \"id\": \"block-buttons\"\n  }, `Block Buttons`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#block-buttons\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Button variant=\"primary\" size=\"lg\" block>\n    Block level button\n  </Button>\n  <Button variant=\"secondary\" size=\"lg\" block>\n    Block level button\n  </Button>\n</>\n`)), mdx(\"h3\", {\n    \"id\": \"disabled\"\n  }, `Disabled`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#disabled\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Button variant=\"primary\" disabled>Primary disabled</Button>\n  <Button variant=\"secondary\" disabled>Secondary disabled</Button>\n  <Button as=\"a\" href=\"https://edx.org\" disabled>Link disabled</Button>\n</>\n`)), mdx(\"p\", null, `For link to be `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `disabled`), `, it must have href defined with some value.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Button as='a' disabled>No href</Button>\n  <Button as='a' href='' disabled>Empty string href</Button>\n</>\n`)), mdx(\"h3\", {\n    \"id\": \"with-icons-before-or-after\"\n  }, `With Icons before or after`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-icons-before-or-after\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Button variant=\"brand\" iconBefore={ArrowBack} className=\"mb-2 mb-sm-0\">\n    Brand\n  </Button>{' '}\n  <Button variant=\"outline-brand\" iconAfter={ArrowDropDown} className=\"mb-2 mb-sm-0\">\n    Outline Brand\n  </Button>{' '}\n  <Button variant=\"primary\" iconBefore={Remove} iconAfter={Add} className=\"mb-2 mb-sm-0\">\n    Primary\n  </Button>{' '}\n  <Button variant=\"outline-primary\" iconBefore={Highlight} className=\"mb-2 mb-sm-0\">\n    Outline Primary\n  </Button>{' '}\n  <Button variant=\"tertiary\" iconAfter={Add} className=\"mb-2 mb-sm-0\">\n    Tertiary\n  </Button>{' '}\n</>\n`)), mdx(\"h3\", {\n    \"id\": \"with-a-spinner\"\n  }, `With a Spinner`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-a-spinner\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Button variant=\"primary\" className=\"mb-2 mr-2 mb-sm-0\" aria-label=\"Loading some stuff\">\n    <Spinner animation=\"border\" />\n  </Button>\n  <Button variant=\"brand\" className=\"mb-2 mr-2 mb-sm-0\" aria-label=\"Loading some stuff\">\n    <Spinner animation=\"border\" />\n  </Button>\n  <Button variant=\"outline-primary\" className=\"mb-2 mr-2 mb-sm-0\" aria-label=\"Loading some stuff\">\n    <Spinner animation=\"border\" />\n  </Button>\n  <Button variant=\"outline-brand\" className=\"mb-2 mr-2 mb-sm-0\" aria-label=\"Loading some stuff\">\n    <Spinner animation=\"border\" />\n  </Button>\n  <Button variant=\"inverse-primary\" className=\"mb-2 mr-2 mb-sm-0\" aria-label=\"Loading some stuff\">\n    <Spinner animation=\"border\" />\n  </Button>\n  <Button variant=\"inverse-brand\" className=\"mb-2 mr-2 mb-sm-0\" aria-label=\"Loading some stuff\">\n    <Spinner animation=\"border\" />\n  </Button>\n</>\n`)), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"buttondeprecated\"\n  }, `Button/Deprecated`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#buttondeprecated\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"h3\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Button.Deprecated className=\"btn-primary\">Hello World!</Button.Deprecated>\n`)), mdx(\"h3\", {\n    \"id\": \"color-variants\"\n  }, `Color Variants`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#color-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div>\n  <Button.Deprecated className=\"btn-primary\">Primary</Button.Deprecated>\n  <Button.Deprecated className=\"btn-success\">Success</Button.Deprecated>\n  <Button.Deprecated className=\"btn-danger\">Danger</Button.Deprecated>\n  <Button.Deprecated className=\"btn-light\">Light</Button.Deprecated>\n  <Button.Deprecated className=\"btn-dark\">Dark</Button.Deprecated>\n</div>\n`)), mdx(\"h3\", {\n    \"id\": \"outline-variants\"\n  }, `Outline Variants`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#outline-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div>\n  <Button.Deprecated className=\"btn-outline-primary\">Primary</Button.Deprecated>\n  <Button.Deprecated className=\"btn-outline-success\">Success</Button.Deprecated>\n  <Button.Deprecated className=\"btn-outline-danger\">Danger</Button.Deprecated>\n</div>\n`)), mdx(\"h3\", {\n    \"id\": \"inverse-variants\"\n  }, `Inverse Variants`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#inverse-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div className=\"bg-gray-700 p-3\">\n  <Button.Deprecated className=\"btn-inverse-primary\">Primary</Button.Deprecated>\n  <Button.Deprecated className=\"btn-inverse-success\">Success</Button.Deprecated>\n  <Button.Deprecated className=\"btn-inverse-danger\">Danger</Button.Deprecated>\n</div>\n`)), mdx(\"h3\", {\n    \"id\": \"link-variant\"\n  }, `Link Variant`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#link-variant\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div className=\"bg-gray-200 p-3\">\n  <Button.Deprecated className=\"btn-link\">Link with button container</Button.Deprecated>\n  <br />\n  <Button.Deprecated className=\"btn-link px-0\">Button with no horizontal padding</Button.Deprecated>\n</div>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Button","status":"Stable","notes":"TODO: Remove subcomponent of deprecated implementation soon\n","components":["Button"]},"tableOfContents":{"items":[{"url":"#core-buttons","title":"Core Buttons"},{"url":"#core-buttons-inverse-pallete","title":"Core Buttons (Inverse Pallete)"},{"url":"#utility-buttons","title":"Utility Buttons"},{"url":"#size","title":"Size","items":[{"url":"#when-to-use-the-inline-size","title":"When to use the inline size"}]},{"url":"#block-buttons","title":"Block Buttons","items":[{"url":"#disabled","title":"Disabled"},{"url":"#with-icons-before-or-after","title":"With Icons before or after"},{"url":"#with-a-spinner","title":"With a Spinner"}]},{"url":"#buttondeprecated","title":"Button/Deprecated","items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#color-variants","title":"Color Variants"},{"url":"#outline-variants","title":"Outline Variants"},{"url":"#inverse-variants","title":"Inverse Variants"},{"url":"#link-variant","title":"Link Variant"}]}]}},"components":{"nodes":[{"displayName":"Button","props":[{"defaultValue":{"value":"undefined"},"name":"buttonType","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Used to determine the type of button to be rendered.  See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable button types. For example, `buttonType=\"light\"`. The default is `undefined`.","doclets":[],"description":{"id":"887dbd9b-98c8-5c4e-92a5-0cd12d2892ce","text":"Used to determine the type of button to be rendered.  See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable button types. For example, `buttonType=\"light\"`. The default is `undefined`.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Used to determine the type of button to be rendered.  See `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/4.0/components/buttons/\"\n  }, `Bootstrap's buttons documentation`), ` for a list of applicable button types. For example, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `buttonType=\"light\"`), `. The default is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `undefined`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies Bootstrap class names to apply to the button. See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable class names. The default is an empty array.","doclets":[],"description":{"id":"49b7ea98-cc8b-543c-b232-196471dedf92","text":"Specifies Bootstrap class names to apply to the button. See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable class names. The default is an empty array.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies Bootstrap class names to apply to the button. See `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/4.0/components/buttons/\"\n  }, `Bootstrap's buttons documentation`), ` for a list of applicable class names. The default is an empty array.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"Specifies the text that is displayed within the button.","doclets":[],"description":{"id":"9bed1b26-6561-5027-8296-1b641d781201","text":"Specifies the text that is displayed within the button.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies the text that is displayed within the button.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"inputRef","type":{"name":"union","raw":null,"value":[{"name":"func"},{"name":"shape","value":{"current":{"name":"instanceOf","value":"PropTypes.element","required":false}}}]},"required":false,"docblock":"A function that defines a reference for the button. An example `inputRef` from the calling component could look something like: `inputRef={(input) => { this.button = input; }}`. The default is an empty function.","doclets":[],"description":{"id":"86076af9-25b5-5ccd-baed-879eeae72da3","text":"A function that defines a reference for the button. An example `inputRef` from the calling component could look something like: `inputRef={(input) => { this.button = input; }}`. The default is an empty function.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A function that defines a reference for the button. An example `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `inputRef`), ` from the calling component could look something like: `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `inputRef={(input) => { this.button = input; }}`), `. The default is an empty function.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isClose","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Used to determine if the button is a \"Close\" style button to leverage bootstrap styling. Example use case is with the Status Alert [dismiss button](https://getbootstrap.com/docs/4.0/components/alerts/#dismissing). The default is false.","doclets":[],"description":{"id":"10b6157a-2e22-5b0c-9953-6c004e910408","text":"Used to determine if the button is a \"Close\" style button to leverage bootstrap styling. Example use case is with the Status Alert [dismiss button](https://getbootstrap.com/docs/4.0/components/alerts/#dismissing). The default is false.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Used to determine if the button is a \"Close\" style button to leverage bootstrap styling. Example use case is with the Status Alert `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/4.0/components/alerts/#dismissing\"\n  }, `dismiss button`), `. The default is false.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onBlur","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A function that would specify what the button should do when the `onBlur` event is triggered. For example, the button could change in color or `buttonType` when focus is changed. The default is an empty function.","doclets":[],"description":{"id":"eca727fa-634f-5993-83b0-d29b3291d83e","text":"A function that would specify what the button should do when the `onBlur` event is triggered. For example, the button could change in color or `buttonType` when focus is changed. The default is an empty function.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A function that would specify what the button should do when the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `onBlur`), ` event is triggered. For example, the button could change in color or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `buttonType`), ` when focus is changed. The default is an empty function.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onClick","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A function that would specify what the button should do when the `onClick` event is triggered. For example, the button could launch a `Modal`. The default is an empty function.","doclets":[],"description":{"id":"e009fe31-0ad2-5dcc-a8b9-fe48ea2421f3","text":"A function that would specify what the button should do when the `onClick` event is triggered. For example, the button could launch a `Modal`. The default is an empty function.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A function that would specify what the button should do when the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `onClick`), ` event is triggered. For example, the button could launch a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Modal`), `. The default is an empty function.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onKeyDown","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A function that would specify what the button should do when the `onKeyDown` event is triggered.  For example, this could handle using the `Escape` key to trigger the button's action. The default is an empty function.","doclets":[],"description":{"id":"bff6c18d-7139-56e3-9bd5-a803103957e6","text":"A function that would specify what the button should do when the `onKeyDown` event is triggered.  For example, this could handle using the `Escape` key to trigger the button's action. The default is an empty function.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A function that would specify what the button should do when the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `onKeyDown`), ` event is triggered.  For example, this could handle using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Escape`), ` key to trigger the button's action. The default is an empty function.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'button'"},"name":"type","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Used to set the `type` attribute on the `button` tag.  The default type is `button`.","doclets":[],"description":{"id":"c3354a3f-ba53-54bd-9971-286b93493751","text":"Used to set the `type` attribute on the `button` tag.  The default type is `button`.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Used to set the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `type`), ` attribute on the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `button`), ` tag.  The default type is `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `button`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"cec0d289-d6b1-57fa-986b-f971ddd79ab5","components":["Button"],"scssVariablesData":{"openedx":"$btn-padding-y:                $input-btn-padding-y !default;\n$btn-padding-x:                $input-btn-padding-x !default;\n$btn-font-family:              $input-btn-font-family !default;\n$btn-font-size:                $input-btn-font-size !default;\n$btn-line-height:              $input-btn-line-height !default;\n$btn-padding-y-sm:             $input-btn-padding-y-sm !default;\n$btn-padding-x-sm:             $input-btn-padding-x-sm !default;\n$btn-font-size-sm:             $input-btn-font-size-sm !default;\n$btn-line-height-sm:           $input-btn-line-height-sm !default;\n$btn-padding-y-lg:             $input-btn-padding-y-lg !default;\n$btn-padding-x-lg:             $input-btn-padding-x-lg !default;\n$btn-font-size-lg:             $input-btn-font-size-lg !default;\n$btn-line-height-lg:           $input-btn-line-height-lg !default;\n$btn-border-width:             $input-btn-border-width !default;\n$btn-font-weight:              $font-weight-normal !default;\n$btn-box-shadow:               inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075) !default;\n$btn-focus-width:              2px !default;\n$btn-focus-gap:                1px !default;\n$btn-focus-box-shadow:         $input-btn-focus-box-shadow !default;\n$btn-disabled-opacity:         .65 !default;\n$btn-active-box-shadow:        none;\n$btn-tertiary-color:           $gray-700 !default;\n$btn-tertiary-bg:              transparent !default;\n$btn-tertiary-hover-bg:        $light-500 !default;\n$btn-tertiary-active-bg:       $light-500 !default;\n$btn-inverse-tertiary-color:           $white !default;\n$btn-inverse-tertiary-bg:              transparent !default;\n$btn-inverse-tertiary-hover-bg:        rgba(255, 255, 255, .1) !default;\n$btn-inverse-tertiary-active-bg:       rgba(255, 255, 255, .1) !default;\n$btn-link-disabled-color:      theme-color(\"gray\", \"light-text\") !default;\n$btn-block-spacing-y:          .5rem !default;\n$btn-border-radius:            $border-radius !default;\n$btn-border-radius-lg:         $border-radius-lg !default;\n$btn-border-radius-sm:         $border-radius-sm !default;\n$btn-transition:  null;\n$btn-focus-border-gap:  $btn-focus-width + $btn-focus-gap !default;\n$btn-focus-distance-to-border:  $btn-focus-border-gap + $btn-border-width !default;\n$btn-focus-border-radius:  calc(#{$btn-border-radius} + #{$btn-focus-border-gap}) !default;\n","edxorg":"$btn-padding-y:                $input-btn-padding-y !default;\n$btn-padding-x:                $input-btn-padding-x !default;\n$btn-font-family:              $input-btn-font-family !default;\n$btn-font-size:                $input-btn-font-size !default;\n$btn-line-height:              $input-btn-line-height !default;\n$btn-padding-y-sm:             $input-btn-padding-y-sm !default;\n$btn-padding-x-sm:             $input-btn-padding-x-sm !default;\n$btn-font-size-sm:             $input-btn-font-size-sm !default;\n$btn-line-height-sm:           $input-btn-line-height-sm !default;\n$btn-padding-y-lg:             $input-btn-padding-y-lg !default;\n$btn-padding-x-lg:             $input-btn-padding-x-lg !default;\n$btn-font-size-lg:             $input-btn-font-size-lg !default;\n$btn-line-height-lg:           $input-btn-line-height-lg !default;\n$btn-border-width:             $input-btn-border-width !default;\n$btn-font-weight:              500 !default;\n$btn-box-shadow:               none !default;\n$btn-focus-width:  2px;\n$btn-focus-gap:  2px;\n$btn-focus-box-shadow:         $input-btn-focus-box-shadow !default;\n$btn-disabled-opacity:         .4 !default;\n$btn-active-box-shadow:        none;\n$btn-tertiary-color:           $gray-700 !default;\n$btn-tertiary-bg:              transparent !default;\n$btn-tertiary-hover-bg:        $light-500 !default;\n$btn-tertiary-active-bg:       $light-500 !default;\n$btn-inverse-tertiary-color:           $white !default;\n$btn-inverse-tertiary-bg:              transparent !default;\n$btn-inverse-tertiary-hover-bg:        $primary-300 !default;\n$btn-inverse-tertiary-active-bg:       $primary-300 !default;\n$btn-link-disabled-color:      theme-color(\"gray\", \"light-text\") !default;\n$btn-block-spacing-y:          .5rem !default;\n$btn-border-radius:            0px !default;\n$btn-border-radius-lg:         0px !default;\n$btn-border-radius-sm:         0px !default;\n$btn-transition:  null;\n$btn-focus-border-gap:  $btn-focus-width + $btn-focus-gap !default;\n$btn-focus-distance-to-border:  $btn-focus-border-gap + $btn-border-width !default;\n$btn-focus-border-radius:  calc(#{$btn-border-radius} + #{$btn-focus-border-gap}) !default;\n"}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}