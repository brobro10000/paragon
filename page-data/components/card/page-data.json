{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/card/","result":{"data":{"mdx":{"id":"ae892722-ccd6-5117-bbe6-9890454ff042","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Card\",\n  \"type\": \"component\",\n  \"components\": [\"Card\", \"CardHeader\", \"CardGrid\", \"CardSection\", \"CardDivider\", \"CardFooter\", \"CardBody\", \"CardImageCap\", \"CardStatus\"],\n  \"categories\": [\"Content\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"Partially a pass-thru from react-bootstrap, with custom subcomponents.\\n\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` is a box of related content usually describing a single object. It can be composed of several subcomponents, we give full overview of those subcomponents below.`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` supports `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `vertical`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `horizontal`), ` orientation which is controlled by `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CardContext`), `, see examples below.`), mdx(\"p\", null, `This component uses a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` from react-bootstrap as a base component and extends it with additional subcomponents. `, mdx(\"br\", null), ` `, mdx(\"a\", {\n    href: \"https://react-bootstrap.github.io/components/cards/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, `See React-Bootstrap for additional documentation.`)), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <Card style={{ width: isExtraSmall ? \"100%\" : \"18rem\" }}>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n      />\n      <Card.Header\n        title=\"Card Title\"\n      />\n      <Card.Section>\n        This is a card section. It can contain anything but usually text, a list, or list of links. Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Footer>\n        <Button>Action 1</Button>\n      </Card.Footer>\n    </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"card-variants\"\n  }, `Card variants`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#card-variants\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `variant`), ` prop to use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` specific style variant.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [cardVariant, setCardVariant] = useState('light');\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <>\n      {/* start example form block */}\n      <ExamplePropsForm\n        inputs={[\n          { value: cardVariant, setValue: setCardVariant, options: ['light', 'dark', 'muted'], name: 'variant' },\n        ]}\n      />\n      {/* end example form block */}\n      \n      <Card style={{ width: isExtraSmall ? \"100%\" : \"18rem\" }} variant={cardVariant}>\n        <Card.ImageCap \n          src=\"https://picsum.photos/360/200/\"\n          srcAlt=\"Card image\"\n        />\n        <Card.Header title=\"Card Title\" />\n        <Card.Section>\n          This is a card section. It can contain anything but usually text, a list, or list of links. Multiple sections have a card divider between them.\n        </Card.Section>\n        <Card.Footer textElement=\"Course\">\n          <Button\n            variant={cardVariant === 'dark' ? 'inverse-primary' : 'primary'}\n          >\n            Action\n          </Button>\n        </Card.Footer>\n      </Card>\n    </>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"clickable-card\"\n  }, `Clickable card`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#clickable-card\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `You use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `isClickable`), ` prop to add additional `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `hover`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `focus`), ` styling to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <Card style={{ width: isExtraSmall ? \"100%\" : \"18rem\" }} isClickable>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n      />\n      <Card.Header\n        title=\"Card Title\"\n      />\n      <Card.Section>\n        This is a card section. It can contain anything but usually text, a list, or list of links. Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Footer>\n        <Button>Action 1</Button>\n      </Card.Footer>\n    </Card>\n)};\n`)), mdx(\"h2\", {\n    \"id\": \"as-link\"\n  }, `As link`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#as-link\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `You can also use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` as a link by wrapping it into appropriate component, note that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` will override default\nlink styling to make its content appear as a regular text.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <Hyperlink destination=\"https://www.edx.org\">\n      <Card style={{ width: isExtraSmall ? \"100%\" : \"18rem\" }} isClickable>\n        <Card.ImageCap\n          src=\"https://picsum.photos/360/200/\"\n          srcAlt=\"Card image\"\n        />\n        <Card.Header title=\"Card Title\"/>\n        <Card.Section>\n          This is a card section. It can contain anything but usually text, a list, or list of links. \n          Multiple sections have a card divider between them.\n        </Card.Section>\n        <Card.Footer>\n          <Button>Action 1</Button>\n        </Card.Footer>\n      </Card>\n    </Hyperlink>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"header\"\n  }, `Header`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#header\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `You may add a header by adding a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Header`), ` component.\nThis header displays a title, subtitle, and may contain actions.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div>\n  <Card className=\"mb-2\">\n    <Card.Header title=\"Title\" />\n  </Card>\n  <Card>\n    <Card.Header \n      title=\"Title\"\n      subtitle=\"Subtitle\"\n    />\n  </Card>\n</div>\n`)), mdx(\"h3\", {\n    \"id\": \"actions\"\n  }, `Actions`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#actions\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Header`), ` supports custom actions via the actions prop and renders them on the top right of the header.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <div>\n      <Card className=\"mb-2\">\n        <Card.Header\n          title=\"Title\"\n          subtitle=\"Subtitle\"\n          isStacked={!!isExtraSmall}\n          actions={\n            <ActionRow \n              isStacked={!!isExtraSmall}\n              style={{  marginBottom: isExtraSmall ? \".5rem\" : 0 }}\n            >\n              <Button variant=\"tertiary\">Action 1</Button>\n              <Button>Action 2</Button>\n            </ActionRow>\n          } \n        />\n      </Card>\n      <Card>\n        <Card.Header\n          title=\"Title\"\n          subtitle=\"Subtitle\"\n          actions={\n            <Dropdown>\n              <Dropdown.Toggle\n                id=\"dropdown-toggle-with-iconbutton\"\n                as={IconButton}\n                src={MoreVert}\n                iconAs={Icon}\n                variant=\"primary\"\n                alt=\"Actions dropdown\"\n              />\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n                <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n                <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          }\n        />\n      </Card>\n    </div>\n)}\n`)), mdx(\"h3\", {\n    \"id\": \"sizes\"\n  }, `Sizes`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#sizes\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Header`), ` supports two size variants, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"sm\"`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"md\"`), `.\nAdd `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `size=\"sm\"`), ` for smaller header content and actions.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Card>\n  <Card.Header\n    title=\"Title\"\n    subtitle=\"Subtitle\"\n    actions={\n      <ActionRow>\n        <Button>Action</Button>\n      </ActionRow>\n    }\n    size=\"sm\"\n  />\n</Card>\n`)), mdx(\"h2\", {\n    \"id\": \"section\"\n  }, `Section`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#section\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Section`), ` is the main block to display card content. Can include its own title and actions separate from other card components. Multiple sections have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Divider`), ` between them.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <Card>\n      <Card.Section \n        title=\"Section title\"\n        actions={\n          <ActionRow isStacked={!!isExtraSmall}>\n            <Button>Action 1</Button>\n            <Button>Action 2</Button>\n          </ActionRow>\n        }\n      >\n        This is a card section. It can contain anything but usually text, a list, or list of links. Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Divider />\n      <Card.Section \n        title=\"Section\"\n        actions={\n          <ActionRow isStacked={!!isExtraSmall}>\n            <Button>Action 1</Button>\n            <Button>Action 2</Button>\n          </ActionRow>\n        }\n      >\n        This is another section variant.\n      </Card.Section>\n      <Card.Divider />\n      <Card.Section>\n        This is a section without title or actions, just content.\n      </Card.Section>\n    </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"footer\"\n  }, `Footer`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#footer\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Footer`), ` is the bottom part of the card. Usually used to outline actions that can be taken on the card object.\nNote that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Footer`), ` has a separate `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `orientation`), ` prop which will override the value from `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CardContext`), `, this was implemented because there are some use cases where you would want to display `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` with horizontal orientation containing footer with vertical orientation.`), mdx(\"h3\", {\n    \"id\": \"vertical-variant\"\n  }, `Vertical variant`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#vertical-variant\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const footerLink = <a href='#link'>Footer text as a link</a>;\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <>\n      <Card>\n        <Card.Footer orientation={isExtraSmall ? \"horizontal\" : \"vertical\"}>\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n        <Card.Divider />\n        <Card.Footer \n          orientation={isExtraSmall ? \"horizontal\" : \"vertical\"} \n          textElement=\"Optional footer text to display\"\n        >\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n        <Card.Divider />\n        <Card.Footer\n          orientation={isExtraSmall ? \"horizontal\" : \"vertical\"} \n          textElement={footerLink}\n        >\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n      </Card>\n      <Card style={{ width: isExtraSmall ? \"100%\" : \"40%\" }}>\n        <Card.Footer textElement=\"Stacked vertical variant\" isStacked>\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n      </Card>\n    </>\n  )\n}\n`)), mdx(\"h3\", {\n    \"id\": \"horizontal-variant\"\n  }, `Horizontal variant`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#horizontal-variant\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n  \n  return (\n    <Card style={{ width: isExtraSmall ? \"100%\" : \"40%\" }}>\n    <Card.Footer orientation=\"horizontal\">\n      <Button>Action 1</Button>\n      <Button>Action 2</Button>\n    </Card.Footer>\n    <Card.Divider />\n    <Card.Footer orientation=\"horizontal\" textElement=\"Optional footer text to display\">\n      <Button>Action 1</Button>\n      <Button>Action 2</Button>\n    </Card.Footer>\n    <Card.Divider />\n    <Card.Footer orientation=\"horizontal\" textElement=\"Horizontal stacked variant\" isStacked>\n      <Button>Action 1</Button>\n      <Button>Action 2</Button>\n    </Card.Footer>\n  </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"with-image-cap\"\n  }, `With Image Cap`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-image-cap\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ImageCap`), ` is an image that sits on the top or the left edge of a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), `. Can contain an optional logo image.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `\n() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  return (\n    <Card style={{ width: isExtraSmall ? \"100%\" : \"40%\" }}>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n        logoSrc=\"https://via.placeholder.com/150\"\n        logoAlt=\"Card logo\"\n      />\n      <Card.Header\n        title=\"Title\"\n        subtitle=\"Subtitle\"\n      />\n      <Card.Section \n        title=\"Section title\"\n      >\n        This is a card section. It can contain anything but usually text, a list, or list of links. Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Footer>\n        <Button>Action 1</Button>\n      </Card.Footer>\n    </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"horizontal-variant-1\"\n  }, `Horizontal variant`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#horizontal-variant-1\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `When using horizontal variant Paragon provides additional component `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Body`), ` which acts as a wrapper for content you want to display between `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ImageCap`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Footer`), `. Use it if content contains multiple components.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `\n() => {\n  const isSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n  \n  return (\n    <>\n      <Card\n        className=\"mb-4\" \n        orientation={isSmall ? \"vertical\" : \"horizontal\"}\n      >\n        <Card.ImageCap\n          src=\"https://picsum.photos/360/200/\"\n          srcAlt=\"Card image\"\n          logoSrc=\"https://via.placeholder.com/150\"\n          logoAlt=\"Card logo\"\n        />\n        <Card.Body>\n          <Card.Header\n            title=\"Title\"\n            subtitle=\"Subtitle\"\n          />\n          <Card.Section \n            title=\"Section title\"\n          >\n            Here we want to display both Header and Section between ImageCap and Footer components, so we use Card.\n            Body to accomplish that. \n          </Card.Section>\n        </Card.Body>\n        <Card.Footer orientation={isExtraSmall ? \"horizontal\" : \"vertical\"}>\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n      </Card>\n      <Card className=\"mb-4\" orientation={isSmall ? \"vertical\" : \"horizontal\"}>\n        <Card.ImageCap\n          src=\"https://picsum.photos/360/200/\"\n          srcAlt=\"Card image\"\n          logoSrc=\"https://via.placeholder.com/150\"\n          logoAlt=\"Card logo\"\n        />\n        <Card.Section \n          title=\"Section title\"\n        >\n          In this Card we only want to display Section, therefore no need to use Card.Body wrapper.\n        </Card.Section>\n        <Card.Footer orientation={isExtraSmall ? \"horizontal\" : \"vertical\"}>\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n      </Card>\n      <Card orientation={isSmall ? \"vertical\" : \"horizontal\"}>\n        <Card.ImageCap\n          src=\"https://picsum.photos/360/200/\"\n          srcAlt=\"Card image\"\n          logoSrc=\"https://via.placeholder.com/150\"\n          logoAlt=\"Card logo\"\n        />\n        <Card.Body>\n          <Card.Header\n            title=\"Title\"\n          />\n          <Card.Section \n            title=\"Section title\"\n          >\n            This is a special case where we want to have Footer with vertical orientation in the Card with horizontal orientation.\n          </Card.Section>\n          <Card.Footer orientation={isExtraSmall ? \"horizontal\" : \"vertical\"} textElement=\"Some footer text\">\n            <Button>Action 1</Button>\n            <Button>Action 2</Button>\n          </Card.Footer>\n        </Card.Body>\n      </Card>\n    </>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"card-status\"\n  }, `Card status`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#card-status\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Note that in the example below, the content of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` is wrapped inside `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Body`), `. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `d-flex`), ` class is added for the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `horizontal`), ` orientation to achieve horizontal variant. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `flex-column`), ` class is added for the main `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` component.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [orientation, setOrientation] = useState('vertical');\n  const [variant, setVariant] = useState('warning');\n  \n  const handleChangeOrientation = (e) => setOrientation(e.target.value);\n  const handleChangeVariant = (e) => setVariant(e.target.value);\n  const isVertical = orientation === 'vertical';\n  \n  return (\n    <>\n      {/* start example form block */}\n      <ExamplePropsForm\n        inputs={[\n          { value: orientation, setValue: setOrientation, options: ['horizontal', 'vertical'], name: 'orientation' },\n          { value: variant, setValue: setVariant, options: ['primary', 'warning', 'danger', 'success'], name: 'status-variant' },\n        ]}\n      />\n      {/* end example form block */}\n      \n      <Card orientation={orientation} className={\\`flex-column \\${isVertical ? 'w-50' : ''}\\`}>\n        <Card.Header\n          title=\"Card title\"\n        />\n        <Card.Body className={!isVertical ? 'd-flex' : ''}>\n          <Card.Section\n            title=\"Section title\"\n          >\n            This is a wider card with supporting text below as a natural lead-in to\n            additional content. This card has even longer content than the first to\n            show that equal height action.\n          </Card.Section>\n          <Card.Footer className={!isVertical ? 'justify-content-end' : ''}>\n            <Button>Save</Button>\n            <Button variant=\"danger\">Remove</Button>\n          </Card.Footer>\n        </Card.Body>\n        \n        <Card.Status icon={Warning} variant={variant}>\n          Warning lorem ipsum dolor sit amet\n        </Card.Status>\n      </Card>\n    </>\n  );\n};\n`)), mdx(\"h2\", {\n    \"id\": \"card-content-block-empty\"\n  }, `Card Content Block Empty`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#card-content-block-empty\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"h3\", {\n    \"id\": \"with-image\"\n  }, `With image`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  return (\n    <Card style={{ width: isExtraSmall ? \"100%\" : \"25rem\" }}>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\" \n        srcAlt=\"Card image\"\n      />\n      <Card.Section className=\"text-center\">\n        <h2>Headline</h2>\n        <p>This is an optional text description.</p>\n        <Button variant=\"brand\">Action</Button>\n      </Card.Section>\n    </Card>\n)}\n`)), mdx(\"h3\", {\n    \"id\": \"without-image\"\n  }, `Without image`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#without-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `\n() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  return (\n    <Card style={{ width: isExtraSmall ? \"100%\" : \"25rem\" }}>\n      <Card.Section className=\"text-center\">\n        <h2>Headline</h2>\n        <p>This is an optional text description.</p>\n        <Button variant=\"brand\">Action</Button>\n      </Card.Section>\n    </Card>\n)}\n`)), mdx(\"h3\", {\n    \"id\": \"horizontal-variant-with-image\"\n  }, `Horizontal variant with image`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#horizontal-variant-with-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  return (\n    <Card orientation={isSmall ? \"vertical\" : \"horizontal\"}>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\" \n        srcAlt=\"Card image\"\n      />\n      <Card.Body>\n        <Card.Section>\n          <h2>Headline</h2>\n          <p>This is an optional text description.</p>\n        </Card.Section>\n      </Card.Body>\n      <Card.Footer className=\"justify-content-end\">\n        <Button variant=\"brand\">Action</Button>\n      </Card.Footer>\n    </Card>\n)}\n`)), mdx(\"h3\", {\n    \"id\": \"horizontal-variant-without-image\"\n  }, `Horizontal variant without image`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#horizontal-variant-without-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isSmall = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  return (\n    <Card orientation={isSmall ? \"vertical\" : \"horizontal\"}>\n      <Card.Section>\n        <h2>Headline</h2>\n        <p>This is an optional text description.</p>\n      </Card.Section>\n      <Card.Footer className=\"justify-content-end\">\n        <Button variant=\"brand\">Action</Button>\n      </Card.Footer>\n    </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"fallback-image\"\n  }, `Fallback Image`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#fallback-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"h3\", {\n    \"id\": \"with-fallback-custom-image\"\n  }, `With Fallback custom Image`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-fallback-custom-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `You can specify `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `fallbackSrc`), ` image to show in case your main `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `src`), ` fails to load.\nA fallback source is available for both the main `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ImageCap`), ` component image and the logo.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({maxWidth: breakpoints.small.maxWidth});\n\n  return (\n    <Card style={{width: isExtraSmall ? \"100%\" : \"40%\"}}>\n      <Card.ImageCap\n        src=\"fakeURL\"\n        fallbackSrc=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n        logoSrc=\"fakeURL\"\n        fallbackLogoSrc=\"https://www.edx.org/images/logos/edx-logo-elm.svg\"\n        logoAlt=\"Card logo\"\n      />\n      <Card.Header title=\"Title\" subtitle=\"Subtitle\" />\n      <Card.Section title=\"Section title\">\n        This is a card section. It can contain anything but usually text, a list, or list of links.\n        Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Footer>\n        <Button>Action 1</Button>\n      </Card.Footer>\n  </Card>\n)}\n`)), mdx(\"h3\", {\n    \"id\": \"with-default-fallback-image\"\n  }, `With default Fallback Image`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-default-fallback-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `The default fallback image will be displayed if `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `fallbackSrc`), ` is not specified.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({maxWidth: breakpoints.small.maxWidth});\n\n  return (\n    <Card style={{width: isExtraSmall ? \"100%\" : \"40%\"}}>\n      <Card.ImageCap \n        src=\"fakeURL\"\n        srcAlt=\"Card image\"\n        logoSrc=\"fakeURL\"\n        fallbackLogoSrc=\"https://www.edx.org/images/logos/edx-logo-elm.svg\"\n        logoAlt=\"Card logo\"\n      />\n      <Card.Header title=\"Title\" subtitle=\"Subtitle\" />\n      <Card.Section title=\"Section title\">\n        This is a card section. It can contain anything but usually text, a list, or list of links.\n        Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Footer>\n        <Button>Action 1</Button>\n      </Card.Footer>\n  </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"with-loading-state\"\n  }, `With loading state`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-loading-state\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"h3\", {\n    \"id\": \"vertical-variant-1\"\n  }, `Vertical variant`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#vertical-variant-1\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <Card isLoading style={{ width: isExtraSmall ? \"100%\" : \"18rem\" }}>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n      />\n      <Card.Header title=\"Card Title\" />\n      <Card.Section>\n        This is a card section. It can contain anything but usually text, a list, or list of links. Multiple sections have a card divider between them.\n      </Card.Section>\n      <Card.Footer>\n        <Button>Action 1</Button>\n      </Card.Footer>\n    </Card>\n)}\n`)), mdx(\"h3\", {\n    \"id\": \"horizontal-variant-2\"\n  }, `Horizontal variant`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#horizontal-variant-2\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n\n  return (\n    <Card isLoading orientation={isExtraSmall ? \"vertical\" : \"horizontal\"}>\n      <Card.ImageCap\n        skeletonHeight={isExtraSmall ? 140 : null}\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n        logoSrc=\"https://via.placeholder.com/150\"\n        logoAlt=\"Card logo\"\n      />\n      <Card.Body>\n        <Card.Header title=\"Title\" />\n        <Card.Section title=\"Section title\">\n          This is a special case where we want to have Footer with vertical \n          orientation in the Card with horizontal orientation.\n        </Card.Section>\n        <Card.Footer orientation=\"vertical\" textElement=\"Some footer text\">\n          <Button>Action 1</Button>\n          <Button>Action 2</Button>\n        </Card.Footer>\n      </Card.Body>\n    </Card>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"cardgrid\"\n  }, `CardGrid`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#cardgrid\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `This component displays a collection of Cards as a grid (with customizable responsive behavior), where\nall cards in a given row have equal height. Try shrinking the width of your browser to view the responsive\nbehavior.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<CardGrid\n  columnSizes={{\n    xs: 12,\n    lg: 6,\n    xl: 4,\n  }}\n>\n  <Card>\n    <Card.ImageCap\n      src=\"https://picsum.photos/360/200/\"\n      srcAlt=\"Card image\"\n    />\n    <Card.Header\n      title=\"Card title\"\n    />\n    <Card.Section \n      title=\"Section title\"\n    >\n      This is a wider card with supporting text below as a natural lead-in to \n      additional content. This card has even longer content than the first to \n      show that equal height action.\n    </Card.Section>\n    <Card.Footer textElement={<small className=\"text-muted\">Last updated 3 mins ago</small>} />\n  </Card>\n  <Card>\n    <Card.ImageCap\n      src=\"https://picsum.photos/360/200/\"\n      srcAlt=\"Card image\"\n    />\n    <Card.Header\n      title=\"Card title\"\n    />\n    <Card.Section \n      title=\"Section title\"\n    >\n      This is a wider card with supporting text below as a natural lead-in to \n      additional content. This content is a little bit longer.\n    </Card.Section>\n    <Card.Footer textElement={<small className=\"text-muted\">Last updated 3 mins ago</small>} />\n  </Card>\n  <Card>\n    <Card.ImageCap\n      src=\"https://picsum.photos/360/200/\"\n      srcAlt=\"Card image\"\n    />\n    <Card.Header\n      title=\"Card title\"\n    />\n    <Card.Section \n      title=\"Section title\"\n    >\n      This is a wider card with supporting text below as a natural lead-in to \n      additional content. This card has even longer content than the first to \n      show that equal height action.\n    </Card.Section>\n    <Card.Footer textElement={<small className=\"text-muted\">Last updated 3 mins ago</small>} />\n  </Card>\n  <Card>\n    <Card.ImageCap\n      src=\"https://picsum.photos/360/200/\"\n      srcAlt=\"Card image\"\n    />\n    <Card.Header\n      title=\"Card title\"\n    />\n    <Card.Section \n      title=\"Section title\"\n    >\n      This is a wider card with supporting text below as a natural lead-in to \n      additional content. This card has even longer content than the first to \n      show that equal height action.\n    </Card.Section>\n    <Card.Footer textElement={<small className=\"text-muted\">Last updated 3 mins ago</small>} />\n  </Card>\n  <Card>\n    <Card.ImageCap\n      src=\"https://picsum.photos/360/200/\"\n      srcAlt=\"Card image\"\n    />\n    <Card.Header\n      title=\"Card title\"\n    />\n    <Card.Section \n      title=\"Section title\"\n    >\n      This is a wider card with supporting text below as a natural lead-in to \n      additional content. This content is a little bit longer.\n    </Card.Section>\n    <Card.Footer textElement={<small className=\"text-muted\">Last updated 3 mins ago</small>} />\n  </Card>\n  <Card>\n    <Card.ImageCap\n      src=\"https://picsum.photos/360/200/\"\n      srcAlt=\"Card image\"\n    />\n    <Card.Header\n      title=\"Card title\"\n    />\n    <Card.Section \n      title=\"Section title\"\n    >\n      This is a wider card with supporting text below as a natural lead-in to \n      additional content. This card has even longer content than the first to \n      show that equal height action.\n    </Card.Section>\n    <Card.Footer textElement={<small className=\"text-muted\">Last updated 3 mins ago</small>} />\n  </Card>\n</CardGrid>\n`)), mdx(\"h2\", {\n    \"id\": \"carddeck\"\n  }, `CardDeck`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#carddeck\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Displays child `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` components in a horizontal row with equal height and width, with an appropriate gutter between cards. The width of each child `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` component is determined by the (optional) `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `columnSizes`), ` prop. If any child `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` components overflow beyond the parent's width, they will be hidden but accessible via scrolling horizontally or keyboard navigation.`), mdx(\"p\", null, `For accessibility, if the child `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` components are interactive (e.g., `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `isClickable`), `), pass the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `hasInteractiveChildren`), ` prop so the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CardDeck`), ` itself isn't focusable.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [hasInteractiveChildren, setHasInteractiveChildren] = useState('false');\n\n  const CardComponent = () => (\n    <Card isClickable={hasInteractiveChildren === 'true'}>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n      />\n      <Card.Header title=\"Card title\" />\n      <Card.Section  title=\"Section title\">\n        <HipsterIpsum numShortParagraphs={1} />\n      </Card.Section>\n    </Card>\n  );\n\n  return (\n    <>\n      {/* start example form block */}\n      <ExamplePropsForm\n        inputs={[\n          {\n            value: hasInteractiveChildren,\n            setValue: setHasInteractiveChildren,\n            options: ['true', 'false'],\n            name: 'hasInteractiveChildren',\n          },\n        ]}\n      />\n      {/* end example form block */}\n\n      <CardDeck hasInteractiveChildren={hasInteractiveChildren === 'true'}>\n        <CardComponent />\n        <CardComponent />\n        <CardComponent />\n        <CardComponent />\n        <CardComponent />\n      </CardDeck>\n    </>\n  );\n}\n`)), mdx(\"h3\", {\n    \"id\": \"carddeckdeprecated\"\n  }, `CardDeck.Deprecated`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#carddeckdeprecated\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Gives any child `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` components equal height with an appropriate gutter between cards. Each child `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` component's width will be adjusted (e.g., become more narrow) to ensure all `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` components fit within its parent's width.`), mdx(\"p\", null, `Note: This component is a pass-thru from `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `react-bootstrap`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const CardComponent = () => (\n    <Card>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n      />\n      <Card.Header title=\"Card title\" />\n      <Card.Section title=\"Section title\">\n        <HipsterIpsum numShortParagraphs={1} />\n      </Card.Section>\n    </Card>\n  );\n\n  return (\n    <CardDeck.Deprecated>\n      <CardComponent />\n      <CardComponent />\n      <CardComponent />\n    </CardDeck.Deprecated>\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"cardcarousel\"\n  }, `CardCarousel`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#cardcarousel\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Extends `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `CardDeck`), ` to support navigating between any overflow `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` components via left and right `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButton`), ` components as a scrollable carousel.`), mdx(\"p\", null, `Includes support for an optional `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `title`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `subtitle`), `. You may rely on the default styles for the titles (e.g., if passing strings) or alternatively you may also pass custom HTML and JSX.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [canScrollHorizontal, setCanScrollHorizontal] = useState('true');\n  const [disableOpacityMasks, setDisableOpacityMasks] = useState('false');\n  const [hasOverflowCards, setHasOverflowCards] = useState('true');\n\n  const CardComponent = () => (\n    <Card isClickable>\n      <Card.ImageCap\n        src=\"https://picsum.photos/360/200/\"\n        srcAlt=\"Card image\"\n      />\n      <Card.Header title=\"Card title\" />\n      <Card.Section  title=\"Section title\">\n        <HipsterIpsum numShortParagraphs={1} />\n      </Card.Section>\n    </Card>\n  );\n\n  const cardItems = useMemo(() => {\n    if (hasOverflowCards === 'true') {\n      return Array.from({ length: 8 }).map(() => <CardComponent key={uuidv4()} />);\n    }\n    return Array.from({ length: 2 }).map(() => <CardComponent key={uuidv4()} />);\n  }, [hasOverflowCards]);\n\n  return (\n    <>\n      {/* start example form block */}\n      <ExamplePropsForm\n        inputs={[\n          {\n            value: canScrollHorizontal,\n            setValue: setCanScrollHorizontal,\n            options: ['true', 'false'],\n            name: 'canScrollHorizontal',\n          },\n          {\n            value: disableOpacityMasks,\n            setValue: setDisableOpacityMasks,\n            options: ['true', 'false'],\n            name: 'disableOpacityMasks',\n          },\n          {\n            value: hasOverflowCards,\n            setValue: setHasOverflowCards,\n            options: ['true', 'false'],\n            name: 'hasOverflowCards',\n          }\n        ]}\n      />\n      {/* end example form block */}\n\n      <CardCarousel\n        ariaLabel=\"example card carousel\"\n        title={<h3>Recommended for you</h3>}\n        subtitle=\"The following content was picked just for you.\"\n        canScrollHorizontal={canScrollHorizontal === 'true'}\n        disableOpacityMasks={disableOpacityMasks === 'true'}\n        onScrollPrevious={() => { console.log('onScrollPrevious'); } }\n        onScrollNext={() => { console.log('onScrollNext'); } }\n      >\n        {cardItems}\n      </CardCarousel>\n    </>\n  );\n}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Card","status":"Stable","notes":"Partially a pass-thru from react-bootstrap, with custom subcomponents.\n","components":["Card","CardHeader","CardGrid","CardSection","CardDivider","CardFooter","CardBody","CardImageCap","CardStatus"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#card-variants","title":"Card variants"},{"url":"#clickable-card","title":"Clickable card"},{"url":"#as-link","title":"As link"},{"url":"#header","title":"Header","items":[{"url":"#actions","title":"Actions"},{"url":"#sizes","title":"Sizes"}]},{"url":"#section","title":"Section"},{"url":"#footer","title":"Footer","items":[{"url":"#vertical-variant","title":"Vertical variant"},{"url":"#horizontal-variant","title":"Horizontal variant"}]},{"url":"#with-image-cap","title":"With Image Cap"},{"url":"#horizontal-variant-1","title":"Horizontal variant"},{"url":"#card-status","title":"Card status"},{"url":"#card-content-block-empty","title":"Card Content Block Empty","items":[{"url":"#with-image","title":"With image"},{"url":"#without-image","title":"Without image"},{"url":"#horizontal-variant-with-image","title":"Horizontal variant with image"},{"url":"#horizontal-variant-without-image","title":"Horizontal variant without image"}]},{"url":"#fallback-image","title":"Fallback Image","items":[{"url":"#with-fallback-custom-image","title":"With Fallback custom Image"},{"url":"#with-default-fallback-image","title":"With default Fallback Image"}]},{"url":"#with-loading-state","title":"With loading state","items":[{"url":"#vertical-variant-1","title":"Vertical variant"},{"url":"#horizontal-variant-2","title":"Horizontal variant"}]},{"url":"#cardgrid","title":"CardGrid"},{"url":"#carddeck","title":"CardDeck","items":[{"url":"#carddeckdeprecated","title":"CardDeck.Deprecated"}]},{"url":"#cardcarousel","title":"CardCarousel"}]}},"components":{"nodes":[{"displayName":"CardBody","props":[{"defaultValue":{"value":"undefined"},"name":"children","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Specifies the content of the component.","doclets":[],"description":{"id":"e0dd51d8-1a71-5beb-90ea-858856dc4010","text":"Specifies the content of the component.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies the content of the component.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"The class to append to the base element.","doclets":[],"description":{"id":"3457147c-1aa9-5671-82e5-c2c3b69b8ff1","text":"The class to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The class to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardDivider","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies class name to append to the base element.","doclets":[],"description":{"id":"d5df106a-2367-5b81-a6b2-bf93720953e0","text":"Specifies class name to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies class name to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardFooter","props":[{"defaultValue":{"value":"null"},"name":"children","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Specifies contents of the component.","doclets":[],"description":{"id":"a5493750-dd69-5283-a929-fd9b38bfc4f2","text":"Specifies contents of the component.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies contents of the component.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies class name to append to the base element.","doclets":[],"description":{"id":"cd509c94-9afb-5ddb-9505-bd5252506313","text":"Specifies class name to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies class name to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"textElement","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Optional node to display near actions. Should be either a plain text or an element containing text (e.g. link).","doclets":[],"description":{"id":"7a8b7794-d95e-544f-b9fe-b84b183c0061","text":"Optional node to display near actions. Should be either a plain text or an element containing text (e.g. link).","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Optional node to display near actions. Should be either a plain text or an element containing text (e.g. link).`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isStacked","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Specifies whether to use stacked variant.","doclets":[],"description":{"id":"f02984d8-9aaf-526d-a254-90e716698ee1","text":"Specifies whether to use stacked variant.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies whether to use stacked variant.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"orientation","type":{"name":"enum","raw":null,"value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"docblock":"Specifies which orientation to use. This prop will override context value if provided.","doclets":[],"description":{"id":"d0209153-e929-5773-b624-d756736be9be","text":"Specifies which orientation to use. This prop will override context value if provided.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies which orientation to use. This prop will override context value if provided.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"18"},"name":"skeletonHeight","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies height of skeleton in loading state.","doclets":[],"description":{"id":"f7585e79-73bf-5c92-bd9f-6115183e1609","text":"Specifies height of skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies height of skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"skeletonWidth","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies width of skeleton in loading state.","doclets":[],"description":{"id":"87268f8d-d3bd-5cdb-a077-ef5208c23a29","text":"Specifies width of skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies width of skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardGrid","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"The class name for the CardGrid component","doclets":[],"description":{"id":"86d28658-166f-5863-ab97-a3e59360ca9f","text":"The class name for the CardGrid component","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The class name for the CardGrid component`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"The Card components to organize into a responsive grid","doclets":[],"description":{"id":"9b576414-a6f7-52d0-98b7-628ade3d2875","text":"The Card components to organize into a responsive grid","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The Card components to organize into a responsive grid`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"{\n  sm: 12,\n  lg: 6,\n  xl: 4,\n}"},"name":"columnSizes","type":{"name":"shape","raw":null,"value":{"xs":{"name":"number","required":false},"sm":{"name":"number","required":false},"md":{"name":"number","required":false},"lg":{"name":"number","required":false},"xl":{"name":"number","required":false}}},"required":false,"docblock":"An object containing the desired column size at each breakpoint, following a similar\nprops API as ``react-bootstrap/Col``","doclets":[],"description":{"id":"098dd93d-36b1-57ae-8508-d58501032625","text":"An object containing the desired column size at each breakpoint, following a similar\nprops API as ``react-bootstrap/Col``","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `An object containing the desired column size at each breakpoint, following a similar\nprops API as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `react-bootstrap/Col`)));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardHeader","props":[{"defaultValue":{"value":"null"},"name":"actions","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Optional node to render on the top right of the card header,\n i.e. ActionRow or a DropdownMenu.","doclets":[],"description":{"id":"0d10bd48-0aea-5226-8da1-500cfa30b3d1","text":"Optional node to render on the top right of the card header,\n i.e. ActionRow or a DropdownMenu.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Optional node to render on the top right of the card header,\ni.e. ActionRow or a DropdownMenu.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"null"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"The class name for the CardHeader component","doclets":[],"description":{"id":"fca8fbe6-3232-5fc6-bc91-f742b613eb17","text":"The class name for the CardHeader component","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The class name for the CardHeader component`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"null"},"name":"title","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"The title for the CardHeader component","doclets":[],"description":{"id":"b6f82303-3602-5ac1-8482-4f3185aea4d5","text":"The title for the CardHeader component","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The title for the CardHeader component`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'md'"},"name":"size","type":{"name":"enum","raw":null,"value":[{"value":"'sm'","computed":false},{"value":"'md'","computed":false}]},"required":false,"docblock":"The size of the CardHeader component","doclets":[],"description":{"id":"3198c9fa-61b6-5e03-852f-f86bb0d2dea6","text":"The size of the CardHeader component","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The size of the CardHeader component`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"null"},"name":"subtitle","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"The subtitle of the CardHeader component","doclets":[],"description":{"id":"9b329d1f-a551-5d7c-8a98-c49306a200ca","text":"The subtitle of the CardHeader component","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The subtitle of the CardHeader component`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"20"},"name":"skeletonHeight","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies height of skeleton in loading state.","doclets":[],"description":{"id":"8aa2f584-97a7-5697-8a7d-64ffae9493c3","text":"Specifies height of skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies height of skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"null"},"name":"skeletonWidth","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies width of  skeleton in loading state.","doclets":[],"description":{"id":"500c9460-0709-5f2b-9e63-bd41eab31582","text":"Specifies width of  skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies width of  skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardImageCap","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies class name to append to the base element.","doclets":[],"description":{"id":"e83e8bd1-15f4-5000-a150-197b75216762","text":"Specifies class name to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies class name to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"src","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies image src.","doclets":[],"description":{"id":"69b47933-1020-54ad-8417-c2c0170f2a13","text":"Specifies image src.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies image src.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"cardSrcFallbackImg"},"name":"fallbackSrc","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies fallback image src.","doclets":[],"description":{"id":"e1d10468-215d-56d0-a3a1-844b7196c283","text":"Specifies fallback image src.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies fallback image src.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"srcAlt","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies image alt text.","doclets":[],"description":{"id":"2d6b56a2-2ad8-5e12-bf08-8243da0e6a3a","text":"Specifies image alt text.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies image alt text.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"logoSrc","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies logo src to put on top of the image.","doclets":[],"description":{"id":"13bd4e27-c766-5ba3-864a-873e4995447d","text":"Specifies logo src to put on top of the image.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies logo src to put on top of the image.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"fallbackLogoSrc","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies fallback image logo src.","doclets":[],"description":{"id":"cf2bdd31-12dc-5627-80bc-6e1efc081016","text":"Specifies fallback image logo src.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies fallback image logo src.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"logoAlt","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies logo image alt text.","doclets":[],"description":{"id":"541a6d09-9284-5734-b879-db9933379614","text":"Specifies logo image alt text.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies logo image alt text.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"140"},"name":"skeletonHeight","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies height of Image skeleton in loading state.","doclets":[],"description":{"id":"5d9516f0-655c-54b0-a25b-a09c630d0e94","text":"Specifies height of Image skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies height of Image skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"skeletonWidth","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies width of Image skeleton in loading state.","doclets":[],"description":{"id":"1c894c8c-d4c7-5bea-b710-486e0e2a50f4","text":"Specifies width of Image skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies width of Image skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"logoSkeleton","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Specifies whether the cap should be displayed during loading.","doclets":[],"description":{"id":"bb53e6c1-8985-55c1-84ff-d4827df94de7","text":"Specifies whether the cap should be displayed during loading.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies whether the cap should be displayed during loading.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"41"},"name":"logoSkeletonHeight","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies height of Logo skeleton in loading state.","doclets":[],"description":{"id":"89ba720f-f827-5dd9-91af-bba13a55d983","text":"Specifies height of Logo skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies height of Logo skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"logoSkeletonWidth","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies width of Logo skeleton in loading state.","doclets":[],"description":{"id":"908da6fc-1042-56e7-86f8-9f87f02b85bb","text":"Specifies width of Logo skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies width of Logo skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardSection","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies class name to append to the base element.","doclets":[],"description":{"id":"bf3253fa-ce9d-577f-ab36-2076b5c418c4","text":"Specifies class name to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies class name to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"null"},"name":"children","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Specifies contents of the component.","doclets":[],"description":{"id":"62bd8ee8-c677-5a65-9741-8d0972bfcb0d","text":"Specifies contents of the component.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies contents of the component.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"title","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Specifies title of the `Section`.","doclets":[],"description":{"id":"81ed60f4-50de-5775-8ce3-96b5f6a5376e","text":"Specifies title of the `Section`.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies title of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Section`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"actions","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"Specifies node to render on the bottom right of the `Section` (i.e. `ActionRow`).","doclets":[],"description":{"id":"68382b98-7815-5f5f-b0a5-e2d241cf4664","text":"Specifies node to render on the bottom right of the `Section` (i.e. `ActionRow`).","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies node to render on the bottom right of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Section`), ` (i.e. `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ActionRow`), `).`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"muted","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Specifies whether to display `Section` with muted styling.","doclets":[],"description":{"id":"13666166-cf72-56e6-92f0-7964229870f2","text":"Specifies whether to display `Section` with muted styling.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies whether to display `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Section`), ` with muted styling.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"100"},"name":"skeletonHeight","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies height of skeleton in loading state.","doclets":[],"description":{"id":"e4e96e19-2891-5f56-93b3-d1f7a3a4a9ea","text":"Specifies height of skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies height of skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"skeletonWidth","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Specifies width of skeleton in loading state.","doclets":[],"description":{"id":"b1f247c9-bf41-52e7-95be-ed8c693078ae","text":"Specifies width of skeleton in loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies width of skeleton in loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"CardStatus","props":[{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"Specifies the content of the component.","doclets":[],"description":{"id":"7e06447a-b945-5861-85a5-887ae88fc34c","text":"Specifies the content of the component.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies the content of the component.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"The class to append to the base element.","doclets":[],"description":{"id":"bbd322b8-f826-5261-9532-85d1f53ef6b3","text":"The class to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The class to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"icon","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"Icon that will be shown in the top-left corner.","doclets":[],"description":{"id":"3872096d-4beb-5478-ad81-ede0aaec1d95","text":"Icon that will be shown in the top-left corner.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Icon that will be shown in the top-left corner.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'warning'"},"name":"variant","type":{"name":"enum","raw":null,"value":[{"value":"'primary'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false},{"value":"'warning'","computed":false}]},"required":false,"docblock":"Specifies variant to use.","doclets":[],"description":{"id":"2379e1f2-288a-501d-8dd5-f6e573c864c1","text":"Specifies variant to use.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies variant to use.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"title","type":{"name":"union","raw":null,"value":[{"name":"element"},{"name":"string"}]},"required":false,"docblock":"Specifies title for the `Card.Status`.","doclets":[],"description":{"id":"5727fb5a-dd2b-5a9a-88b7-97955da0d9ba","text":"Specifies title for the `Card.Status`.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies title for the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card.Status`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"Card","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies class name to append to the base element.","doclets":[],"description":{"id":"9144039a-bbe7-55ec-a9aa-127725918eed","text":"Specifies class name to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies class name to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'vertical'"},"name":"orientation","type":{"name":"enum","raw":null,"value":[{"value":"'vertical'","computed":false},{"value":"'horizontal'","computed":false}]},"required":false,"docblock":"Specifies which orientation to use.","doclets":[],"description":{"id":"4c8afbce-372c-51f9-828a-3acfd853b56a","text":"Specifies which orientation to use.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies which orientation to use.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isClickable","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Specifies whether the `Card` is clickable, if `true` appropriate `hover` and `focus` styling will be added.","doclets":[],"description":{"id":"0968af5f-8691-5636-ae07-0eda17b01d25","text":"Specifies whether the `Card` is clickable, if `true` appropriate `hover` and `focus` styling will be added.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies whether the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` is clickable, if `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true`), ` appropriate `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `hover`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `focus`), ` styling will be added.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isLoading","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Specifies loading state.","doclets":[],"description":{"id":"9ea7358b-99ff-5cd8-9ee6-1d753d4320b0","text":"Specifies loading state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies loading state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'light'"},"name":"variant","type":{"name":"enum","raw":null,"value":[{"value":"'light'","computed":false},{"value":"'dark'","computed":false},{"value":"'muted'","computed":false}]},"required":false,"docblock":"Specifies `Card` style variant.","doclets":[],"description":{"id":"16e642e5-4cf0-5a40-a1c5-820607a6a95d","text":"Specifies `Card` style variant.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` style variant.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"muted","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"**Deprecated**. Specifies whether `Card` uses `muted` variant. Use `variant=\"muted\"` instead.","doclets":[],"description":{"id":"07a4b4ff-1433-5c45-b151-c3bffde5c437","text":"**Deprecated**. Specifies whether `Card` uses `muted` variant. Use `variant=\"muted\"` instead.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Deprecated`), `. Specifies whether `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Card`), ` uses `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `muted`), ` variant. Use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `variant=\"muted\"`), ` instead.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"Card","props":[]}]}},"pageContext":{"id":"ae892722-ccd6-5117-bbe6-9890454ff042","components":["Card","CardHeader","CardGrid","CardSection","CardDivider","CardFooter","CardBody","CardImageCap","CardStatus"],"scssVariablesData":{"openedx":"$card-spacer-y:                       .75rem !default;\n$card-spacer-x:                       1.25rem !default;\n$card-border-width:                   $border-width !default;\n$card-border-radius:                  $border-radius !default;\n$card-border-color:                   rgba($black, .125) !default;\n$card-border-focus-color:             rgba($black, .5) !default;\n$card-border-focus-color-dark:        theme-color(\"primary\", \"focus\") !default;\n$card-inner-border-radius:            subtract($card-border-radius, $card-border-width) !default;\n$card-cap-bg:                         rgba($black, .03) !default;\n$card-cap-color:                      null !default;\n$card-height:                         null !default;\n$card-color:                          null !default;\n$card-bg:                             $white !default;\n$card-bg-dark:                        $primary-500 !default;\n$card-bg-muted:                       $light-200 !default;\n$card-img-overlay-padding:            1.25rem !default;\n$card-group-margin:                   calc($grid-gutter-width / 2) !default;\n$card-deck-margin:                    $card-group-margin !default;\n$card-grid-margin:                    $card-group-margin !default;\n$card-deck-margin-bottom:             map_get($spacers, 3) !default;\n$card-grid-margin-bottom:             map_get($spacers, 3) !default;\n$card-columns-count:                  3 !default;\n$card-columns-gap:                    1.25rem !default;\n$card-columns-margin:                 $card-spacer-y !default;\n$card-divider-bg:                     $light-400 !default;\n$card-divider-margin-y:               $card-spacer-y !default;\n$card-footer-actions-gap:             .5rem !default;\n$card-logo-left-offset:               1.5rem !default;\n$card-logo-bottom-offset:             1rem !default;\n$card-logo-left-offset-horizontal:    .4375rem !default;\n$card-logo-bottom-offset-horizontal:  .4375rem !default;\n$card-logo-width:                     7.25rem !default;\n$card-logo-height:                    4.125rem !default;\n$card-image-border-radius:            .3125rem !default;\n$card-logo-border-radius:             .25rem !default;\n$card-footer-text-font-size:          $x-small-font-size;\n$card-image-horizontal-max-width:     240px !default;\n$card-image-horizontal-min-width:     $card-image-horizontal-max-width !default;\n$card-image-vertical-max-height:      140px !default;\n$loading-skeleton-spacer:             .313rem !default;\n$card-focus-border-offset:            5px !default;\n$card-focus-border-width:             2px !default;\n$card-focus-border-radius:            5px !default;\n","edxorg":"$card-spacer-y:                      1rem !default;\n$card-spacer-x:                      1.5rem !default;\n$card-border-width:                   $border-width !default;\n$card-border-radius:                  $border-radius !default;\n$card-border-color:                   rgba($black, .125) !default;\n$card-border-focus-color:             rgba($black, .5) !default;\n$card-border-focus-color-dark:        theme-color(\"primary\", \"focus\") !default;\n$card-inner-border-radius:            subtract($card-border-radius, $card-border-width) !default;\n$card-cap-bg:                         rgba($black, .03) !default;\n$card-cap-color:                      null !default;\n$card-height:                         null !default;\n$card-color:                          null !default;\n$card-bg:                             $white !default;\n$card-bg-dark:                        $primary-500 !default;\n$card-bg-muted:                       $light-200 !default;\n$card-img-overlay-padding:            1.25rem !default;\n$card-group-margin:                   calc($grid-gutter-width / 2) !default;\n$card-deck-margin:                    $card-group-margin !default;\n$card-grid-margin:                    $card-group-margin !default;\n$card-deck-margin-bottom:             map_get($spacers, 3) !default;\n$card-grid-margin-bottom:             map_get($spacers, 3) !default;\n$card-columns-count:                  3 !default;\n$card-columns-gap:                    1.25rem !default;\n$card-columns-margin:                 $card-spacer-y !default;\n$card-divider-bg:                     $light-400 !default;\n$card-divider-margin-y:               $card-spacer-y !default;\n$card-footer-actions-gap:             .5rem !default;\n$card-logo-left-offset:               1.5rem !default;\n$card-logo-bottom-offset:             1rem !default;\n$card-logo-left-offset-horizontal:    .4375rem !default;\n$card-logo-bottom-offset-horizontal:  .4375rem !default;\n$card-logo-width:                     7.25rem !default;\n$card-logo-height:                    4.125rem !default;\n$card-image-border-radius:            .3125rem !default;\n$card-logo-border-radius:             .25rem !default;\n$card-footer-text-font-size:          $x-small-font-size;\n$card-image-horizontal-max-width:     240px !default;\n$card-image-horizontal-min-width:     $card-image-horizontal-max-width !default;\n$card-image-vertical-max-height:      140px !default;\n$loading-skeleton-spacer:             .313rem !default;\n$card-focus-border-offset:            5px !default;\n$card-focus-border-width:             2px !default;\n$card-focus-border-radius:            5px !default;\n"}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}