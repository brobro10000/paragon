{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/checkbox/","result":{"data":{"mdx":{"id":"5d22d3a1-b99c-5484-80b7-01fa1da66136","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Checkbox\",\n  \"type\": \"component\",\n  \"components\": [\"Check\"],\n  \"categories\": [\"Forms (deprecated)\"],\n  \"status\": \"Deprecate Soon\",\n  \"designStatus\": \"TBD\",\n  \"devStatus\": \"To Do\",\n  \"notes\": \"Replaced by Input and ValidationFormGroup\\n\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<CheckBox\n  name=\"checkbox\"\n  label=\"check me out!\"\n/>\n`)), mdx(\"h2\", {\n    \"id\": \"disabled\"\n  }, `Disabled`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#disabled\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<CheckBox\n  name=\"checkbox\"\n  label=\"you cannot check me out\"\n  disabled\n/>\n`)), mdx(\"h2\", {\n    \"id\": \"default-checked\"\n  }, `Default checked`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#default-checked\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<CheckBox\n  name=\"checkbox\"\n  label=\"(un)check me out\"\n  checked\n/>\n`)), mdx(\"h2\", {\n    \"id\": \"call-a-function\"\n  }, `Call a function`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#call-a-function\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<CheckBox\n  name=\"checkbox\"\n  label=\"check out the console\"\n  onChange={() => console.log('the checkbox changed state')}\n/>\n`)), mdx(\"h2\", {\n    \"id\": \"controlled-example\"\n  }, `Controlled example`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#controlled-example\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `class CheckBoxWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleCheckBox = this.toggleCheckBox.bind(this);\n\n    this.state = {\n      checked: false,\n    };\n  }\n\n  toggleCheckBox() {\n    this.setState({\n      checked: !this.state.checked,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex align-items-center\">\n        <Button\n          variant=\"light\"\n          className=\"mr-3\"\n          onClick={this.toggleCheckBox}\n        >\n          Click me to toggle the check box!\n        </Button>\n        <CheckBox\n          name=\"checkbox\"\n          label=\"click the button\"\n          checked={this.state.checked}\n        />\n      </div>\n    );\n  }\n}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Checkbox","status":"Deprecate Soon","notes":"Replaced by Input and ValidationFormGroup\n","components":["Check"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic usage"},{"url":"#disabled","title":"Disabled"},{"url":"#default-checked","title":"Default checked"},{"url":"#call-a-function","title":"Call a function"},{"url":"#controlled-example","title":"Controlled example"}]}},"components":{"nodes":[{"displayName":"Check","props":[{"defaultValue":{"value":"false"},"name":"checked","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"(`Boolean`): `true` if the state should be checked, `false` otherwise. This prop can be used to manage the Checkbox more directly, overriding the default Checkbox checked state.","doclets":[],"description":{"id":"1acf471d-047b-59d4-b6b2-088d10ab2a53","text":"(`Boolean`): `true` if the state should be checked, `false` otherwise. This prop can be used to manage the Checkbox more directly, overriding the default Checkbox checked state.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `(`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Boolean`), `): `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true`), ` if the state should be checked, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `false`), ` otherwise. This prop can be used to manage the Checkbox more directly, overriding the default Checkbox checked state.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onChange","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"(`Boolean`): `true` if the checkbox should be disabled, `false` otherwise","doclets":[],"description":{"id":"2760f472-8461-5624-b642-08bdff928f3e","text":"(`Boolean`): `true` if the checkbox should be disabled, `false` otherwise","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `(`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Boolean`), `): `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `true`), ` if the checkbox should be disabled, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `false`), ` otherwise`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"inputRef","type":{"name":"union","raw":null,"value":[{"name":"func"},{"name":"shape","value":{"current":{"name":"instanceOf","value":"PropTypes.element","required":false}}}]},"required":false,"docblock":"function to be called when the checkbox changes state","doclets":[],"description":{"id":"5954b366-d023-5a9d-8ff0-2a5c8fdb1243","text":"function to be called when the checkbox changes state","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `function to be called when the checkbox changes state`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"5d22d3a1-b99c-5484-80b7-01fa1da66136","components":["Check"],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}