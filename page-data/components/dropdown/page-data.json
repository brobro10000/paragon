{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/dropdown/","result":{"data":{"mdx":{"id":"e352d912-b37b-5650-ad6f-0a6612f7909e","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Dropdown\",\n  \"type\": \"component\",\n  \"components\": [\"Dropdown\", \"DropdownItem\", \"DropdownMenu\", \"DropdownButton\", \"DropdownToggle\", \"DropdownHeader\", \"DropdownDivider\"],\n  \"categories\": [\"Navigation\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", {\n    className: \"lead\"\n  }, \"This is a pass through component from React-Bootstrap.\", mdx(\"br\", null), mdx(\"a\", {\n    href: \"https://react-bootstrap-v4.netlify.app/components/dropdowns/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"See React-Bootstrap for documentation.\")), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\">\n  <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n  <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n  <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n</DropdownButton>\n`)), mdx(\"h2\", {\n    \"id\": \"advanced-usage\"\n  }, `Advanced Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#advanced-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <Dropdown onToggle={(isOpen, event, metadata) => console.log('debug', 'onToggle', { isOpen, event, metadata })} className=\"mb-3\">\n    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic-1\">\n      Dropdown Button\n    </Dropdown.Toggle>\n    <Dropdown.Menu>\n      <Dropdown.Header>Header</Dropdown.Header>\n      <Dropdown.Item>Action</Dropdown.Item>\n      <Dropdown.Item>Another action</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item>Something else</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n\n  <Dropdown variant=\"dark\" onToggle={(isOpen, event, metadata) => console.log('debug', 'onToggle', { isOpen, event, metadata })} className=\"mb-3\">\n    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic-2\">\n      Dark Variant\n    </Dropdown.Toggle>\n    <Dropdown.Menu>\n      <Dropdown.Header>Header</Dropdown.Header>\n      <Dropdown.Item>Action</Dropdown.Item>\n      <Dropdown.Item>Another action</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item>Something else</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n  <Dropdown autoClose={false} onToggle={(isOpen, event, metadata) => console.log('debug', 'onToggle', { isOpen, event, metadata })} className=\"mb-3\">\n    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic-2\">\n      autoClose=false\n    </Dropdown.Toggle>\n    <Dropdown.Menu>\n      <Dropdown.Header>Header</Dropdown.Header>\n      <Dropdown.Item>Action</Dropdown.Item>\n      <Dropdown.Item>Another action</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item>Something else</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n  <Dropdown autoClose=\"inside\" onToggle={(isOpen, event, metadata) => console.log('debug', 'onToggle', { isOpen, event, metadata })} className=\"mb-3\">\n    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic-3\">\n      autoClose=inside\n    </Dropdown.Toggle>\n    <Dropdown.Menu>\n      <Dropdown.Header>Header</Dropdown.Header>\n      <Dropdown.Item>Action</Dropdown.Item>\n      <Dropdown.Item>Another action</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item>Something else</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n  <Dropdown autoClose=\"outside\" onToggle={(isOpen, event, metadata) => console.log('debug', 'onToggle', { isOpen, event, metadata })} className=\"mb-3\">\n    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic-4\">\n      autoClose=outside\n    </Dropdown.Toggle>\n    <Dropdown.Menu>\n      <Dropdown.Header>Header</Dropdown.Header>\n      <Dropdown.Item>Action</Dropdown.Item>\n      <Dropdown.Item>Another action</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item>Something else</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n</>\n`)), mdx(\"h2\", {\n    \"id\": \"with-iconbutton\"\n  }, `With IconButton`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-iconbutton\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `You can use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropdown.Toggle`), ` with `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/iconbutton\"\n  }, `IconButton`), ` component, note that all props you provide to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropdown.Toggle`), ` will get passed down to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButton`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Dropdown>\n  <Dropdown.Toggle\n    id=\"dropdown-toggle-with-iconbutton\"\n    as={IconButton}\n    src={MoreVert}\n    iconAs={Icon}\n    variant=\"primary\"\n  />\n  <Dropdown.Menu>\n    <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n    <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n    <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Dropdown","status":"Stable","notes":null,"components":["Dropdown","DropdownItem","DropdownMenu","DropdownButton","DropdownToggle","DropdownHeader","DropdownDivider"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#advanced-usage","title":"Advanced Usage"},{"url":"#with-iconbutton","title":"With IconButton"}]}},"components":{"nodes":[{"displayName":"Dropdown","props":[{"defaultValue":{"value":"true"},"name":"autoClose","type":{"name":"union","raw":null,"value":[{"name":"string"},{"name":"bool"}]},"required":false,"docblock":"","doclets":[],"description":{"id":"82bca20e-bbc8-534a-90fa-65e6437e56c9","text":"","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"''"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"12838d2a-6d9c-5c54-b96c-52cbfb47dd2c","text":"","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"onToggle","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"ebc8bdf7-8b2a-5543-aff0-99cf1094ec60","text":"","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"show","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"9fcbb8a3-29f8-5086-a7e8-ddd94fc75777","text":"","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'light'"},"name":"variant","type":{"name":"enum","raw":null,"value":[{"value":"'light'","computed":false},{"value":"'dark'","computed":false}]},"required":false,"docblock":"","doclets":[],"description":{"id":"cada2420-2bb3-5e8d-a150-0ce7e6e1c1eb","text":"","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"DropdownToggle","props":[{"defaultValue":{"value":"Button"},"name":"as","type":{"name":"elementType","raw":null,"value":null},"required":false,"docblock":"Specifies the base element.","doclets":[],"description":{"id":"d69bf6e5-bb45-5a26-bb3e-8f91f4b11201","text":"Specifies the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'dropdown-toggle'"},"name":"bsPrefix","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Overrides underlying component base CSS class name.","doclets":[],"description":{"id":"01efa7fe-b33a-53d0-9de2-acd3a6ed39fc","text":"Overrides underlying component base CSS class name.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Overrides underlying component base CSS class name.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"id","type":{"name":"union","raw":null,"value":[{"name":"string"},{"name":"number"}]},"required":true,"docblock":"An html id attribute, necessary for assistive technologies, such as screen readers.","doclets":[],"description":{"id":"99701236-66fa-5014-bd5c-2234d728e1e8","text":"An html id attribute, necessary for assistive technologies, such as screen readers.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `An html id attribute, necessary for assistive technologies, such as screen readers.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"e352d912-b37b-5650-ad6f-0a6612f7909e","components":["Dropdown","DropdownItem","DropdownMenu","DropdownButton","DropdownToggle","DropdownHeader","DropdownDivider"],"cssVariablesData":["var(--pgn-elevation-dropdown-zindex)","var(--pgn-size-dropdown-min-width)","var(--pgn-spacing-dropdown-padding-y-base)","var(--pgn-spacing-dropdown-padding-x-base)","var(--pgn-spacing-dropdown-spacer)","var(--pgn-color-dropdown-text)","var(--pgn-color-dropdown-bg)","var(--pgn-size-dropdown-border-width)","var(--pgn-color-dropdown-border)","var(--pgn-elevation-dropdown-box-shadow)","var(--pgn-typography-dropdown-font-size)","var(--pgn-size-dropdown-border-radius-base)","var(--pgn-color-dropdown-divider-bg)","var(--pgn-spacing-dropdown-divider-margin-y)","var(--pgn-spacing-dropdown-padding-y-item)","var(--pgn-spacing-dropdown-padding-x-item)","var(--pgn-typography-font-weight-normal)","var(--pgn-color-dropdown-link-base)","var(--pgn-typography-dropdown-item-text-decoration)","var(--pgn-size-dropdown-border-radius-inner)","var(--pgn-color-dropdown-link-hover-base)","var(--pgn-color-dropdown-link-hover-bg)","var(--pgn-color-dropdown-link-active-base)","var(--pgn-color-dropdown-link-active-bg)","var(--pgn-color-dropdown-link-disabled)","var(--pgn-spacing-dropdown-padding-header)","var(--pgn-color-dropdown-header)","var(--pgn-typography-font-size-sm)","var(--pgn-color-dark-300)","var(--pgn-color-white)","var(--pgn-color-dark-200)","var(--pgn-color-light-300)","var(--pgn-color-primary-700)","var(--pgn-color-light-700)"],"componentsUsageInsights":["Alert","Button","DataTable","DataTable.TableControlBar","DataTable.Table","DataTable.TableFooter","Container","Row","Spinner","Icon","InputText","InputSelect","TextArea","StatusAlert","Hyperlink","Table","CheckCircle","Error","WarningFilled","Alert.Heading","Form.Checkbox","ModalDialog","Form","ModalDialog.Header","ModalDialog.Title","ModalDialog.Body","Form.Group","Form.Label","Form.RadioSet","Form.Radio","ModalDialog.Footer","ActionRow","ModalDialog.CloseButton","StatefulButton","Form.Control","Form.Switch","AlertModal","ValidationFormGroup","Input","ModalLayer","ModalCloseButton","useToggle","Form.Text","useWindowSize","breakpoints","OpenInNew","Col","TransitionReplace","Form.Check","Collapsible","Alert.Link","ArrowForwardIos","Collapsible.Advanced","Collapsible.Trigger","Collapsible.Body","OverlayTrigger","Tooltip","InfoOutline","ArrowBack","Skeleton","Info","Lightbulb","ArrowOutward","Undo","Badge","DataTable.EmptyTable","Toast","BookOpen","ErrorOutline","DataTable.RowStatus","Stepper","Stepper.Step","Stepper.ActionRow","MailtoLink","Stack","Card","Card.Section","IconButton","Delete","DataTableContext.Provider","CheckboxControl","Popover","Popover.Title","Popover.Content","Modal","Tab","Tabs","Pagination","SpinnerIcon","Plus","Warning","Close","Check","Add","Card.ImageCap","Card.Header","Card.Footer","CardGrid","ActionRow.Spacer","FullscreenModal","Stepper.Header","Assignment","AddCircle","CardView","EditCircle","Pagination.Reduced","FileDownload","MediaQuery","ErrorIcon","Dropdown","Dropdown.Toggle","AvatarButton","Dropdown.Menu","Dropdown.Item","Navbar","Nav","Nav.Link","Breadcrumb","Card.Body","ProgressBar.Annotated","useMediaQuery","Search","FormControl.Feedback","Groups","ProductTour","FormControl","Download","SearchField","Dropzone","Image","Card.Status","Sync","MoreVert","PlayCircleFilled","RemoveCircle","Edit","ArrowForward","Bubble","School","TrendingUp","InsertChartOutlined","Tag","CreditCard","MoneyOutline","Description","Settings","Support","Email","ArrowBackIos","ResponsiveContext.Provider","PageBanner","Login","Institution","VisibilityOff","Visibility","Remove","ExpandMore","ChevronLeft","FormAutosuggestOption","FormAutosuggest","FormControlFeedback","Form.CheckboxSet","Send","Event","SpinnerSimple","Cancel","Nav.Item","Layout","Layout.Element","ModalPopup","IconButtonWithTooltip","EditOutline","DeleteOutline","Truncate","ContentCopy","Dropdown.Divider","Chip","Collapsible.Visible","ExpandLess","FileUploadIcon","Card.Divider","Calendar","SwitchControl","WarningIcon","IconAdd","Form.Row","ButtonGroup","SelectableBox.Set","SelectableBox","EmailIcon","CheckCircleIcon","AddIcon","Copyright","Cc","Attribution","Nc","Nd","Sa","InfoIcon","Tune","SearchField.Advanced","SearchField.Label","SearchField.Input","SearchIcon","PostOutline","HelpOutline","Report","MoreHoriz","Avatar","DropdownButton","Post","Help","People","Locked","ModalDialog.Hero","Launch","Book","EventNote","Program","FilterAlt","CloseSmall","Sheet","useCheckboxSetValues","paragon","MarketingModal","Dropdown.Header","FormLabel","PersonSearch","FormGroup","ChevronRight","Lock","StarFilled","AccessTime","Speed","Equalizer","VideoFile","Person","RocketLaunch","ContentPasteGo","Navbar.Brand","VerifiedBadge","StandardModal","LibraryBooks","CalendarMonth","ExpandCircleDown","FormatQuote","CardCarousel","CardDeck","ZoomOut","MenuIcon","Dropdown.Deprecated","AccountBalance","WatchFilled","Blocked","ArrowDropDown","ArrowDropUp","Menu","ChatBubbleOutline","QuestionAnswer","WatchOutline","Compass","MoneyFilled","CheckIcon","DataTable.FilterStatus","DjangoShort","Form.AutosuggestOption","Form.Autosuggest","Feedback","NotificationsNone","SearchField.ClearButton","SearchField.SubmitButton","FeedbackOutline","KeyboardArrowDown","KeyboardArrowUp","FileUpload","ClosedCaption","DragIndicator","icons","Scrollable","Form.SwitchSet","Facebook","BsTwitter","BsLinkedin","Reddit","Thunderstorm","Minimize","Recommend","useArrowKeyNavigation","CallMade","KeyboardArrowRight","ArrowUpward","Verified","Timelapse","ArrowRightAlt","LocalOffer","LocationOn","Done","MenuItem","CheckBoxGroup","CheckBox","Variant","Fieldset"]}},"staticQueryHashes":["3617884278","3649515864","3773363936","63159454"]}