{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/dropzone/","result":{"data":{"mdx":{"id":"2ec2f144-f4b6-5440-93be-aa969ea52cb6","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Dropzone\",\n  \"type\": \"component\",\n  \"components\": [\"Dropzone\"],\n  \"categories\": [\"Forms\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": null\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), ` allows users to upload files via drag and drop, or by clicking the component. Currently, only one file upload at a time is allowed.`), mdx(\"p\", null, `You will also need to provide upload logic yourself via `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `onProcessUpload`), ` prop which accepts function that should take care of uploading the file to the backend (i.e. send HTTP request).\nThis function accepts an object with following content as its only argument:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `{object} fileData - Metadata about the uploaded file.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `{object} requestConfig - Config to pass to `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `axios`), ` call (this is required to display progress bar and hande cancel action).`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `{function} handleError - Function to communicate to `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Dropzone`), ` that file upload resulted in failure, expects `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Error`), ` object as its only argument.`)), mdx(\"p\", null, `Each example below implements such a function.`), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Note`), ` that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), ` does not render file after successful upload, you will have to provide that logic yourself depending on which type of file has been uploaded, see `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#with-file-preview\"\n  }, `this example`), `.`), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Drag and drop a file to begin uploading, only one file at a time is allowed, no other validation is done.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `onUploadProgress`), ` prop to get feedback about the upload progress - should be a function that receives (percentageUploaded, progressEvent) as arguments.`)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadProgress={(percent) => console.log(percent)}\n    />\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-progress-bar\"\n  }, `With Progress Bar`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-progress-bar\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Display upload progress as a progress bar with the ability to cancel the upload.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `onUploadCancel`), ` prop to react to upload cancel event - should be a function that takes `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `Response`), ` object as its argument. `)), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadCancel={() => console.log('UPLOAD CANCEL')}\n      progressVariant=\"bar\"\n    />\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-file-size-and-type-validation\"\n  }, `With file size and type validation`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-file-size-and-type-validation\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Accepts only .png files with size between 1MB and 20MB. The file sizes are specified in bytes.\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `accept`), ` prop should be an object with the keys set to the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\"\n  }, `MIME type`), ` and the values to an array of file extensions.`), mdx(\"p\", null, `For example:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `to allow only PNG images (as in this example) you should pass `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `{ 'image/*': ['.png'] }`), ` object as `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `accept`), ` prop;`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `to allow both PNG and JPG images you should pass `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `{ 'image/*': ['.png', '.jpg'] }`), ` object as `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `accept`), ` prop;`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `to allow arbitrary images you should pass `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `{ 'image/*': [] }`), ` object as `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `accept`), ` prop`)), mdx(\"p\", null, `The component will render a helpful message about size and type restrictions based on the values you pass to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `accept`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `minSize`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `maxSize`), ` props.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadProgress={(percent) => console.log(percent)}\n      onUploadCancel={() => console.log('UPLOAD CANCEL')}\n      progressVariant=\"bar\"\n      minSize={1048576}\n      maxSize={20 * 1048576}\n      accept={{\n        \"image/*\": ['.png'],\n      }}\n    />\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-file-preview\"\n  }, `With file preview`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-file-preview\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Shows image after successful upload.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [uploadedFile, setUploadedFile] = useState(undefined);\n\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n      setUploadedFile(response.data.files.file);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  if (uploadedFile) {\n    return <Image src={uploadedFile} fluid alt=\"Image description\" />;\n  }\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadProgress={(percent) => console.log(percent)}\n      onUploadCancel={() => console.log('UPLOAD CANCEL')}\n      progressVariant=\"bar\"\n      accept={{\n        \"image/*\": [],\n      }}\n    />\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-custom-error-messages\"\n  }, `With custom error messages`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-custom-error-messages\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Accepts only .png files with size between 1MB and 20MB, renders custom validation error messages.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadProgress={(percent) => console.log(percent)}\n      onUploadCancel={() => console.log('UPLOAD CANCEL')}\n      errorMessages={{\n        invalidType: 'Invalid file type, only images allowed.',\n        invalidSize: 'The file size must be between 1MB and 20MB.',\n        multipleDragged: 'Cannot upload more than one file.',\n      }}\n      progressVariant=\"bar\"\n      minSize={1048576}\n      maxSize={20 * 1048576}\n      accept={{\n        \"image/*\": ['.png'],\n      }}\n    />\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-custom-look\"\n  }, `With custom look`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-custom-look\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `Use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `inputComponent`), ` prop to override default view of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const MyInputComponent = <p>Hey! You can render here anything you want ;)</p>;\n\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadProgress={(percent) => console.log(percent)}\n      inputComponent={MyInputComponent}\n    />\n  )\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-custom-validation\"\n  }, `With custom validation`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-custom-validation\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `You can pass your own validator function which accepts `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `File`), ` object as its only argument, the function is invoked after all other validation steps are done.\nThe function should return error message to display in case validation fails, otherwise return `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `null`), `.`), mdx(\"p\", null, `Note that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), ` does not handle unexpected errors that might happen in your function, they should be handled by the validator itself as in the example below.`), mdx(\"p\", null, `This example validates that only `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `400x479`), ` images can be uploaded. `), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  // note that we do not need to validate that received file is actually an image\n  // because 'accept' parameter handles that before validation function is used\n  async function imageDimensionValidator(file) {\n    const image = new window.Image();\n    try {\n      url = URL.createObjectURL(file);\n      image.src = url;\n      await image.decode();\n      if (image.width !== 400 || image.height !== 479) {\n        return 'The image must have 400x479 dimensions.';\n      }\n    } catch (error) {\n      return 'Unexpected error happened during file validation, please try again.'\n    }\n    return null;\n  }\n\n  async function handleProcessUpload({\n    fileData, requestConfig, handleError\n  }) {\n    const uploadUrl = 'https://httpbin.org/post';\n    try {\n      const response = await axios.post(uploadUrl, fileData, requestConfig);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  return (\n    <Dropzone\n      onProcessUpload={handleProcessUpload}\n      onUploadProgress={(percent) => console.log(percent)}\n      onUploadCancel={() => console.log('UPLOAD CANCEL')}\n      progressVariant=\"bar\"\n      accept={{\n        \"image/*\": []\n      }}\n      validator={imageDimensionValidator}\n    />\n  );\n}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Dropzone","status":"New","notes":null,"components":["Dropzone"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#with-progress-bar","title":"With Progress Bar"},{"url":"#with-file-size-and-type-validation","title":"With file size and type validation"},{"url":"#with-file-preview","title":"With file preview"},{"url":"#with-custom-error-messages","title":"With custom error messages"},{"url":"#with-custom-look","title":"With custom look"},{"url":"#with-custom-validation","title":"With custom validation"}]}},"components":{"nodes":[{"displayName":"Dropzone","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Specifies class name to append to the base element.","doclets":[],"description":{"id":"b28d2345-5b8a-544c-a404-2a13ffc6aa46","text":"Specifies class name to append to the base element.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies class name to append to the base element.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"accept","type":{"name":"objectOf","raw":null,"value":{"name":"arrayOf","value":{"name":"string"}}},"required":false,"docblock":"Set accepted file types.\nThis should be an object with the keys set to the\n[MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)\nand the values to an array of file extensions.","doclets":[],"description":{"id":"d53209c4-7b4d-5149-8b3e-83c4200eafbf","text":"Set accepted file types.\nThis should be an object with the keys set to the\n[MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)\nand the values to an array of file extensions.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Set accepted file types.\nThis should be an object with the keys set to the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\"\n  }, `MIME type`), `\nand the values to an array of file extensions.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"Infinity"},"name":"maxSize","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Maximum file size (in bytes).","doclets":[],"description":{"id":"df17b0b8-4847-5067-9a62-e86532920065","text":"Maximum file size (in bytes).","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Maximum file size (in bytes).`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"0"},"name":"minSize","type":{"name":"number","raw":null,"value":null},"required":false,"docblock":"Minimum file size (in bytes).","doclets":[],"description":{"id":"61290a25-e0ee-5e1c-afb9-7f0ced1a78f6","text":"Minimum file size (in bytes).","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Minimum file size (in bytes).`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onUploadProgress","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A callback fired each time an upload progress event happens,\nreceives (percentageUploaded, progressEvent) as arguments.","doclets":[],"description":{"id":"af6fff5f-699c-5dba-a2e4-cb57f52c632d","text":"A callback fired each time an upload progress event happens,\nreceives (percentageUploaded, progressEvent) as arguments.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A callback fired each time an upload progress event happens,\nreceives (percentageUploaded, progressEvent) as arguments.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onUploadCancel","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"A callback fired upon successful upload, receives Response object as a single argument.","doclets":[],"description":{"id":"92adf549-6749-51d5-ba32-fe5a49c9e119","text":"A callback fired upon successful upload, receives Response object as a single argument.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A callback fired upon successful upload, receives Response object as a single argument.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"onProcessUpload","type":{"name":"func","raw":null,"value":null},"required":true,"docblock":"A function responsible for uploading the file.\nReceives following object as its only argument\n{\n  @param {object} fileData - Metadata about the uploaded file.\n  @param {object} requestConfig - Config to pass to `axios` call.\n  @param {function} handleError - Function to communicate to `Dropzone` that file upload resulted in failure,\n  expects `Error` object to be passed as its only argument.\n}","doclets":[],"description":{"id":"3e568c28-dd2d-5e2e-a235-693ee0d874b2","text":"A function responsible for uploading the file.\nReceives following object as its only argument\n{\n  @param {object} fileData - Metadata about the uploaded file.\n  @param {object} requestConfig - Config to pass to `axios` call.\n  @param {function} handleError - Function to communicate to `Dropzone` that file upload resulted in failure,\n  expects `Error` object to be passed as its only argument.\n}","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A function responsible for uploading the file.\nReceives following object as its only argument\n{\n@param {object} fileData - Metadata about the uploaded file.\n@param {object} requestConfig - Config to pass to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `axios`), ` call.\n@param {function} handleError - Function to communicate to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), ` that file upload resulted in failure,\nexpects `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Error`), ` object to be passed as its only argument.\n}`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"{\n  invalidType: undefined,\n  invalidSizeLess: undefined,\n  invalidSizeMore: undefined,\n  multipleDragged: undefined,\n  uploadError: undefined,\n}"},"name":"errorMessages","type":{"name":"shape","raw":null,"value":{"invalidType":{"name":"union","value":[{"name":"string"},{"name":"element"}],"required":false},"invalidSizeLess":{"name":"union","value":[{"name":"string"},{"name":"element"}],"required":false},"invalidSizeMore":{"name":"union","value":[{"name":"string"},{"name":"element"}],"required":false},"multipleDragged":{"name":"union","value":[{"name":"string"},{"name":"element"}],"required":false},"uploadError":{"name":"union","value":[{"name":"string"},{"name":"element"}],"required":false}}},"required":false,"docblock":"An object containing error messages, following are supported:\n1) invalidType - A message to display when file of invalid type is dropped into `Dropzone`.\nDefaults to 'The file type must be {filType} file / one of {fileTypes} files.'.\n2) invalidSizeLess - A message to display when file of size less than minSize value is dropped into `Dropzone`.\nDefaults to 'File must be larger than {minSize}.'.\n3) invalidSizeMore - A message to display when file of size greater than maxSize value is dropped into `Dropzone`.\nDefaults to 'File must be less than {maxSize}.'.\n4) multipleDragged - A message to display when multiple files are dragged over `Dropzone`.\n5) uploadError - A message to display in case upload results in an error","doclets":[],"description":{"id":"ac0d1ba8-5cbe-57f3-9ce6-7551fe58126e","text":"An object containing error messages, following are supported:\n1) invalidType - A message to display when file of invalid type is dropped into `Dropzone`.\nDefaults to 'The file type must be {filType} file / one of {fileTypes} files.'.\n2) invalidSizeLess - A message to display when file of size less than minSize value is dropped into `Dropzone`.\nDefaults to 'File must be larger than {minSize}.'.\n3) invalidSizeMore - A message to display when file of size greater than maxSize value is dropped into `Dropzone`.\nDefaults to 'File must be less than {maxSize}.'.\n4) multipleDragged - A message to display when multiple files are dragged over `Dropzone`.\n5) uploadError - A message to display in case upload results in an error","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `An object containing error messages, following are supported:\n1) invalidType - A message to display when file of invalid type is dropped into `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), `.\nDefaults to 'The file type must be {filType} file / one of {fileTypes} files.'.\n2) invalidSizeLess - A message to display when file of size less than minSize value is dropped into `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), `.\nDefaults to 'File must be larger than {minSize}.'.\n3) invalidSizeMore - A message to display when file of size greater than maxSize value is dropped into `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), `.\nDefaults to 'File must be less than {maxSize}.'.\n4) multipleDragged - A message to display when multiple files are dragged over `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), `.\n5) uploadError - A message to display in case upload results in an error`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'spinner'"},"name":"progressVariant","type":{"name":"enum","raw":null,"value":[{"value":"'spinner'","computed":false},{"value":"'bar'","computed":false}]},"required":false,"docblock":"Specifies how the upload progress should be displayed, component shows either spinner or a progress bar.","doclets":[],"description":{"id":"07a93bbc-b89e-55ac-b089-12cdd271a538","text":"Specifies how the upload progress should be displayed, component shows either spinner or a progress bar.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Specifies how the upload progress should be displayed, component shows either spinner or a progress bar.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"validator","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"Custom validation function, receives `File` object as its only argument.\nNote that this function will be invoked as a last validation step before beginning an upload process.","doclets":[],"description":{"id":"494545f3-9908-5390-833b-d55198594417","text":"Custom validation function, receives `File` object as its only argument.\nNote that this function will be invoked as a last validation step before beginning an upload process.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Custom validation function, receives `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `File`), ` object as its only argument.\nNote that this function will be invoked as a last validation step before beginning an upload process.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"inputComponent","type":{"name":"union","raw":null,"value":[{"name":"func"},{"name":"node"}]},"required":false,"docblock":"A component to display initial state of the `Dropzone`.","doclets":[],"description":{"id":"42f92f50-fc9e-5f92-8929-9565d1cbc9f0","text":"A component to display initial state of the `Dropzone`.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A component to display initial state of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Dropzone`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"2ec2f144-f4b6-5440-93be-aa969ea52cb6","components":["Dropzone"],"scssVariablesData":{"openedx":"$dropzone-padding:  var(--pgn-spacing-dropzone-padding) !default;\n$dropzone-border-default:  var(--pgn-spacing-dropzone-border-base) !default;\n$dropzone-border-hover:  var(--pgn-spacing-dropzone-border-hover) !default;\n$dropzone-border-focus:  var(--pgn-spacing-dropzone-border-focus) !default;\n$dropzone-border-active:  var(--pgn-spacing-dropzone-border-active) !default;\n$dropzone-border-error:  var(--pgn-spacing-dropzone-border-error) !default;\n$dropzone-error-wrapper-color:  var(--pgn-color-dropzone-error-wrapper) !default;\n$dropzone-restriction-msg-font-size:  var(--pgn-typography-dropzone-restriction-msg-font-size) !default;\n$dropzone-restriction-msg-color:  var(--pgn-color-dropzone-restriction-msg) !default;\n$dropzone-border-color-default:  var(--pgn-color-dropzone-border-base) !default;\n$dropzone-border-color-hover:  var(--pgn-color-dropzone-border-hover) !default;\n$dropzone-border-color-focus:  var(--pgn-color-dropzone-border-focus) !default;\n$dropzone-border-color-active:  var(--pgn-color-dropzone-border-active) !default;\n$dropzone-border-color-error:  var(--pgn-color-dropzone-border-error) !default;\n","edxorg":"$dropzone-padding:  var(--pgn-spacing-dropzone-padding) !default;\n$dropzone-border-default:  var(--pgn-spacing-dropzone-border-base) !default;\n$dropzone-border-hover:  var(--pgn-spacing-dropzone-border-hover) !default;\n$dropzone-border-focus:  var(--pgn-spacing-dropzone-border-focus) !default;\n$dropzone-border-active:  var(--pgn-spacing-dropzone-border-active) !default;\n$dropzone-border-error:  var(--pgn-spacing-dropzone-border-error) !default;\n$dropzone-error-wrapper-color:  var(--pgn-color-dropzone-error-wrapper) !default;\n$dropzone-restriction-msg-font-size:  var(--pgn-typography-dropzone-restriction-msg-font-size) !default;\n$dropzone-restriction-msg-color:  var(--pgn-color-dropzone-restriction-msg) !default;\n$dropzone-border-color-default:  var(--pgn-color-dropzone-border-base) !default;\n$dropzone-border-color-hover:  var(--pgn-color-dropzone-border-hover) !default;\n$dropzone-border-color-focus:  var(--pgn-color-dropzone-border-focus) !default;\n$dropzone-border-color-active:  var(--pgn-color-dropzone-border-active) !default;\n$dropzone-border-color-error:  var(--pgn-color-dropzone-border-error) !default;\n"}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}