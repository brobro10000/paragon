{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/hooks/usearrowkeynavigation/","result":{"data":{"mdx":{"id":"fc8697ba-7b79-5b61-b5d4-f6f58e2aa0a1","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"useArrowKeyNavigation\",\n  \"type\": \"hook\",\n  \"categories\": [\"Hooks\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useArrowKeyNavigation`), ` adds arrow key navigation through any component.`), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `To enable item navigation using the arrow keyboard specifies the CSS selectors string that indicates to which elements\nthe user can navigate.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const parentRef = useArrowKeyNavigation({\n    selectors: 'a:not(:disabled),button:not(:disabled),input:not(:disabled)',\n  });\n\n  return (\n    <div ref={parentRef}>\n      <Button className=\"mb-2 mb-sm-0\" autoFocus>Brand</Button>{' '}\n      <Button className=\"mb-2 mb-sm-0\" variant=\"outline-brand\">Outline Brand</Button>{' '}\n      <Button className=\"mb-2 mb-sm-0\" variant=\"outline-primary\">Outline Primary</Button>{' '}\n      <Button className=\"mb-2 mb-sm-0\" variant=\"tertiary\">Tertiary</Button>{' '}\n    </div>\n  );\n};\n\n`)), mdx(\"h2\", {\n    \"id\": \"ignored-arrow-keys\"\n  }, `Ignored arrow keys`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#ignored-arrow-keys\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `To disable listening for keystrokes, use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ignoreKeys`), ` to add ignored keys to the array.\nFor example, you have the ability to navigate through the inputs using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `arrowUp`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `arrowDown`), ` keys;\nthe `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `arrowUp`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `arrowLeft`), ` keys can be ignored for convenient editing of the text in the inputs.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const parentRef = useArrowKeyNavigation({\n    selectors: 'a:not(:disabled),button:not(:disabled),input:not(:disabled)',\n    ignoredKeys: ['ArrowRight', 'ArrowLeft'],\n  });\n\n  return (\n    <Form ref={parentRef}>\n        <Form.Group>\n          <Form.Label>Full name:</Form.Label>\n          <Form.Control placeholder=\"Enter full name\" />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Email:</Form.Label>\n          <Form.Control type=\"email\" placeholder=\"Enter email\" />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Password:</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Password\" />\n        </Form.Group>\n        <Form.Group>\n          <Form.Check type=\"checkbox\" label=\"Confirm the entered data\" />\n        </Form.Group>\n\n        <Button variant=\"primary\" onClick={() => alert('Submitted!')}>\n          Submit\n        </Button>\n    </Form>\n  );\n};\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useArrowKeyNavigation","status":"New","notes":"","components":null},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#ignored-arrow-keys","title":"Ignored arrow keys"}]}},"components":{"nodes":[]}},"pageContext":{"id":"fc8697ba-7b79-5b61-b5d4-f6f58e2aa0a1","components":[],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}