{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/hooks/useindexoflastvisiblechild/","result":{"data":{"mdx":{"id":"7dd46df8-053d-5823-b65a-df9d2cbcdc3f","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"useIndexOfLastVisibleChild\",\n  \"type\": \"hook\",\n  \"categories\": [\"Hooks\", \"Layout\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-usage\"\n  }, `Sample Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#sample-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `This hook will find the index of the last child of a containing element\nthat fits within its bounding rectangle. This is done by summing the widths\nof the children until they exceed the width of the container.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const invisibleStyles = {\n    position: 'absolute',\n    left: 0,\n    pointerEvents: 'none',\n    visibility: 'hidden',\n  };\n  const containerElementRef = React.useRef(null);\n  const overflowElementRef = React.useRef(null);\n  const indexOfLastVisibleChild = useIndexOfLastVisibleChild(\n    containerElementRef.current,\n    overflowElementRef.current,\n  );\n  const elements = ['Element 1', 'Element 2', 'Element 3', 'Element 4', 'Element 5', 'Element 6', 'Element 7'];\n  \n  const children = useMemo(() => {\n    const indexOfOverflowStart = indexOfLastVisibleChild + 1;\n    const childrenList = elements.map((element, i) => (\n      <div\n        key={element}\n        className=\"px-4 pt-2\"\n        style={i >= indexOfOverflowStart ? invisibleStyles : {}}\n      >\n        {element}\n      </div>\n    ));\n\n    const overflowChildren = elements.slice(indexOfOverflowStart)\n      .map(overflowChild => (\n        <Dropdown.Item key={\\`\\${overflowChild}-overflow\\`}>\n          {overflowChild}\n        </Dropdown.Item>\n      )\n    );\n\n    const MoreDropdown = (\n        <Dropdown ref={overflowElementRef} style={!overflowChildren.length ? invisibleStyles : {}} key=\"overflow-example\">\n        <Dropdown.Toggle\n          variant=\"link\"\n          id=\"more-toggle\"\n        >\n          More...\n        </Dropdown.Toggle>\n        <Dropdown.Menu className=\"dropdown-menu-right\">{overflowChildren}</Dropdown.Menu>\n      </Dropdown>\n    )\n\n    childrenList.push(MoreDropdown);\n\n    return childrenList;\n  }, [indexOfLastVisibleChild]);\n\n  return (\n    <div className=\"d-flex\" ref={containerElementRef}>\n      {children}\n    </div>\n  )\n};\n\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useIndexOfLastVisibleChild","status":"New","notes":"","components":null},"tableOfContents":{"items":[{"url":"#sample-usage","title":"Sample Usage"}]}},"components":{"nodes":[]}},"pageContext":{"id":"7dd46df8-053d-5823-b65a-df9d2cbcdc3f","components":[],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}