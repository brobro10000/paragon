{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/hooks/useisvisible/","result":{"data":{"mdx":{"id":"8262905a-3f9b-5dba-90e0-9a8b5b2c01eb","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"useIsVisible\",\n  \"type\": \"hook\",\n  \"categories\": [\"Hooks\", \"Layout\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A React hook that can be used to determine whether an element is visible in the DOM. It returns an array with 2 elements:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `A boolean value whether the element is visible.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `A React `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `ref`), ` to pass to the desired element.`)), mdx(\"p\", null, `Note that the element's visibility is determined by whether the element can be accessed by the browser in the current viewport. Elements hidden with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `opacity: 0;`), ` or\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `visibility: hidden;`), ` are considered to be visible, whereas `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `display: none;`), ` is considered to be not visible. The element is considered to be not visible when its hidden\nvia a parent element's `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `overflow: hidden;`), ` style.`), mdx(\"h2\", {\n    \"id\": \"sample-usage\"\n  }, `Sample Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#sample-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `In this example, a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `div`), ` is conditionally rendered based on the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `isHidden`), ` state value. When the button is clicked, the element's\nvisibility is toggled. The returned boolean value of the element's visibility is displayed.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [isElementVisible, elementVisibleRef] = useIsVisible();\n  const [isHidden, setIsHidden] = useState(false);\n\n  const toggleElementVisibility = () => {\n    setIsHidden(s => !s);\n  };\n\n  return (\n    <>\n      <div className=\"mb-3\">\n        <Button onClick={toggleElementVisibility} size=\"sm\" className=\"mb-2\">\n          Toggle element visibility\n        </Button>\n        <p>Is element visible? {isElementVisible ? 'yes' : 'no'}</p>\n      </div>\n      <div ref={elementVisibleRef} className=\"p-1 border\" style={{ display: isHidden ? 'none' : 'block' }}>\n        Visible element\n      </div>\n    </>\n  );\n};\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useIsVisible","status":"Stable","notes":"","components":null},"tableOfContents":{"items":[{"url":"#sample-usage","title":"Sample Usage"}]}},"components":{"nodes":[]}},"pageContext":{"id":"8262905a-3f9b-5dba-90e0-9a8b5b2c01eb","components":[],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}