{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/iconbutton/","result":{"data":{"mdx":{"id":"a976b3c9-9f4e-5899-b23c-fa767595c2a2","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"IconButton\",\n  \"type\": \"component\",\n  \"components\": [\"IconButton\", \"IconButtonWithTooltip\"],\n  \"categories\": [\"Buttonlike\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"basic-usage-with-paragon-icon\"\n  }, `Basic Usage with Paragon Icon`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage-with-paragon-icon\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const variants = [\"brand\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\", \"light\", \"dark\", \"black\"];\n  return (\n    <div className=\"d-flex flex-wrap\">\n      {variants.map((variant) => (\n        <IconButton key={variant} src={Close} iconAs={Icon} alt=\"Close\" onClick={() => {}} variant={variant} className=\"mr-2\" />\n      ))}\n    </div>\n  );\n}\n`)), mdx(\"h2\", {\n    \"id\": \"with-tooltips\"\n  }, `With tooltips`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-tooltips\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const variants = [\"brand\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\", \"light\", \"dark\", \"black\"];\n  return (\n    <div className=\"d-flex\">\n      {variants.map((variant) => (\n        <IconButtonWithTooltip\n          key={variant}\n          tooltipPlacement='top'\n          tooltipContent={<div>a nice tooltip of {variant}!</div>}\n          src={Close}\n          iconAs={Icon}\n          alt=\"Close\"\n          onClick={() => {}}\n          variant={variant}\n          className=\"mr-2\"\n        />\n      ))}\n    </div>\n  );\n}\n`)), mdx(\"h2\", {\n    \"id\": \"active-state\"\n  }, `Active State`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#active-state\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const variants = [\"brand\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\", \"light\", \"dark\", \"black\"];\n  return (\n    <div className=\"d-flex\">\n      {variants.map((variant) => (\n        <IconButton \n          isActive\n          key={variant}\n          src={Close}\n          iconAs={Icon}\n          alt=\"Close\"\n          onClick={() => {}}\n          variant={variant}\n          className=\"mr-2 mb-2\"\n        />\n      ))}\n    </div>\n  );\n}\n`)), mdx(\"h3\", {\n    \"id\": \"isactivetrue-with-inverted-colors\"\n  }, `isActive=true with inverted colors`, mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#isactivetrue-with-inverted-colors\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const variants = [\"brand\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\", \"light\", \"dark\", \"black\"];\n  return (\n    <div className=\"d-flex\">\n      {variants.map((variant) => (\n        <IconButton \n          invertColors\n          isActive\n          key={variant}\n          src={Close}\n          iconAs={Icon}\n          alt=\"Close\"\n          onClick={() => {}}\n          variant={variant}\n          className=\"mr-2\"\n        />\n      ))}\n    </div>\n  );\n}\n`)), mdx(\"h2\", {\n    \"id\": \"inverted-colors\"\n  }, `Inverted Colors`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#inverted-colors\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<div className=\"d-flex\">\n  <div className=\"p-1 bg-brand\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"brand\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1 bg-primary\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"primary\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1 bg-secondary\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"secondary\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1 bg-success\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"success\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1 bg-warning\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"warning\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1 bg-danger\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"danger\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1 bg-light\">\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"light\"\n      invertColors\n    />\n  </div>\n  <div className=\"p-1\" style={{ background: \"black\" }}>\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => console.log(\"You clicked the menu button\")}\n      variant=\"black\"\n      invertColors\n    />\n  </div>\n</div>\n`)), mdx(\"h2\", {\n    \"id\": \"sizes\"\n  }, `Sizes`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#sizes\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <div className=\"mb-1\">\n    Small\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => {}}\n      variant=\"primary\"\n      size=\"sm\"\n    />\n  </div>\n  <div className=\"mb-1\">\n    Inline:\n    <IconButton\n      src={MenuIcon}\n      iconAs={Icon}\n      alt=\"Menu\"\n      onClick={() => {}}\n      variant=\"primary\"\n      size=\"inline\"\n    />\n  </div>\n  <div className=\"x-small mb-1\">\n    An <strong>inline</strong> Icon Button inherits font size!\n    For example, applying className=\"x-small\" will make the Icon Button look like this:\n    <IconButton\n      src={Favorite}\n      iconAs={Icon}\n      alt=\"Favorite\"\n      onClick={() => {}}\n      variant=\"primary\"\n      size=\"inline\"\n    />\n    . The Icon Button will also wrap with the text as long as it is not a direct child of a flex box.\n  </div>\n</>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"IconButton","status":"New","notes":"","components":["IconButton","IconButtonWithTooltip"]},"tableOfContents":{"items":[{"url":"#basic-usage-with-paragon-icon","title":"Basic Usage with Paragon Icon"},{"url":"#with-tooltips","title":"With tooltips"},{"url":"#active-state","title":"Active State","items":[{"url":"#isactivetrue-with-inverted-colors","title":"isActive=true with inverted colors"}]},{"url":"#inverted-colors","title":"Inverted Colors"},{"url":"#sizes","title":"Sizes"}]}},"components":{"nodes":[{"displayName":"IconButton","props":[{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"A custom class name.","doclets":[],"description":{"id":"ec100fcd-bde4-56b5-9925-9b6ca1f98011","text":"A custom class name.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A custom class name.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"iconAs","type":{"name":"elementType","raw":null,"value":null},"required":false,"docblock":"Component that renders the icon, currently defaults to `FontAwesomeIcon`,\n but is going to be deprecated soon, please use Paragon's icons instead.","doclets":[],"description":{"id":"870b444d-b624-5784-8400-1db47ef18b8a","text":"Component that renders the icon, currently defaults to `FontAwesomeIcon`,\n but is going to be deprecated soon, please use Paragon's icons instead.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Component that renders the icon, currently defaults to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `FontAwesomeIcon`), `,\nbut is going to be deprecated soon, please use Paragon's icons instead.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"null"},"name":"src","type":{"name":"union","raw":null,"value":[{"name":"element"},{"name":"func"}]},"required":false,"docblock":"An icon component to render. Example import of a Paragon icon component:\n`import { Check } from '@edx/paragon/dist/icon';`","doclets":[],"description":{"id":"1d9920a8-249d-5f10-8a6f-7c152a847ffb","text":"An icon component to render. Example import of a Paragon icon component:\n`import { Check } from '@edx/paragon/dist/icon';`","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `An icon component to render. Example import of a Paragon icon component:\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import { Check } from '@edx/paragon/dist/icon';`)));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"alt","type":{"name":"string","raw":null,"value":null},"required":true,"docblock":"Alt text for your icon. For best practice, avoid using alt text to describe\nthe image in the `IconButton`. Instead, we recommend describing the function\nof the button.","doclets":[],"description":{"id":"c7a0ed6b-180e-5421-9049-f03131fe0724","text":"Alt text for your icon. For best practice, avoid using alt text to describe\nthe image in the `IconButton`. Instead, we recommend describing the function\nof the button.","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Alt text for your icon. For best practice, avoid using alt text to describe\nthe image in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButton`), `. Instead, we recommend describing the function\nof the button.`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"invertColors","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Changes icon styles for dark background","doclets":[],"description":{"id":"6444d982-f4f1-543f-8e7f-6d00b3b4e31d","text":"Changes icon styles for dark background","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Changes icon styles for dark background`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"icon","type":{"name":"shape","raw":null,"value":{"prefix":{"name":"string","required":false},"iconName":{"name":"string","required":false},"icon":{"name":"array","required":false}}},"required":false,"docblock":"Accepts a React fontawesome icon. https://fontawesome.com/how-to-use/on-the-web/using-with/react","doclets":[],"description":{"id":"37430753-881d-59fc-b045-ba892efedd40","text":"Accepts a React fontawesome icon. https://fontawesome.com/how-to-use/on-the-web/using-with/react","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Accepts a React fontawesome icon. `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fontawesome.com/how-to-use/on-the-web/using-with/react\"\n  }, `https://fontawesome.com/how-to-use/on-the-web/using-with/react`)));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"iconClassNames","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"Extra class names that will be added to the icon","doclets":[],"description":{"id":"18acc8de-1099-5deb-a651-1d75f78efee4","text":"Extra class names that will be added to the icon","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Extra class names that will be added to the icon`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onClick","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"Click handler for the button","doclets":[],"description":{"id":"91c179b1-1501-58e3-9b18-d44714b01503","text":"Click handler for the button","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Click handler for the button`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'primary'"},"name":"variant","type":{"name":"enum","raw":null,"value":[{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false},{"value":"'light'","computed":false},{"value":"'dark'","computed":false},{"value":"'black'","computed":false},{"value":"'brand'","computed":false}]},"required":false,"docblock":"Type of button (uses Bootstrap options)","doclets":[],"description":{"id":"6ced6ed2-360d-5cc1-819c-4736a63821d7","text":"Type of button (uses Bootstrap options)","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Type of button (uses Bootstrap options)`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'md'"},"name":"size","type":{"name":"enum","raw":null,"value":[{"value":"'sm'","computed":false},{"value":"'md'","computed":false},{"value":"'inline'","computed":false}]},"required":false,"docblock":"size of button to render","doclets":[],"description":{"id":"3a807d66-4545-51ec-82af-d0420ff5c806","text":"size of button to render","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `size of button to render`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isActive","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"whether to show the `IconButton` in an active state, whose styling is distinct from default state","doclets":[],"description":{"id":"f0b19a00-749f-5e92-830b-a378297ab1f1","text":"whether to show the `IconButton` in an active state, whose styling is distinct from default state","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `whether to show the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButton`), ` in an active state, whose styling is distinct from default state`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"IconButtonWithTooltip","props":[{"defaultValue":{"value":"'top'"},"name":"tooltipPlacement","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"tooltip placement can be top, left, right etc, per https://popper.js.org/docs/v2/constructors/#options","doclets":[],"description":{"id":"4baeaeeb-9d10-5f65-b2e6-bc6e4b02e9f9","text":"tooltip placement can be top, left, right etc, per https://popper.js.org/docs/v2/constructors/#options","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `tooltip placement can be top, left, right etc, per `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://popper.js.org/docs/v2/constructors/#options\"\n  }, `https://popper.js.org/docs/v2/constructors/#options`)));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"tooltipContent","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"any valid JSX or text to be rendered as tooltip contents","doclets":[],"description":{"id":"c58c88e5-7a1e-5705-a36c-ac2fa7eecbfd","text":"any valid JSX or text to be rendered as tooltip contents","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `any valid JSX or text to be rendered as tooltip contents`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"'primary'"},"name":"variant","type":{"name":"enum","raw":null,"value":[{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false},{"value":"'light'","computed":false},{"value":"'dark'","computed":false},{"value":"'black'","computed":false},{"value":"'brand'","computed":false}]},"required":false,"docblock":"Type of button (uses Bootstrap options)","doclets":[],"description":{"id":"b2343bf0-dc03-546b-bfed-4063f1434d8f","text":"Type of button (uses Bootstrap options)","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Type of button (uses Bootstrap options)`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"invertColors","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"Changes icon styles for dark background","doclets":[],"description":{"id":"c618d035-c991-5cf1-853f-3c861d98491f","text":"Changes icon styles for dark background","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Changes icon styles for dark background`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"a976b3c9-9f4e-5899-b23c-fa767595c2a2","components":["IconButton","IconButtonWithTooltip"],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}