{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/iconbuttontoggle/","result":{"data":{"mdx":{"id":"1b6f527f-4d49-5ad3-b705-c4217f17ae53","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"IconButtonToggle\",\n  \"type\": \"component\",\n  \"components\": [\"IconButtonToggle\"],\n  \"categories\": [\"Buttonlike\"],\n  \"status\": \"Stable\",\n  \"designStatus\": \"In Progress\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"Helps toggle Data view between list, card view etc.\\n\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Wraps a set of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButton`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButtonWithTooltip`), ` components in a group and marks as active only one at a time.\nThe IconButton with a value matching the 'activeValue' is set to be in the active state.\nWhen one presses on one of the buttons, that button is set to active state, and the callback passed to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `onChange`), ` is called with that value.\nYou can pass a tooltip if you use the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButtonWithTooltip`), ` subcomponent.`), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `    () => {\n      const [activeValue, setActiveValue] = React.useState('card');\n      return (\n        <>\n        <div className=\"mr-2 mt-2 mb-2\">Current value is: <strong>{activeValue}</strong></div>\n        <IconButtonToggle activeValue={activeValue} onChange={ value => setActiveValue(value) }>\n          <IconButton value=\"card\" src={GridView} iconAs={Icon} alt=\"Card\" />\n          <IconButton value=\"list\" src={ListView} iconAs={Icon} alt=\"List\" />\n        </IconButtonToggle>\n        </>\n      );\n    }\n`)), mdx(\"h2\", {\n    \"id\": \"basic-usage-with-tooltips\"\n  }, `Basic Usage (with tooltips)`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage-with-tooltips\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `    () => {\n      const [activeValue, setActiveValue] = React.useState('card');\n      return (\n        <>\n        <div className=\"mr-2 mt-2 mb-2\">Current value is: <strong>{activeValue}</strong></div>\n        <IconButtonToggle activeValue={activeValue} onChange={ value => setActiveValue(value) }>\n          <IconButtonWithTooltip tooltipContent=\"Card view\" value=\"card\" src={GridView} iconAs={Icon} alt=\"Card\" />\n          <IconButtonWithTooltip tooltipContent=\"List view\" value=\"list\" src={ListView} iconAs={Icon} alt=\"List\" />\n        </IconButtonToggle>\n        </>\n      );\n    }\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"IconButtonToggle","status":"Stable","notes":"Helps toggle Data view between list, card view etc.\n","components":["IconButtonToggle"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#basic-usage-with-tooltips","title":"Basic Usage (with tooltips)"}]}},"components":{"nodes":[{"displayName":"IconButtonToggle","props":[{"defaultValue":{"value":"undefined"},"name":"activeValue","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"value to use to check which button to set to active","doclets":[],"description":{"id":"f96ab595-0e4f-5ec0-818b-967851185152","text":"value to use to check which button to set to active","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `value to use to check which button to set to active`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"() => {}"},"name":"onChange","type":{"name":"func","raw":null,"value":null},"required":false,"docblock":"handler that is passed the currently active button's value when a button is selected","doclets":[],"description":{"id":"aa6b8351-5196-5c89-9934-109ffffb3e96","text":"handler that is passed the currently active button's value when a button is selected","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `handler that is passed the currently active button's value when a button is selected`));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"child nodes of type `IconButton` (or its subcomponents) to be rendered within toggle group","doclets":[],"description":{"id":"f9eec4b9-41f0-56b2-91d2-d4fcb116f03a","text":"child nodes of type `IconButton` (or its subcomponents) to be rendered within toggle group","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `child nodes of type `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `IconButton`), ` (or its subcomponents) to be rendered within toggle group`));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"1b6f527f-4d49-5ad3-b705-c4217f17ae53","components":["IconButtonToggle"],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}