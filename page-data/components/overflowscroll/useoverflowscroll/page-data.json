{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/overflowscroll/useoverflowscroll/","result":{"data":{"mdx":{"id":"d5c7df69-85f0-5538-b68b-c2091b9177c2","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"useOverflowScroll\",\n  \"type\": \"hook\",\n  \"categories\": [\"Hooks\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A headless React hook that may be used as the foundation for building carousel-like UI components.`), mdx(\"h2\", {\n    \"id\": \"sample-usage\"\n  }, `Sample Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#sample-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `The following example demonstrates how to use `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useOverflowScroll`), ` to build a carousel-like UI component.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [overflowRef, setOverflowRef] = useState();\n\n  const {\n    isScrolledToStart,\n    isScrolledToEnd,\n    scrollToPrevious,\n    scrollToNext,\n  } = useOverflowScroll({\n    childQuerySelector: '.example-item',\n    overflowRef,\n  });\n\n  const ExampleItem = ({ className }) => (\n    <div\n      className={classNames('example-item border flex-shrink-0 text-center', className)}\n      style={{ width: 160 }}\n    >\n      Item\n    </div>\n  );\n  const itemCount = 20;\n  const items = useMemo(() => Array.from({ length: itemCount }).map((index) => {\n    if (index !== itemCount - 1) {\n      return <ExampleItem key={uuidv4()} className=\"mr-2\" />;\n    }\n    // last element, no right margin\n    return <ExampleItem key={uuidv4()} />;\n  }), []);\n\n  return (\n    <>\n      <div className=\"mb-3\">\n        <Button\n          onClick={scrollToPrevious}\n          disabled={isScrolledToStart}\n          size=\"sm\"\n          className=\"mr-2\"\n        >\n          Previous\n        </Button>\n        <Button\n          onClick={scrollToNext}\n          disabled={isScrolledToEnd}\n          size=\"sm\"\n        >\n          Next\n        </Button>\n      </div>\n      <div\n        ref={setOverflowRef}\n        aria-label=\"example overflow scroll container\"\n        className=\"d-flex\"\n      >\n        {items}\n      </div>\n    </>\n  );\n};\n`)), mdx(\"p\", null, `The hook accepts the following options:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `childQuerySelector`), `. A CSS query selector that can be used to find the child elements within the overflow container.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `onScrollPrevious`), `. Supports a callback function when user scrolls to the previous element via a control.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `onScrollNext`), `. Supports a callback function when user scrolls to the next element via a control.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `hasInteractiveChildren`), `. Whether the child elements are interactive (e.g., clickable cards).`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `disableScroll`), `. An optional flag to disable the scroll behavior for the overflow container.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `disableOpacityMasks`), `. An optional flag to disable the opacity masks at the start/end of the overflow container (if applicable).`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `scrollAnimationBehavior`), `. Allows overriding the default scroll behavior (e.g., \"smooth\", \"instant\", \"auto\").`)), mdx(\"p\", null, `The hook returns the following:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Refs`, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `overflowRef`), `. The ref to pass to your overflow container. Note that this element may receive style overrides for `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `position: relative;`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `overflow-x: scroll`), ` (optionally).`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Behaviors`, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `scrollToPrevious`), `. A click handler to scroll the overflow container to the previous element.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `scrollToNext`), `. A click handler to scroll the overflow container to the next element.`))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Scroll state`, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `isScrolledToStart`), `. Whether the overflow container is scrolled to the start.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `isScrolledToEnd`), `. Whether the overflow container is scrolled to the end.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `activeChildElementIndex`), `. The index of the child element that is currently deemed to be \"active\", i.e. the child element used as the reference position for any `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `scrollToPrevious`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `scrollToNext`), ` calls.`)))), mdx(\"p\", null, `See `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/paragon/components/overflowscroll/overflowscroll\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `OverflowScroll`)), ` for React components that encapsulate the logic within `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useOverflowScroll`), `.`), mdx(\"h3\", {\n    \"id\": \"use-of-offset-and-offsettype\"\n  }, `Use of `, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, `offset`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, `offsetType`), mdx(\"a\", {\n    parentName: \"h3\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#use-of-offset-and-offsettype\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [offset, setOffset] = useState(50);\n  const [offsetType, setOffsetType] = useState('percentage');\n\n  const [overflowRef, setOverflowRef] = useState();\n\n  const {\n    isScrolledToStart,\n    isScrolledToEnd,\n    scrollToPrevious,\n    scrollToNext,\n  } = useOverflowScroll({\n    childQuerySelector: '.example-item',\n    overflowRef,\n    offset,\n    offsetType,\n  });\n\n  const ExampleItem = ({ className }) => (\n    <div\n      className={classNames('example-item border flex-shrink-0 text-center', className)}\n      style={{ width: 160 }}\n    >\n      Item\n    </div>\n  );\n  const itemCount = 20;\n  const items = useMemo(() => Array.from({ length: itemCount }).map((index) => {\n    if (index !== itemCount - 1) {\n      return <ExampleItem key={uuidv4()} className=\"mr-2\" />;\n    }\n    // last element, no right margin\n    return <ExampleItem key={uuidv4()} />;\n  }), []);\n\n  return (\n    <>\n      {/* start example form block */}\n      <ExamplePropsForm\n        inputs={[\n          {\n            value: offset,\n            setValue: setOffset,\n            range: {\n              min: 0,\n              max: offsetType === 'percentage' ? 100 : 1000,\n              step: offsetType === 'percentage' ? 1 : 50,\n            },\n            name: 'offset'\n          },\n          {\n            value: offsetType,\n            setValue: setOffsetType,\n            options: ['percentage', 'fixed'],\n            name: 'offsetType'\n          },\n        ]}\n      />\n      {/* end example form block */}\n\n      <div className=\"mb-3\">\n        <Button\n          onClick={scrollToPrevious}\n          disabled={isScrolledToStart}\n          size=\"sm\"\n          className=\"mr-2\"\n        >\n          Previous\n        </Button>\n        <Button\n          onClick={scrollToNext}\n          disabled={isScrolledToEnd}\n          size=\"sm\"\n        >\n          Next\n        </Button>\n      </div>\n      <div\n        ref={setOverflowRef}\n        aria-label=\"example overflow scroll container\"\n        className=\"d-flex\"\n      >\n        {items}\n      </div>\n    </>\n  );\n};\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useOverflowScroll","status":"New","notes":"","components":null},"tableOfContents":{"items":[{"url":"#sample-usage","title":"Sample Usage","items":[{"url":"#use-of-offset-and-offsettype","title":"Use of offset and offsetType"}]}]}},"components":{"nodes":[]}},"pageContext":{"id":"d5c7df69-85f0-5538-b68b-c2091b9177c2","components":[],"scssVariablesData":{"openedx":"$overflow-scroll-opacity-mask-transparent:  var(--pgn-overflow-scroll-opacity-mask-transparent) !default;\n","edxorg":"$overflow-scroll-opacity-mask-transparent:  var(--pgn-overflow-scroll-opacity-mask-transparent) !default;\n"},"componentsUsageInsights":["Alert","Button","DataTable","DataTable.TableControlBar","DataTable.Table","DataTable.TableFooter","Container","Row","Spinner","Icon","InputText","InputSelect","TextArea","StatusAlert","Hyperlink","Table","CheckCircle","Error","WarningFilled","Alert.Heading","Form.Checkbox","ModalDialog","Form","ModalDialog.Header","ModalDialog.Title","ModalDialog.Body","Form.Group","Form.Label","Form.RadioSet","Form.Radio","ModalDialog.Footer","ActionRow","ModalDialog.CloseButton","StatefulButton","Form.Control","Form.Switch","AlertModal","ValidationFormGroup","Input","ModalLayer","ModalCloseButton","useToggle","Form.Text","useWindowSize","breakpoints","OpenInNew","Col","TransitionReplace","Form.Check","Collapsible","Alert.Link","ArrowForwardIos","Collapsible.Advanced","Collapsible.Trigger","Collapsible.Body","OverlayTrigger","Tooltip","InfoOutline","ArrowBack","Skeleton","Lightbulb","ArrowOutward","Badge","DataTable.EmptyTable","Toast","BookOpen","ErrorOutline","DataTable.RowStatus","Stepper","Stepper.Step","Stepper.ActionRow","MailtoLink","Stack","Card","Card.Section","IconButton","Delete","DataTableContext.Provider","CheckboxControl","Popover","Popover.Title","Popover.Content","Modal","Tab","Tabs","Info","Pagination","Warning","Add","Card.ImageCap","Card.Header","Card.Footer","CardGrid","ActionRow.Spacer","FullscreenModal","Stepper.Header","Assignment","AddCircle","CardView","EditCircle","Pagination.Reduced","CheckBox","MediaQuery","ErrorIcon","Dropdown","Dropdown.Toggle","AvatarButton","Dropdown.Menu","Dropdown.Item","Navbar","Nav","Nav.Link","Breadcrumb","Card.Body","ProgressBar.Annotated","useMediaQuery","Search","FormControl.Feedback","ProductTour","FormControl","SearchField","Dropzone","Image","Download","Check","Card.Status","Sync","MoreVert","PlayCircleFilled","RemoveCircle","Edit","ArrowForward","Bubble","MoneyOutline","Email","ResponsiveContext.Provider","PageBanner","Login","Institution","VisibilityOff","Visibility","Remove","ExpandMore","ChevronLeft","FormAutosuggestOption","FormAutosuggest","FormControlFeedback","Close","Form.CheckboxSet","Send","Event","SpinnerSimple","Cancel","Nav.Item","Layout","Layout.Element","ModalPopup","IconButtonWithTooltip","EditOutline","DeleteOutline","Truncate","ContentCopy","Dropdown.Divider","InsertDriveFile","Terminal","AudioFile","Chip","Collapsible.Visible","ExpandLess","FileUploadIcon","Card.Divider","Calendar","SwitchControl","WarningIcon","Form.Row","ButtonGroup","SelectableBox.Set","SelectableBox","Settings","EmailIcon","CheckCircleIcon","AddIcon","Copyright","Cc","Attribution","Nc","Nd","Sa","InfoIcon","Tune","SearchField.Advanced","SearchField.Label","SearchField.Input","SearchIcon","PostOutline","HelpOutline","Report","MoreHoriz","School","Avatar","DropdownButton","Post","Help","People","Locked","ModalDialog.Hero","Launch","Book","EventNote","Program","FilterAlt","CloseSmall","Sheet","useCheckboxSetValues","paragon","MarketingModal","Dropdown.Header","FormLabel","PersonSearch","FormGroup","ChevronRight","Lock","StarFilled","Navbar.Brand","VerifiedBadge","StandardModal","CardCarousel","CardDeck","ZoomOut","MenuIcon","Dropdown.Deprecated","AccountBalance","WatchFilled","Blocked","ArrowDropDown","ArrowDropUp","Menu","ChatBubbleOutline","ArrowBackIos","QuestionAnswer","WatchOutline","Compass","MoneyFilled","CheckIcon","DataTable.FilterStatus","DjangoShort","Form.AutosuggestOption","Form.Autosuggest","NotificationsNone","SearchField.ClearButton","SearchField.SubmitButton","FeedbackOutline","KeyboardArrowDown","KeyboardArrowUp","FileUpload","ClosedCaption","DragIndicator","icons","Scrollable","Form.SwitchSet","Facebook","BsTwitter","BsLinkedin","Reddit","Groups","Thunderstorm","Minimize","Recommend","useArrowKeyNavigation","CallMade","KeyboardArrowRight","Person","ArrowUpward","Verified","Timelapse","ArrowRightAlt","ExpandCircleDown","LocalOffer","CreditCard","LibraryBooks","AccessTime","FormatQuote","CalendarMonth","LocationOn","Done","MenuItem","CheckBoxGroup","Variant","Fieldset"]}},"staticQueryHashes":["3617884278","3649515864","3773363936","63159454"]}