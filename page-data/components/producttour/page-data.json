{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/producttour/","result":{"data":{"mdx":{"id":"91c3d79d-dae6-5af3-9b47-9ec64b7734c2","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"ProductTour\",\n  \"type\": \"component\",\n  \"components\": [\"ProductTour\"],\n  \"categories\": [\"Overlays\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ProductTour`), ` displays a sequence of checkpoints with anchors around the DOM.\nA `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ProductTour`), ` takes a list of tour objects and will only support one enabled tour at a time. If multiple\ntours are enabled, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ProductTour`), ` will only render the first enabled in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `tours`), ` list.`), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Checkpoints`), ` are rendered in the order they're listed in the checkpoint array.\nThe checkpoint objects themselves have additional props that can override the props defined in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ProductTour`), `.`), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n    const [isTourEnabled, setIsTourEnabled] = useState(false);\n    const myFirstTour = {\n      tourId: 'myFirstTour',\n      advanceButtonText: 'Next',\n      dismissButtonText: 'Dismiss',\n      endButtonText: 'Okay',\n      enabled: isTourEnabled,\n      onDismiss: () => setIsTourEnabled(false),\n      onEnd: () => setIsTourEnabled(false),\n      checkpoints: [\n        {\n          advanceButtonText: 'Onward', // Override the default advanceButtonText above\n          body: \"Here's the first checkpoint!\",\n          placement: 'top',\n          target: '#checkpoint-1',\n          title: 'First checkpoint',\n        },\n        {\n          body: \"Here's the second checkpoint!\",\n          onDismiss: () => {\n            console.log('Dismissed the second checkpoint');\n            setIsTourEnabled(false);\n          }, // Override the default onDismiss above\n          placement: 'right',\n          target: '#checkpoint-2',\n          title: 'Second checkpoint',\n        },\n        {\n          body: \"Here's the third checkpoint!\",\n          placement: 'bottom',\n          target: '#checkpoint-3',\n          title: 'Third checkpoint',\n          onEnd: () => {\n            console.log('Ended the third checkpoint');\n            setIsTourEnabled(false);\n          } // Additional logic for the onEnd callback to be called on the last checkpoint\n        }\n      ],\n    };\n\n    return (\n      <>\n        <ProductTour\n          tours={[myFirstTour]}\n        />\n        <Button onClick={() => setIsTourEnabled(true)}>Open a product tour</Button>\n        <Row className=\"w-100 m-0 mt-3 p-2 justify-content-around\">\n          <div id=\"checkpoint-1\"><Icon src={Check}/></div>\n          <div id=\"checkpoint-2\"><Icon src={Check}/></div>\n          <div id=\"checkpoint-3\"><Icon src={Check}/></div>\n        </Row>\n      </>\n    );\n}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"ProductTour","status":"New","notes":null,"components":["ProductTour"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"}]}},"components":{"nodes":[{"displayName":"ProductTour","props":[{"defaultValue":{"value":"{\n  advanceButtonText: '',\n  checkpoints: {\n    advanceButtonText: '',\n    body: '',\n    dismissButtonText: '',\n    endButtonText: '',\n    onAdvance: () => {},\n    onDismiss: () => {},\n    placement: 'top',\n    title: '',\n    showDismissButton: undefined,\n  },\n  dismissButtonText: '',\n  endButtonText: '',\n  onDismiss: () => {},\n  onEnd: () => {},\n  onEscape: () => {},\n  startingIndex: 0,\n}"},"name":"tours","type":{"name":"arrayOf","raw":null,"value":{"name":"shape","value":{"advanceButtonText":{"name":"node","description":"The text displayed on all buttons used to advance the tour.","required":false},"checkpoints":{"name":"arrayOf","value":{"name":"shape","value":{"advanceButtonText":{"name":"node","description":"The text displayed on the button used to advance the tour for the given Checkpoint\n(overrides the* `advanceButtonText` defined in the parent tour object).","required":false},"body":{"name":"node","description":"The text displayed in the body of the Checkpoint","required":false},"dismissButtonText":{"name":"node","description":"The text displayed on the button used to dismiss the tour for the given Checkpoint\n(overrides the `dismissButtonText` defined in the parent tour object).","required":false},"endButtonText":{"name":"node","description":"The text displayed on the button used to end the tour for the given Checkpoint\n(overrides the `endButtonText` defined in the parent tour object).","required":false},"onAdvance":{"name":"func","description":"A function that runs when triggering the `onClick` event of the advance\nbutton for the given Checkpoint.","required":false},"onDismiss":{"name":"func","description":"A function that runs when triggering the `onClick` event of the dismiss\nbutton for the given Checkpoint (overrides the `onDismiss` function defined in the parent tour object).","required":false},"onEnd":{"name":"func","description":"A function that runs when triggering the `onClick` event of the advance\nbutton if the given Checkpoint is the only or last Checkpoint in a tour.","required":true},"placement":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'top-start'","computed":false},{"value":"'top-end'","computed":false},{"value":"'right-start'","computed":false},{"value":"'right'","computed":false},{"value":"'right-end'","computed":false},{"value":"'left-start'","computed":false},{"value":"'left'","computed":false},{"value":"'left-end'","computed":false},{"value":"'bottom'","computed":false},{"value":"'bottom-start'","computed":false},{"value":"'bottom-end'","computed":false}],"description":"A string that dictates the alignment of the Checkpoint around its target.","required":false},"target":{"name":"string","description":"The CSS selector for the Checkpoint's desired target.","required":true},"title":{"name":"node","description":"The text displayed in the title of the Checkpoint","required":false},"showDismissButton":{"name":"bool","description":"Enforces visibility of the dismiss button under all circumstances","required":false}}},"description":"An array comprised of checkpoint objects supporting the following values:","required":false},"dismissButtonText":{"name":"node","description":"The text displayed on the button used to dismiss the tour.","required":false},"enabled":{"name":"bool","description":"Whether the tour is enabled. If there are multiple tours defined, only one should be enabled at a time.","required":true},"endButtonText":{"name":"node","description":"The text displayed on the button used to end the tour.","required":false},"onDismiss":{"name":"func","description":"A function that runs when triggering the `onClick` event of the dismiss button.","required":false},"onEnd":{"name":"func","description":"A function that runs when triggering the `onClick` event of the end button.","required":false},"onEscape":{"name":"func","description":"A function that runs when pressing the Escape key.","required":false},"startingIndex":{"name":"number","description":"The index of the desired `Checkpoint` to render when the tour starts.","required":false},"tourId":{"name":"string","description":"The ID of the tour","required":true}}}},"required":false,"docblock":"","doclets":[],"description":{"id":"38aeb1f7-3a18-5f2c-a9dd-8c6496d83d59","text":"","childMdx":{"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"91c3d79d-dae6-5af3-9b47-9ec64b7734c2","components":["ProductTour"],"scssVariablesData":{"openedx":"$checkpoint-background-color:  var(--pgn-color-product-tour-checkpoint-bg) !default;\n$checkpoint-body-color:  var(--pgn-color-product-tour-checkpoint-body) !default;\n$checkpoint-border-color:  var(--pgn-color-product-tour-checkpoint-border) !default;\n$checkpoint-border-width:  var(--pgn-size-product-tour-checkpoint-width-border) !default;\n$checkpoint-breadcrumb-color:  var(--pgn-color-product-tour-checkpoint-breadcrumb) !default;\n$checkpoint-arrow-width:  var(--pgn-size-product-tour-checkpoint-width-arrow) !default;\n$checkpoint-max-width:  var(--pgn-size-product-tour-checkpoint-width-max) !default;\n$checkpoint-z-index:  var(--pgn-elevation-product-tour-checkpoint-zindex) !default;\n$checkpoint-arrow-border-bottom:  var(--pgn-size-product-tour-checkpoint-arrow-bottom) !default;\n$checkpoint-arrow-border-top:  var(--pgn-size-product-tour-checkpoint-arrow-top) !default;\n$checkpoint-arrow-border-transparent:  var(--pgn-size-product-tour-checkpoint-arrow-transparent) !default;\n$checkpoint-box-shadow-color:  var(--pgn-color-product-tour-checkpoint-box-shadow) !default;\n$checkpoint-arrow-border-color-top:  var(--pgn-color-product-tour-checkpoint-arrow-border-top) !default;\n$checkpoint-arrow-border-color-transparent:  var(--pgn-color-product-tour-checkpoint-arrow-border-transparent) !default;\n","edxorg":"$checkpoint-background-color:  var(--pgn-color-product-tour-checkpoint-bg) !default;\n$checkpoint-body-color:  var(--pgn-color-product-tour-checkpoint-body) !default;\n$checkpoint-border-color:  var(--pgn-color-product-tour-checkpoint-border) !default;\n$checkpoint-border-width:  var(--pgn-size-product-tour-checkpoint-width-border) !default;\n$checkpoint-breadcrumb-color:  var(--pgn-color-product-tour-checkpoint-breadcrumb) !default;\n$checkpoint-arrow-width:  var(--pgn-size-product-tour-checkpoint-width-arrow) !default;\n$checkpoint-max-width:  var(--pgn-size-product-tour-checkpoint-width-max) !default;\n$checkpoint-z-index:  var(--pgn-elevation-product-tour-checkpoint-zindex) !default;\n$checkpoint-arrow-border-bottom:  var(--pgn-size-product-tour-checkpoint-arrow-bottom) !default;\n$checkpoint-arrow-border-top:  var(--pgn-size-product-tour-checkpoint-arrow-top) !default;\n$checkpoint-arrow-border-transparent:  var(--pgn-size-product-tour-checkpoint-arrow-transparent) !default;\n$checkpoint-box-shadow-color:  var(--pgn-color-product-tour-checkpoint-box-shadow) !default;\n$checkpoint-arrow-border-color-top:  var(--pgn-color-product-tour-checkpoint-arrow-border-top) !default;\n$checkpoint-arrow-border-color-transparent:  var(--pgn-color-product-tour-checkpoint-arrow-border-transparent) !default;\n"}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}