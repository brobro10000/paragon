{"componentChunkName":"component---src-templates-component-page-template-tsx","path":"/components/skeleton/","result":{"data":{"mdx":{"id":"bfa6145e-1284-5c27-b0d0-ab7a9e6beb7e","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Skeleton\",\n  \"type\": \"component\",\n  \"components\": [\"Skeleton\"],\n  \"categories\": [\"Status & metadata\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton`), ` component can be used directly in your components in place of content that is loading.\nThis tool has the ability to customize loading state of you component.\nYou can read more about `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton`), ` on the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dvtng/react-loading-skeleton\"\n  }, `official documentation repository`), `.`), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, `Basic Usage`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#basic-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `For convenient customization of the loading component, `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `width`), ` and `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `height`), ` properties are available,\nyou can also set the number of columns in the displayed `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [isChecked, setChecked] = useState(true);\n  const handleChange = e => setChecked(e.target.checked);\n\n  const exampleTitle = 'Example title';\n  const exampleDescription = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. ' +\n          'Lorem Ipsum has been the industry\\\\'s standard dummy text ever since the 1500s, when an unknown ' +\n          'printer took a galley of type and scrambled it to make a type specimen book. It has survived not ' +\n          'only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.';\n\n  return (\n    <>\n      <Form.Checkbox \n        className=\"mb-3\"\n        checked={isChecked}\n        onChange={handleChange}\n      >\n        Show loading state\n      </Form.Checkbox>\n      <h3>{isChecked ? <Skeleton /> : exampleTitle}</h3>\n      {isChecked ? <Skeleton count={4} /> : exampleDescription}\n    </>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"with-image\"\n  }, `With image`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-image\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton`), ` is convenient to use with images, including those in a `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `circle`), ` format.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [isChecked, setChecked] = useState(true);\n  const handleChange = e => setChecked(e.target.checked);\n\n  return (\n    <>\n      <Form.Checkbox\n        className=\"mb-3\"\n        checked={isChecked}\n        onChange={handleChange}\n      >\n        Show loading state\n      </Form.Checkbox>\n      <div>\n        {isChecked ? \n          <Skeleton\n            circle\n            width={200}\n            height={200}\n          /> \n        : <Image\n              alt=\"some image\"\n              roundedCircle\n              src=\"https://picsum.photos/200/200/\"\n          />}\n      </div>\n    </>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"with-custom-theme\"\n  }, `With custom theme`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-custom-theme\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton Theme`), ` allows you to customize the styles of your nested components in a flexible way.\nSettings will be passed on to the rest of the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton`), ` components in the hierarchy.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [isChecked, setChecked] = useState(true);\n  const handleChange = e => setChecked(e.target.checked);\n\n  const exampleTitle = 'Example title with color theme';\n  const exampleDescription = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. ' +\n          'Lorem Ipsum has been the industry\\\\'s standard dummy text ever since the 1500s, when an unknown ' +\n          'printer took a galley of type and scrambled it to make a type specimen book. It has survived not ' +\n          'only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.';\n\n  return (\n    <>\n      <Form.Checkbox \n        className=\"mb-3\"\n        checked={isChecked}\n        onChange={handleChange}\n      >\n        Show loading state\n      </Form.Checkbox>\n      <SkeletonTheme\n        baseColor=\"lightgrey\"\n        highlightColor=\"darkslategrey\"\n        duration={5}\n        direction=\"rtl\"\n      >\n        <h3>\n          {isChecked ? <Skeleton /> : exampleTitle}\n        </h3>\n        <div>\n          {isChecked ? <Skeleton count={4} /> : exampleDescription}\n        </div>\n      </SkeletonTheme>\n    </>\n)}\n`)), mdx(\"h2\", {\n    \"id\": \"with-custom-wrapper\"\n  }, `With custom wrapper`, mdx(\"a\", {\n    parentName: \"h2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1,\n    \"href\": \"#with-custom-wrapper\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"pgn-doc__anchor\"\n  }, `#`))), mdx(\"p\", null, `By wrapping the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Skeleton`), ` in a container, you can flexibly customize the elements of the skeleton.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `() => {\n  const [isChecked, setChecked] = useState(true);\n  const handleChange = e => setChecked(e.target.checked);\n\n  const exampleTitle = 'Example title with custom wrapper';\n  const exampleDescription = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. ' +\n          'Lorem Ipsum has been the industry\\\\'s standard dummy text ever since the 1500s, when an unknown ' +\n          'printer took a galley of type and scrambled it to make a type specimen book. It has survived not ' +\n          'only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.';\n  \n  const customWrapper = ({ children }) => {\n    return (\n      <div\n        style={{\n          border: '1px solid #ccc',\n          display: 'block',\n          padding: '0.5rem',\n          marginBottom: '0.2rem',\n        }}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <Form.Checkbox \n        className=\"mb-3\"\n        checked={isChecked}\n        onChange={handleChange}\n      >\n        Show loading state\n      </Form.Checkbox>\n      <h3>{isChecked ? <Skeleton wrapper={customWrapper} /> : exampleTitle}</h3>\n      <div>{isChecked ? <Skeleton wrapper={customWrapper} count={3} /> : exampleDescription}</div>\n    </>\n)}\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Skeleton","status":"New","notes":null,"components":["Skeleton"]},"tableOfContents":{"items":[{"url":"#basic-usage","title":"Basic Usage"},{"url":"#with-image","title":"With image"},{"url":"#with-custom-theme","title":"With custom theme"},{"url":"#with-custom-wrapper","title":"With custom wrapper"}]}},"components":{"nodes":[]}},"pageContext":{"id":"bfa6145e-1284-5c27-b0d0-ab7a9e6beb7e","components":["Skeleton"],"scssVariablesData":{}}},"staticQueryHashes":["1303225137","3649515864","63159454"]}